
geradorFrequencia.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021c0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080022cc  080022cc  000032cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080022f0  080022f0  00004014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080022f0  080022f0  00004014  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080022f0  080022f0  00004014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080022f0  080022f0  000032f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080022f4  080022f4  000032f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  080022f8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  20000014  0800230c  00004014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  0800230c  00004090  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007741  00000000  00000000  0000403d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014da  00000000  00000000  0000b77e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000938  00000000  00000000  0000cc58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000071f  00000000  00000000  0000d590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000166ab  00000000  00000000  0000dcaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009a6d  00000000  00000000  0002435a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000844e9  00000000  00000000  0002ddc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b22b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002604  00000000  00000000  000b22f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000b48f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	080022b4 	.word	0x080022b4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	080022b4 	.word	0x080022b4

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fbc9 	bl	80008e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f9d7 	bl	8000508 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 fa91 	bl	8000680 <MX_GPIO_Init>
  MX_TIM2_Init();
 800015e:	f000 fa19 	bl	8000594 <MX_TIM2_Init>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000162:	2100      	movs	r1, #0
 8000164:	48a3      	ldr	r0, [pc, #652]	@ (80003f4 <main+0x2a8>)
 8000166:	f001 fb3f 	bl	80017e8 <HAL_TIM_PWM_Start>

  // Inicializa com frequência de "vazio"
  PWM_SetFrequency(FREQ_VAZIO);
 800016a:	f246 7084 	movw	r0, #26500	@ 0x6784
 800016e:	f000 f95b 	bl	8000428 <PWM_SetFrequency>

  // Desliga todos os LEDs inicialmente
  HAL_GPIO_WritePin(extra_baixo_GPIO_Port, extra_baixo_Pin, GPIO_PIN_RESET);
 8000172:	2200      	movs	r2, #0
 8000174:	2180      	movs	r1, #128	@ 0x80
 8000176:	48a0      	ldr	r0, [pc, #640]	@ (80003f8 <main+0x2ac>)
 8000178:	f000 fe97 	bl	8000eaa <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(baixo_GPIO_Port, baixo_Pin, GPIO_PIN_RESET);
 800017c:	2200      	movs	r2, #0
 800017e:	2120      	movs	r1, #32
 8000180:	489d      	ldr	r0, [pc, #628]	@ (80003f8 <main+0x2ac>)
 8000182:	f000 fe92 	bl	8000eaa <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(medio_GPIO_Port, medio_Pin, GPIO_PIN_RESET);
 8000186:	2200      	movs	r2, #0
 8000188:	2108      	movs	r1, #8
 800018a:	489b      	ldr	r0, [pc, #620]	@ (80003f8 <main+0x2ac>)
 800018c:	f000 fe8d 	bl	8000eaa <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(alto_GPIO_Port, alto_Pin, GPIO_PIN_RESET);
 8000190:	2200      	movs	r2, #0
 8000192:	2102      	movs	r1, #2
 8000194:	4898      	ldr	r0, [pc, #608]	@ (80003f8 <main+0x2ac>)
 8000196:	f000 fe88 	bl	8000eaa <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      uint32_t current_time = HAL_GetTick();
 800019a:	f000 fbfd 	bl	8000998 <HAL_GetTick>
 800019e:	6078      	str	r0, [r7, #4]

      // Lógica para o botão "selecionar nível"
      if (HAL_GPIO_ReadPin(nivel_GPIO_Port, nivel_Pin) == GPIO_PIN_RESET && (current_time - last_nivel_press_time) > DEBOUNCE_TIME) {
 80001a0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80001a4:	4895      	ldr	r0, [pc, #596]	@ (80003fc <main+0x2b0>)
 80001a6:	f000 fe69 	bl	8000e7c <HAL_GPIO_ReadPin>
 80001aa:	4603      	mov	r3, r0
 80001ac:	2b00      	cmp	r3, #0
 80001ae:	d159      	bne.n	8000264 <main+0x118>
 80001b0:	4b93      	ldr	r3, [pc, #588]	@ (8000400 <main+0x2b4>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	687a      	ldr	r2, [r7, #4]
 80001b6:	1ad3      	subs	r3, r2, r3
 80001b8:	22c8      	movs	r2, #200	@ 0xc8
 80001ba:	4293      	cmp	r3, r2
 80001bc:	d952      	bls.n	8000264 <main+0x118>
          last_nivel_press_time = current_time;
 80001be:	4a90      	ldr	r2, [pc, #576]	@ (8000400 <main+0x2b4>)
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	6013      	str	r3, [r2, #0]

              nivelAtual = (nivelAtual + 1) % 5;
 80001c4:	4b8f      	ldr	r3, [pc, #572]	@ (8000404 <main+0x2b8>)
 80001c6:	781b      	ldrb	r3, [r3, #0]
 80001c8:	1c5a      	adds	r2, r3, #1
 80001ca:	4b8f      	ldr	r3, [pc, #572]	@ (8000408 <main+0x2bc>)
 80001cc:	fb83 1302 	smull	r1, r3, r3, r2
 80001d0:	1059      	asrs	r1, r3, #1
 80001d2:	17d3      	asrs	r3, r2, #31
 80001d4:	1ac9      	subs	r1, r1, r3
 80001d6:	460b      	mov	r3, r1
 80001d8:	009b      	lsls	r3, r3, #2
 80001da:	440b      	add	r3, r1
 80001dc:	1ad1      	subs	r1, r2, r3
 80001de:	b2ca      	uxtb	r2, r1
 80001e0:	4b88      	ldr	r3, [pc, #544]	@ (8000404 <main+0x2b8>)
 80001e2:	701a      	strb	r2, [r3, #0]

              switch (nivelAtual) {
 80001e4:	4b87      	ldr	r3, [pc, #540]	@ (8000404 <main+0x2b8>)
 80001e6:	781b      	ldrb	r3, [r3, #0]
 80001e8:	2b04      	cmp	r3, #4
 80001ea:	d826      	bhi.n	800023a <main+0xee>
 80001ec:	a201      	add	r2, pc, #4	@ (adr r2, 80001f4 <main+0xa8>)
 80001ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001f2:	bf00      	nop
 80001f4:	08000231 	.word	0x08000231
 80001f8:	08000209 	.word	0x08000209
 80001fc:	08000213 	.word	0x08000213
 8000200:	0800021d 	.word	0x0800021d
 8000204:	08000227 	.word	0x08000227
                  case NIVEL_EXTRA_BAIXO: freqAlvo = FREQ_EXTRA_BAIXO; break;
 8000208:	4b80      	ldr	r3, [pc, #512]	@ (800040c <main+0x2c0>)
 800020a:	f246 1212 	movw	r2, #24850	@ 0x6112
 800020e:	601a      	str	r2, [r3, #0]
 8000210:	e014      	b.n	800023c <main+0xf0>
                  case NIVEL_BAIXO:       freqAlvo = FREQ_BAIXO;       break;
 8000212:	4b7e      	ldr	r3, [pc, #504]	@ (800040c <main+0x2c0>)
 8000214:	f645 62ec 	movw	r2, #24300	@ 0x5eec
 8000218:	601a      	str	r2, [r3, #0]
 800021a:	e00f      	b.n	800023c <main+0xf0>
                  case NIVEL_MEDIO:       freqAlvo = FREQ_MEDIO;       break;
 800021c:	4b7b      	ldr	r3, [pc, #492]	@ (800040c <main+0x2c0>)
 800021e:	f645 32cc 	movw	r2, #23500	@ 0x5bcc
 8000222:	601a      	str	r2, [r3, #0]
 8000224:	e00a      	b.n	800023c <main+0xf0>
                  case NIVEL_ALTO:        freqAlvo = FREQ_ALTO;        break;
 8000226:	4b79      	ldr	r3, [pc, #484]	@ (800040c <main+0x2c0>)
 8000228:	f245 7244 	movw	r2, #22340	@ 0x5744
 800022c:	601a      	str	r2, [r3, #0]
 800022e:	e005      	b.n	800023c <main+0xf0>
                  case NIVEL_NENHUM:      freqAlvo = FREQ_VAZIO;       break;
 8000230:	4b76      	ldr	r3, [pc, #472]	@ (800040c <main+0x2c0>)
 8000232:	f246 7284 	movw	r2, #26500	@ 0x6784
 8000236:	601a      	str	r2, [r3, #0]
 8000238:	e000      	b.n	800023c <main+0xf0>
                  default: break;
 800023a:	bf00      	nop
              }

              HAL_GPIO_WritePin(extra_baixo_GPIO_Port, extra_baixo_Pin, GPIO_PIN_RESET);
 800023c:	2200      	movs	r2, #0
 800023e:	2180      	movs	r1, #128	@ 0x80
 8000240:	486d      	ldr	r0, [pc, #436]	@ (80003f8 <main+0x2ac>)
 8000242:	f000 fe32 	bl	8000eaa <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(baixo_GPIO_Port, baixo_Pin, GPIO_PIN_RESET);
 8000246:	2200      	movs	r2, #0
 8000248:	2120      	movs	r1, #32
 800024a:	486b      	ldr	r0, [pc, #428]	@ (80003f8 <main+0x2ac>)
 800024c:	f000 fe2d 	bl	8000eaa <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(medio_GPIO_Port, medio_Pin, GPIO_PIN_RESET);
 8000250:	2200      	movs	r2, #0
 8000252:	2108      	movs	r1, #8
 8000254:	4868      	ldr	r0, [pc, #416]	@ (80003f8 <main+0x2ac>)
 8000256:	f000 fe28 	bl	8000eaa <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(alto_GPIO_Port, alto_Pin, GPIO_PIN_RESET);
 800025a:	2200      	movs	r2, #0
 800025c:	2102      	movs	r1, #2
 800025e:	4866      	ldr	r0, [pc, #408]	@ (80003f8 <main+0x2ac>)
 8000260:	f000 fe23 	bl	8000eaa <HAL_GPIO_WritePin>
      }

      // Lógica para o botão "encher"
      if (HAL_GPIO_ReadPin(encher_GPIO_Port, encher_Pin) == GPIO_PIN_RESET && (current_time - last_encher_press_time) > DEBOUNCE_TIME) {
 8000264:	2180      	movs	r1, #128	@ 0x80
 8000266:	4865      	ldr	r0, [pc, #404]	@ (80003fc <main+0x2b0>)
 8000268:	f000 fe08 	bl	8000e7c <HAL_GPIO_ReadPin>
 800026c:	4603      	mov	r3, r0
 800026e:	2b00      	cmp	r3, #0
 8000270:	d113      	bne.n	800029a <main+0x14e>
 8000272:	4b67      	ldr	r3, [pc, #412]	@ (8000410 <main+0x2c4>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	687a      	ldr	r2, [r7, #4]
 8000278:	1ad3      	subs	r3, r2, r3
 800027a:	22c8      	movs	r2, #200	@ 0xc8
 800027c:	4293      	cmp	r3, r2
 800027e:	d90c      	bls.n	800029a <main+0x14e>
          last_encher_press_time = current_time;
 8000280:	4a63      	ldr	r2, [pc, #396]	@ (8000410 <main+0x2c4>)
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	6013      	str	r3, [r2, #0]
          if (nivelAtual != NIVEL_NENHUM) {
 8000286:	4b5f      	ldr	r3, [pc, #380]	@ (8000404 <main+0x2b8>)
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	2b00      	cmp	r3, #0
 800028c:	d005      	beq.n	800029a <main+0x14e>
              enchendo = 1;
 800028e:	4b61      	ldr	r3, [pc, #388]	@ (8000414 <main+0x2c8>)
 8000290:	2201      	movs	r2, #1
 8000292:	701a      	strb	r2, [r3, #0]
              esvaziando = 0;
 8000294:	4b60      	ldr	r3, [pc, #384]	@ (8000418 <main+0x2cc>)
 8000296:	2200      	movs	r2, #0
 8000298:	701a      	strb	r2, [r3, #0]
          }
      }

      // Lógica para o botão "esvaziar"
      if (HAL_GPIO_ReadPin(esvaziar_GPIO_Port, esvaziar_Pin) == GPIO_PIN_RESET && (current_time - last_esvaziar_press_time) > DEBOUNCE_TIME) {
 800029a:	2140      	movs	r1, #64	@ 0x40
 800029c:	4857      	ldr	r0, [pc, #348]	@ (80003fc <main+0x2b0>)
 800029e:	f000 fded 	bl	8000e7c <HAL_GPIO_ReadPin>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d10f      	bne.n	80002c8 <main+0x17c>
 80002a8:	4b5c      	ldr	r3, [pc, #368]	@ (800041c <main+0x2d0>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	687a      	ldr	r2, [r7, #4]
 80002ae:	1ad3      	subs	r3, r2, r3
 80002b0:	22c8      	movs	r2, #200	@ 0xc8
 80002b2:	4293      	cmp	r3, r2
 80002b4:	d908      	bls.n	80002c8 <main+0x17c>
          last_esvaziar_press_time = current_time;
 80002b6:	4a59      	ldr	r2, [pc, #356]	@ (800041c <main+0x2d0>)
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	6013      	str	r3, [r2, #0]
          enchendo = 0;
 80002bc:	4b55      	ldr	r3, [pc, #340]	@ (8000414 <main+0x2c8>)
 80002be:	2200      	movs	r2, #0
 80002c0:	701a      	strb	r2, [r3, #0]
          esvaziando = 1;
 80002c2:	4b55      	ldr	r3, [pc, #340]	@ (8000418 <main+0x2cc>)
 80002c4:	2201      	movs	r2, #1
 80002c6:	701a      	strb	r2, [r3, #0]
      }

      // Lógica de controle de frequência - ENCHENDO e ESVAZIANDO
      if ((enchendo || esvaziando) && (current_time - last_freq_update_time) > FREQ_UPDATE_TIME) {
 80002c8:	4b52      	ldr	r3, [pc, #328]	@ (8000414 <main+0x2c8>)
 80002ca:	781b      	ldrb	r3, [r3, #0]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d104      	bne.n	80002da <main+0x18e>
 80002d0:	4b51      	ldr	r3, [pc, #324]	@ (8000418 <main+0x2cc>)
 80002d2:	781b      	ldrb	r3, [r3, #0]
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	f43f af60 	beq.w	800019a <main+0x4e>
 80002da:	4b51      	ldr	r3, [pc, #324]	@ (8000420 <main+0x2d4>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	687a      	ldr	r2, [r7, #4]
 80002e0:	1ad3      	subs	r3, r2, r3
 80002e2:	2232      	movs	r2, #50	@ 0x32
 80002e4:	4293      	cmp	r3, r2
 80002e6:	f67f af58 	bls.w	800019a <main+0x4e>
          last_freq_update_time = current_time;
 80002ea:	4a4d      	ldr	r2, [pc, #308]	@ (8000420 <main+0x2d4>)
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	6013      	str	r3, [r2, #0]

          if (enchendo) {
 80002f0:	4b48      	ldr	r3, [pc, #288]	@ (8000414 <main+0x2c8>)
 80002f2:	781b      	ldrb	r3, [r3, #0]
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d019      	beq.n	800032c <main+0x1e0>
              if (freqAtual < freqAlvo) {
 80002f8:	4b4a      	ldr	r3, [pc, #296]	@ (8000424 <main+0x2d8>)
 80002fa:	681a      	ldr	r2, [r3, #0]
 80002fc:	4b43      	ldr	r3, [pc, #268]	@ (800040c <main+0x2c0>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	429a      	cmp	r2, r3
 8000302:	d20a      	bcs.n	800031a <main+0x1ce>
                  freqAtual += 10;
 8000304:	4b47      	ldr	r3, [pc, #284]	@ (8000424 <main+0x2d8>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	330a      	adds	r3, #10
 800030a:	4a46      	ldr	r2, [pc, #280]	@ (8000424 <main+0x2d8>)
 800030c:	6013      	str	r3, [r2, #0]
                  PWM_SetFrequency(freqAtual);
 800030e:	4b45      	ldr	r3, [pc, #276]	@ (8000424 <main+0x2d8>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	4618      	mov	r0, r3
 8000314:	f000 f888 	bl	8000428 <PWM_SetFrequency>
 8000318:	e73f      	b.n	800019a <main+0x4e>
              } else {
                  enchendo = 0;
 800031a:	4b3e      	ldr	r3, [pc, #248]	@ (8000414 <main+0x2c8>)
 800031c:	2200      	movs	r2, #0
 800031e:	701a      	strb	r2, [r3, #0]
                  AtualizaLEDs(nivelAtual);
 8000320:	4b38      	ldr	r3, [pc, #224]	@ (8000404 <main+0x2b8>)
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	4618      	mov	r0, r3
 8000326:	f000 f8a7 	bl	8000478 <AtualizaLEDs>
 800032a:	e736      	b.n	800019a <main+0x4e>
              }
          } else if (esvaziando) {
 800032c:	4b3a      	ldr	r3, [pc, #232]	@ (8000418 <main+0x2cc>)
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	2b00      	cmp	r3, #0
 8000332:	f43f af32 	beq.w	800019a <main+0x4e>
              if (freqAtual > FREQ_VAZIO) {
 8000336:	4b3b      	ldr	r3, [pc, #236]	@ (8000424 <main+0x2d8>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	f246 7284 	movw	r2, #26500	@ 0x6784
 800033e:	4293      	cmp	r3, r2
 8000340:	d937      	bls.n	80003b2 <main+0x266>
                  freqAtual -= 10;
 8000342:	4b38      	ldr	r3, [pc, #224]	@ (8000424 <main+0x2d8>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	3b0a      	subs	r3, #10
 8000348:	4a36      	ldr	r2, [pc, #216]	@ (8000424 <main+0x2d8>)
 800034a:	6013      	str	r3, [r2, #0]
                  PWM_SetFrequency(freqAtual);
 800034c:	4b35      	ldr	r3, [pc, #212]	@ (8000424 <main+0x2d8>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	4618      	mov	r0, r3
 8000352:	f000 f869 	bl	8000428 <PWM_SetFrequency>

                  // Lógica para desligar os LEDs conforme a frequência diminui
                  if (freqAtual < FREQ_ALTO) HAL_GPIO_WritePin(alto_GPIO_Port, alto_Pin, GPIO_PIN_RESET);
 8000356:	4b33      	ldr	r3, [pc, #204]	@ (8000424 <main+0x2d8>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	f245 7243 	movw	r2, #22339	@ 0x5743
 800035e:	4293      	cmp	r3, r2
 8000360:	d804      	bhi.n	800036c <main+0x220>
 8000362:	2200      	movs	r2, #0
 8000364:	2102      	movs	r1, #2
 8000366:	4824      	ldr	r0, [pc, #144]	@ (80003f8 <main+0x2ac>)
 8000368:	f000 fd9f 	bl	8000eaa <HAL_GPIO_WritePin>
                  if (freqAtual < FREQ_MEDIO) HAL_GPIO_WritePin(medio_GPIO_Port, medio_Pin, GPIO_PIN_RESET);
 800036c:	4b2d      	ldr	r3, [pc, #180]	@ (8000424 <main+0x2d8>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	f645 32cb 	movw	r2, #23499	@ 0x5bcb
 8000374:	4293      	cmp	r3, r2
 8000376:	d804      	bhi.n	8000382 <main+0x236>
 8000378:	2200      	movs	r2, #0
 800037a:	2108      	movs	r1, #8
 800037c:	481e      	ldr	r0, [pc, #120]	@ (80003f8 <main+0x2ac>)
 800037e:	f000 fd94 	bl	8000eaa <HAL_GPIO_WritePin>
                  if (freqAtual < FREQ_BAIXO) HAL_GPIO_WritePin(baixo_GPIO_Port, baixo_Pin, GPIO_PIN_RESET);
 8000382:	4b28      	ldr	r3, [pc, #160]	@ (8000424 <main+0x2d8>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	f645 62eb 	movw	r2, #24299	@ 0x5eeb
 800038a:	4293      	cmp	r3, r2
 800038c:	d804      	bhi.n	8000398 <main+0x24c>
 800038e:	2200      	movs	r2, #0
 8000390:	2120      	movs	r1, #32
 8000392:	4819      	ldr	r0, [pc, #100]	@ (80003f8 <main+0x2ac>)
 8000394:	f000 fd89 	bl	8000eaa <HAL_GPIO_WritePin>
                  if (freqAtual < FREQ_EXTRA_BAIXO) HAL_GPIO_WritePin(extra_baixo_GPIO_Port, extra_baixo_Pin, GPIO_PIN_RESET);
 8000398:	4b22      	ldr	r3, [pc, #136]	@ (8000424 <main+0x2d8>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	f246 1211 	movw	r2, #24849	@ 0x6111
 80003a0:	4293      	cmp	r3, r2
 80003a2:	f63f aefa 	bhi.w	800019a <main+0x4e>
 80003a6:	2200      	movs	r2, #0
 80003a8:	2180      	movs	r1, #128	@ 0x80
 80003aa:	4813      	ldr	r0, [pc, #76]	@ (80003f8 <main+0x2ac>)
 80003ac:	f000 fd7d 	bl	8000eaa <HAL_GPIO_WritePin>
 80003b0:	e6f3      	b.n	800019a <main+0x4e>

              } else {
                  esvaziando = 0;
 80003b2:	4b19      	ldr	r3, [pc, #100]	@ (8000418 <main+0x2cc>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	701a      	strb	r2, [r3, #0]
                  freqAtual = FREQ_VAZIO;
 80003b8:	4b1a      	ldr	r3, [pc, #104]	@ (8000424 <main+0x2d8>)
 80003ba:	f246 7284 	movw	r2, #26500	@ 0x6784
 80003be:	601a      	str	r2, [r3, #0]
                  PWM_SetFrequency(FREQ_VAZIO);
 80003c0:	f246 7084 	movw	r0, #26500	@ 0x6784
 80003c4:	f000 f830 	bl	8000428 <PWM_SetFrequency>
                  HAL_GPIO_WritePin(extra_baixo_GPIO_Port, extra_baixo_Pin, GPIO_PIN_RESET);
 80003c8:	2200      	movs	r2, #0
 80003ca:	2180      	movs	r1, #128	@ 0x80
 80003cc:	480a      	ldr	r0, [pc, #40]	@ (80003f8 <main+0x2ac>)
 80003ce:	f000 fd6c 	bl	8000eaa <HAL_GPIO_WritePin>
                  HAL_GPIO_WritePin(baixo_GPIO_Port, baixo_Pin, GPIO_PIN_RESET);
 80003d2:	2200      	movs	r2, #0
 80003d4:	2120      	movs	r1, #32
 80003d6:	4808      	ldr	r0, [pc, #32]	@ (80003f8 <main+0x2ac>)
 80003d8:	f000 fd67 	bl	8000eaa <HAL_GPIO_WritePin>
                  HAL_GPIO_WritePin(medio_GPIO_Port, medio_Pin, GPIO_PIN_RESET);
 80003dc:	2200      	movs	r2, #0
 80003de:	2108      	movs	r1, #8
 80003e0:	4805      	ldr	r0, [pc, #20]	@ (80003f8 <main+0x2ac>)
 80003e2:	f000 fd62 	bl	8000eaa <HAL_GPIO_WritePin>
                  HAL_GPIO_WritePin(alto_GPIO_Port, alto_Pin, GPIO_PIN_RESET);
 80003e6:	2200      	movs	r2, #0
 80003e8:	2102      	movs	r1, #2
 80003ea:	4803      	ldr	r0, [pc, #12]	@ (80003f8 <main+0x2ac>)
 80003ec:	f000 fd5d 	bl	8000eaa <HAL_GPIO_WritePin>
  {
 80003f0:	e6d3      	b.n	800019a <main+0x4e>
 80003f2:	bf00      	nop
 80003f4:	20000044 	.word	0x20000044
 80003f8:	40010800 	.word	0x40010800
 80003fc:	40010c00 	.word	0x40010c00
 8000400:	20000034 	.word	0x20000034
 8000404:	20000030 	.word	0x20000030
 8000408:	66666667 	.word	0x66666667
 800040c:	20000000 	.word	0x20000000
 8000410:	20000038 	.word	0x20000038
 8000414:	20000031 	.word	0x20000031
 8000418:	20000032 	.word	0x20000032
 800041c:	2000003c 	.word	0x2000003c
 8000420:	20000040 	.word	0x20000040
 8000424:	20000004 	.word	0x20000004

08000428 <PWM_SetFrequency>:
  /* USER CODE END 3 */
}


void PWM_SetFrequency(uint32_t freq)
{
 8000428:	b480      	push	{r7}
 800042a:	b087      	sub	sp, #28
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
    uint32_t timer_clock = 72000000; // APB1 Timer clock (Blue Pill)
 8000430:	4b0f      	ldr	r3, [pc, #60]	@ (8000470 <PWM_SetFrequency+0x48>)
 8000432:	617b      	str	r3, [r7, #20]
    uint32_t prescaler = 0;
 8000434:	2300      	movs	r3, #0
 8000436:	613b      	str	r3, [r7, #16]

    uint32_t arr = (timer_clock / (prescaler + 1)) / freq - 1;
 8000438:	693b      	ldr	r3, [r7, #16]
 800043a:	3301      	adds	r3, #1
 800043c:	697a      	ldr	r2, [r7, #20]
 800043e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	fbb2 f3f3 	udiv	r3, r2, r3
 8000448:	3b01      	subs	r3, #1
 800044a:	60fb      	str	r3, [r7, #12]

    __HAL_TIM_SET_AUTORELOAD(&htim2, arr); //sobrescreve arr para chegar na frequencia desejada
 800044c:	4b09      	ldr	r3, [pc, #36]	@ (8000474 <PWM_SetFrequency+0x4c>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	68fa      	ldr	r2, [r7, #12]
 8000452:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000454:	4a07      	ldr	r2, [pc, #28]	@ (8000474 <PWM_SetFrequency+0x4c>)
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, arr/2); // duty 50%
 800045a:	4b06      	ldr	r3, [pc, #24]	@ (8000474 <PWM_SetFrequency+0x4c>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	68fa      	ldr	r2, [r7, #12]
 8000460:	0852      	lsrs	r2, r2, #1
 8000462:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000464:	bf00      	nop
 8000466:	371c      	adds	r7, #28
 8000468:	46bd      	mov	sp, r7
 800046a:	bc80      	pop	{r7}
 800046c:	4770      	bx	lr
 800046e:	bf00      	nop
 8000470:	044aa200 	.word	0x044aa200
 8000474:	20000044 	.word	0x20000044

08000478 <AtualizaLEDs>:

void AtualizaLEDs(NivelPressostato nivel)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0
 800047e:	4603      	mov	r3, r0
 8000480:	71fb      	strb	r3, [r7, #7]
    // Desliga todos os LEDs primeiro
    HAL_GPIO_WritePin(extra_baixo_GPIO_Port, extra_baixo_Pin, GPIO_PIN_RESET);
 8000482:	2200      	movs	r2, #0
 8000484:	2180      	movs	r1, #128	@ 0x80
 8000486:	481f      	ldr	r0, [pc, #124]	@ (8000504 <AtualizaLEDs+0x8c>)
 8000488:	f000 fd0f 	bl	8000eaa <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(baixo_GPIO_Port, baixo_Pin, GPIO_PIN_RESET);
 800048c:	2200      	movs	r2, #0
 800048e:	2120      	movs	r1, #32
 8000490:	481c      	ldr	r0, [pc, #112]	@ (8000504 <AtualizaLEDs+0x8c>)
 8000492:	f000 fd0a 	bl	8000eaa <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(medio_GPIO_Port, medio_Pin, GPIO_PIN_RESET);
 8000496:	2200      	movs	r2, #0
 8000498:	2108      	movs	r1, #8
 800049a:	481a      	ldr	r0, [pc, #104]	@ (8000504 <AtualizaLEDs+0x8c>)
 800049c:	f000 fd05 	bl	8000eaa <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(alto_GPIO_Port, alto_Pin, GPIO_PIN_RESET);
 80004a0:	2200      	movs	r2, #0
 80004a2:	2102      	movs	r1, #2
 80004a4:	4817      	ldr	r0, [pc, #92]	@ (8000504 <AtualizaLEDs+0x8c>)
 80004a6:	f000 fd00 	bl	8000eaa <HAL_GPIO_WritePin>

    // Acende apenas o LED correspondente ao nível atingido
    switch (nivel) {
 80004aa:	79fb      	ldrb	r3, [r7, #7]
 80004ac:	3b01      	subs	r3, #1
 80004ae:	2b03      	cmp	r3, #3
 80004b0:	d822      	bhi.n	80004f8 <AtualizaLEDs+0x80>
 80004b2:	a201      	add	r2, pc, #4	@ (adr r2, 80004b8 <AtualizaLEDs+0x40>)
 80004b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004b8:	080004c9 	.word	0x080004c9
 80004bc:	080004d5 	.word	0x080004d5
 80004c0:	080004e1 	.word	0x080004e1
 80004c4:	080004ed 	.word	0x080004ed
        case NIVEL_EXTRA_BAIXO:
            HAL_GPIO_WritePin(extra_baixo_GPIO_Port, extra_baixo_Pin, GPIO_PIN_SET);
 80004c8:	2201      	movs	r2, #1
 80004ca:	2180      	movs	r1, #128	@ 0x80
 80004cc:	480d      	ldr	r0, [pc, #52]	@ (8000504 <AtualizaLEDs+0x8c>)
 80004ce:	f000 fcec 	bl	8000eaa <HAL_GPIO_WritePin>
            break;
 80004d2:	e012      	b.n	80004fa <AtualizaLEDs+0x82>
        case NIVEL_BAIXO:
            HAL_GPIO_WritePin(baixo_GPIO_Port, baixo_Pin, GPIO_PIN_SET);
 80004d4:	2201      	movs	r2, #1
 80004d6:	2120      	movs	r1, #32
 80004d8:	480a      	ldr	r0, [pc, #40]	@ (8000504 <AtualizaLEDs+0x8c>)
 80004da:	f000 fce6 	bl	8000eaa <HAL_GPIO_WritePin>
            break;
 80004de:	e00c      	b.n	80004fa <AtualizaLEDs+0x82>
        case NIVEL_MEDIO:
            HAL_GPIO_WritePin(medio_GPIO_Port, medio_Pin, GPIO_PIN_SET);
 80004e0:	2201      	movs	r2, #1
 80004e2:	2108      	movs	r1, #8
 80004e4:	4807      	ldr	r0, [pc, #28]	@ (8000504 <AtualizaLEDs+0x8c>)
 80004e6:	f000 fce0 	bl	8000eaa <HAL_GPIO_WritePin>
            break;
 80004ea:	e006      	b.n	80004fa <AtualizaLEDs+0x82>
        case NIVEL_ALTO:
            HAL_GPIO_WritePin(alto_GPIO_Port, alto_Pin, GPIO_PIN_SET);
 80004ec:	2201      	movs	r2, #1
 80004ee:	2102      	movs	r1, #2
 80004f0:	4804      	ldr	r0, [pc, #16]	@ (8000504 <AtualizaLEDs+0x8c>)
 80004f2:	f000 fcda 	bl	8000eaa <HAL_GPIO_WritePin>
            break;
 80004f6:	e000      	b.n	80004fa <AtualizaLEDs+0x82>
        default:
            // Nenhum LED para NIVEL_NENHUM
            break;
 80004f8:	bf00      	nop
    }
}
 80004fa:	bf00      	nop
 80004fc:	3708      	adds	r7, #8
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	40010800 	.word	0x40010800

08000508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b090      	sub	sp, #64	@ 0x40
 800050c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050e:	f107 0318 	add.w	r3, r7, #24
 8000512:	2228      	movs	r2, #40	@ 0x28
 8000514:	2100      	movs	r1, #0
 8000516:	4618      	mov	r0, r3
 8000518:	f001 fea0 	bl	800225c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800051c:	1d3b      	adds	r3, r7, #4
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	605a      	str	r2, [r3, #4]
 8000524:	609a      	str	r2, [r3, #8]
 8000526:	60da      	str	r2, [r3, #12]
 8000528:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800052a:	2301      	movs	r3, #1
 800052c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800052e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000532:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000534:	2300      	movs	r3, #0
 8000536:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000538:	2301      	movs	r3, #1
 800053a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800053c:	2302      	movs	r3, #2
 800053e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000540:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000544:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000546:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800054a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800054c:	f107 0318 	add.w	r3, r7, #24
 8000550:	4618      	mov	r0, r3
 8000552:	f000 fcc3 	bl	8000edc <HAL_RCC_OscConfig>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800055c:	f000 f8e8 	bl	8000730 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000560:	230f      	movs	r3, #15
 8000562:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000564:	2302      	movs	r3, #2
 8000566:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000568:	2300      	movs	r3, #0
 800056a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800056c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000570:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000572:	2300      	movs	r3, #0
 8000574:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000576:	1d3b      	adds	r3, r7, #4
 8000578:	2102      	movs	r1, #2
 800057a:	4618      	mov	r0, r3
 800057c:	f000 ff30 	bl	80013e0 <HAL_RCC_ClockConfig>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000586:	f000 f8d3 	bl	8000730 <Error_Handler>
  }
}
 800058a:	bf00      	nop
 800058c:	3740      	adds	r7, #64	@ 0x40
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
	...

08000594 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b08e      	sub	sp, #56	@ 0x38
 8000598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800059a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
 80005a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005a8:	f107 0320 	add.w	r3, r7, #32
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005b2:	1d3b      	adds	r3, r7, #4
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]
 80005be:	611a      	str	r2, [r3, #16]
 80005c0:	615a      	str	r2, [r3, #20]
 80005c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  // inicia com aproximadamente 26.5k = 72e6/(2716)*1
  htim2.Instance = TIM2;
 80005c4:	4b2d      	ldr	r3, [pc, #180]	@ (800067c <MX_TIM2_Init+0xe8>)
 80005c6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80005ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80005cc:	4b2b      	ldr	r3, [pc, #172]	@ (800067c <MX_TIM2_Init+0xe8>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005d2:	4b2a      	ldr	r3, [pc, #168]	@ (800067c <MX_TIM2_Init+0xe8>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2716-1;
 80005d8:	4b28      	ldr	r3, [pc, #160]	@ (800067c <MX_TIM2_Init+0xe8>)
 80005da:	f640 229b 	movw	r2, #2715	@ 0xa9b
 80005de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005e0:	4b26      	ldr	r3, [pc, #152]	@ (800067c <MX_TIM2_Init+0xe8>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005e6:	4b25      	ldr	r3, [pc, #148]	@ (800067c <MX_TIM2_Init+0xe8>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80005ec:	4823      	ldr	r0, [pc, #140]	@ (800067c <MX_TIM2_Init+0xe8>)
 80005ee:	f001 f853 	bl	8001698 <HAL_TIM_Base_Init>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80005f8:	f000 f89a 	bl	8000730 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000600:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000602:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000606:	4619      	mov	r1, r3
 8000608:	481c      	ldr	r0, [pc, #112]	@ (800067c <MX_TIM2_Init+0xe8>)
 800060a:	f001 fa51 	bl	8001ab0 <HAL_TIM_ConfigClockSource>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000614:	f000 f88c 	bl	8000730 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000618:	4818      	ldr	r0, [pc, #96]	@ (800067c <MX_TIM2_Init+0xe8>)
 800061a:	f001 f88c 	bl	8001736 <HAL_TIM_PWM_Init>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000624:	f000 f884 	bl	8000730 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000628:	2300      	movs	r3, #0
 800062a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800062c:	2300      	movs	r3, #0
 800062e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000630:	f107 0320 	add.w	r3, r7, #32
 8000634:	4619      	mov	r1, r3
 8000636:	4811      	ldr	r0, [pc, #68]	@ (800067c <MX_TIM2_Init+0xe8>)
 8000638:	f001 fdb2 	bl	80021a0 <HAL_TIMEx_MasterConfigSynchronization>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000642:	f000 f875 	bl	8000730 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000646:	2360      	movs	r3, #96	@ 0x60
 8000648:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800064a:	2300      	movs	r3, #0
 800064c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800064e:	2300      	movs	r3, #0
 8000650:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000652:	2300      	movs	r3, #0
 8000654:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000656:	1d3b      	adds	r3, r7, #4
 8000658:	2200      	movs	r2, #0
 800065a:	4619      	mov	r1, r3
 800065c:	4807      	ldr	r0, [pc, #28]	@ (800067c <MX_TIM2_Init+0xe8>)
 800065e:	f001 f965 	bl	800192c <HAL_TIM_PWM_ConfigChannel>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000668:	f000 f862 	bl	8000730 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800066c:	4803      	ldr	r0, [pc, #12]	@ (800067c <MX_TIM2_Init+0xe8>)
 800066e:	f000 f8b3 	bl	80007d8 <HAL_TIM_MspPostInit>

}
 8000672:	bf00      	nop
 8000674:	3738      	adds	r7, #56	@ 0x38
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	20000044 	.word	0x20000044

08000680 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b088      	sub	sp, #32
 8000684:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000686:	f107 0310 	add.w	r3, r7, #16
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	609a      	str	r2, [r3, #8]
 8000692:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000694:	4b23      	ldr	r3, [pc, #140]	@ (8000724 <MX_GPIO_Init+0xa4>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	4a22      	ldr	r2, [pc, #136]	@ (8000724 <MX_GPIO_Init+0xa4>)
 800069a:	f043 0320 	orr.w	r3, r3, #32
 800069e:	6193      	str	r3, [r2, #24]
 80006a0:	4b20      	ldr	r3, [pc, #128]	@ (8000724 <MX_GPIO_Init+0xa4>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	f003 0320 	and.w	r3, r3, #32
 80006a8:	60fb      	str	r3, [r7, #12]
 80006aa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ac:	4b1d      	ldr	r3, [pc, #116]	@ (8000724 <MX_GPIO_Init+0xa4>)
 80006ae:	699b      	ldr	r3, [r3, #24]
 80006b0:	4a1c      	ldr	r2, [pc, #112]	@ (8000724 <MX_GPIO_Init+0xa4>)
 80006b2:	f043 0304 	orr.w	r3, r3, #4
 80006b6:	6193      	str	r3, [r2, #24]
 80006b8:	4b1a      	ldr	r3, [pc, #104]	@ (8000724 <MX_GPIO_Init+0xa4>)
 80006ba:	699b      	ldr	r3, [r3, #24]
 80006bc:	f003 0304 	and.w	r3, r3, #4
 80006c0:	60bb      	str	r3, [r7, #8]
 80006c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c4:	4b17      	ldr	r3, [pc, #92]	@ (8000724 <MX_GPIO_Init+0xa4>)
 80006c6:	699b      	ldr	r3, [r3, #24]
 80006c8:	4a16      	ldr	r2, [pc, #88]	@ (8000724 <MX_GPIO_Init+0xa4>)
 80006ca:	f043 0308 	orr.w	r3, r3, #8
 80006ce:	6193      	str	r3, [r2, #24]
 80006d0:	4b14      	ldr	r3, [pc, #80]	@ (8000724 <MX_GPIO_Init+0xa4>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	f003 0308 	and.w	r3, r3, #8
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, alto_Pin|medio_Pin|baixo_Pin|extra_baixo_Pin, GPIO_PIN_RESET);
 80006dc:	2200      	movs	r2, #0
 80006de:	21aa      	movs	r1, #170	@ 0xaa
 80006e0:	4811      	ldr	r0, [pc, #68]	@ (8000728 <MX_GPIO_Init+0xa8>)
 80006e2:	f000 fbe2 	bl	8000eaa <HAL_GPIO_WritePin>

  /*Configure GPIO pins : alto_Pin medio_Pin baixo_Pin extra_baixo_Pin */
  GPIO_InitStruct.Pin = alto_Pin|medio_Pin|baixo_Pin|extra_baixo_Pin;
 80006e6:	23aa      	movs	r3, #170	@ 0xaa
 80006e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ea:	2301      	movs	r3, #1
 80006ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ee:	2300      	movs	r3, #0
 80006f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f2:	2302      	movs	r3, #2
 80006f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f6:	f107 0310 	add.w	r3, r7, #16
 80006fa:	4619      	mov	r1, r3
 80006fc:	480a      	ldr	r0, [pc, #40]	@ (8000728 <MX_GPIO_Init+0xa8>)
 80006fe:	f000 fa39 	bl	8000b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : esvaziar_Pin encher_Pin nivel_Pin */
  GPIO_InitStruct.Pin = esvaziar_Pin|encher_Pin|nivel_Pin;
 8000702:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8000706:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000708:	2300      	movs	r3, #0
 800070a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800070c:	2301      	movs	r3, #1
 800070e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000710:	f107 0310 	add.w	r3, r7, #16
 8000714:	4619      	mov	r1, r3
 8000716:	4805      	ldr	r0, [pc, #20]	@ (800072c <MX_GPIO_Init+0xac>)
 8000718:	f000 fa2c 	bl	8000b74 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800071c:	bf00      	nop
 800071e:	3720      	adds	r7, #32
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	40021000 	.word	0x40021000
 8000728:	40010800 	.word	0x40010800
 800072c:	40010c00 	.word	0x40010c00

08000730 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000734:	b672      	cpsid	i
}
 8000736:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000738:	bf00      	nop
 800073a:	e7fd      	b.n	8000738 <Error_Handler+0x8>

0800073c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800073c:	b480      	push	{r7}
 800073e:	b085      	sub	sp, #20
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000742:	4b15      	ldr	r3, [pc, #84]	@ (8000798 <HAL_MspInit+0x5c>)
 8000744:	699b      	ldr	r3, [r3, #24]
 8000746:	4a14      	ldr	r2, [pc, #80]	@ (8000798 <HAL_MspInit+0x5c>)
 8000748:	f043 0301 	orr.w	r3, r3, #1
 800074c:	6193      	str	r3, [r2, #24]
 800074e:	4b12      	ldr	r3, [pc, #72]	@ (8000798 <HAL_MspInit+0x5c>)
 8000750:	699b      	ldr	r3, [r3, #24]
 8000752:	f003 0301 	and.w	r3, r3, #1
 8000756:	60bb      	str	r3, [r7, #8]
 8000758:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800075a:	4b0f      	ldr	r3, [pc, #60]	@ (8000798 <HAL_MspInit+0x5c>)
 800075c:	69db      	ldr	r3, [r3, #28]
 800075e:	4a0e      	ldr	r2, [pc, #56]	@ (8000798 <HAL_MspInit+0x5c>)
 8000760:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000764:	61d3      	str	r3, [r2, #28]
 8000766:	4b0c      	ldr	r3, [pc, #48]	@ (8000798 <HAL_MspInit+0x5c>)
 8000768:	69db      	ldr	r3, [r3, #28]
 800076a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000772:	4b0a      	ldr	r3, [pc, #40]	@ (800079c <HAL_MspInit+0x60>)
 8000774:	685b      	ldr	r3, [r3, #4]
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	4a04      	ldr	r2, [pc, #16]	@ (800079c <HAL_MspInit+0x60>)
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800078e:	bf00      	nop
 8000790:	3714      	adds	r7, #20
 8000792:	46bd      	mov	sp, r7
 8000794:	bc80      	pop	{r7}
 8000796:	4770      	bx	lr
 8000798:	40021000 	.word	0x40021000
 800079c:	40010000 	.word	0x40010000

080007a0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b085      	sub	sp, #20
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80007b0:	d10b      	bne.n	80007ca <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80007b2:	4b08      	ldr	r3, [pc, #32]	@ (80007d4 <HAL_TIM_Base_MspInit+0x34>)
 80007b4:	69db      	ldr	r3, [r3, #28]
 80007b6:	4a07      	ldr	r2, [pc, #28]	@ (80007d4 <HAL_TIM_Base_MspInit+0x34>)
 80007b8:	f043 0301 	orr.w	r3, r3, #1
 80007bc:	61d3      	str	r3, [r2, #28]
 80007be:	4b05      	ldr	r3, [pc, #20]	@ (80007d4 <HAL_TIM_Base_MspInit+0x34>)
 80007c0:	69db      	ldr	r3, [r3, #28]
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80007ca:	bf00      	nop
 80007cc:	3714      	adds	r7, #20
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bc80      	pop	{r7}
 80007d2:	4770      	bx	lr
 80007d4:	40021000 	.word	0x40021000

080007d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b088      	sub	sp, #32
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e0:	f107 0310 	add.w	r3, r7, #16
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80007f6:	d117      	bne.n	8000828 <HAL_TIM_MspPostInit+0x50>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f8:	4b0d      	ldr	r3, [pc, #52]	@ (8000830 <HAL_TIM_MspPostInit+0x58>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	4a0c      	ldr	r2, [pc, #48]	@ (8000830 <HAL_TIM_MspPostInit+0x58>)
 80007fe:	f043 0304 	orr.w	r3, r3, #4
 8000802:	6193      	str	r3, [r2, #24]
 8000804:	4b0a      	ldr	r3, [pc, #40]	@ (8000830 <HAL_TIM_MspPostInit+0x58>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	f003 0304 	and.w	r3, r3, #4
 800080c:	60fb      	str	r3, [r7, #12]
 800080e:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000810:	2301      	movs	r3, #1
 8000812:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000814:	2302      	movs	r3, #2
 8000816:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000818:	2302      	movs	r3, #2
 800081a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081c:	f107 0310 	add.w	r3, r7, #16
 8000820:	4619      	mov	r1, r3
 8000822:	4804      	ldr	r0, [pc, #16]	@ (8000834 <HAL_TIM_MspPostInit+0x5c>)
 8000824:	f000 f9a6 	bl	8000b74 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000828:	bf00      	nop
 800082a:	3720      	adds	r7, #32
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40021000 	.word	0x40021000
 8000834:	40010800 	.word	0x40010800

08000838 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800083c:	bf00      	nop
 800083e:	e7fd      	b.n	800083c <NMI_Handler+0x4>

08000840 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000844:	bf00      	nop
 8000846:	e7fd      	b.n	8000844 <HardFault_Handler+0x4>

08000848 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800084c:	bf00      	nop
 800084e:	e7fd      	b.n	800084c <MemManage_Handler+0x4>

08000850 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000854:	bf00      	nop
 8000856:	e7fd      	b.n	8000854 <BusFault_Handler+0x4>

08000858 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800085c:	bf00      	nop
 800085e:	e7fd      	b.n	800085c <UsageFault_Handler+0x4>

08000860 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000864:	bf00      	nop
 8000866:	46bd      	mov	sp, r7
 8000868:	bc80      	pop	{r7}
 800086a:	4770      	bx	lr

0800086c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000870:	bf00      	nop
 8000872:	46bd      	mov	sp, r7
 8000874:	bc80      	pop	{r7}
 8000876:	4770      	bx	lr

08000878 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800087c:	bf00      	nop
 800087e:	46bd      	mov	sp, r7
 8000880:	bc80      	pop	{r7}
 8000882:	4770      	bx	lr

08000884 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000888:	f000 f874 	bl	8000974 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800088c:	bf00      	nop
 800088e:	bd80      	pop	{r7, pc}

08000890 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000894:	bf00      	nop
 8000896:	46bd      	mov	sp, r7
 8000898:	bc80      	pop	{r7}
 800089a:	4770      	bx	lr

0800089c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800089c:	f7ff fff8 	bl	8000890 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008a0:	480b      	ldr	r0, [pc, #44]	@ (80008d0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80008a2:	490c      	ldr	r1, [pc, #48]	@ (80008d4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80008a4:	4a0c      	ldr	r2, [pc, #48]	@ (80008d8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80008a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008a8:	e002      	b.n	80008b0 <LoopCopyDataInit>

080008aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ae:	3304      	adds	r3, #4

080008b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008b4:	d3f9      	bcc.n	80008aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008b6:	4a09      	ldr	r2, [pc, #36]	@ (80008dc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80008b8:	4c09      	ldr	r4, [pc, #36]	@ (80008e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008bc:	e001      	b.n	80008c2 <LoopFillZerobss>

080008be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008c0:	3204      	adds	r2, #4

080008c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008c4:	d3fb      	bcc.n	80008be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008c6:	f001 fcd1 	bl	800226c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008ca:	f7ff fc3f 	bl	800014c <main>
  bx lr
 80008ce:	4770      	bx	lr
  ldr r0, =_sdata
 80008d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008d4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80008d8:	080022f8 	.word	0x080022f8
  ldr r2, =_sbss
 80008dc:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80008e0:	20000090 	.word	0x20000090

080008e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008e4:	e7fe      	b.n	80008e4 <ADC1_2_IRQHandler>
	...

080008e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008ec:	4b08      	ldr	r3, [pc, #32]	@ (8000910 <HAL_Init+0x28>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a07      	ldr	r2, [pc, #28]	@ (8000910 <HAL_Init+0x28>)
 80008f2:	f043 0310 	orr.w	r3, r3, #16
 80008f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008f8:	2003      	movs	r0, #3
 80008fa:	f000 f907 	bl	8000b0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008fe:	200f      	movs	r0, #15
 8000900:	f000 f808 	bl	8000914 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000904:	f7ff ff1a 	bl	800073c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000908:	2300      	movs	r3, #0
}
 800090a:	4618      	mov	r0, r3
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40022000 	.word	0x40022000

08000914 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800091c:	4b12      	ldr	r3, [pc, #72]	@ (8000968 <HAL_InitTick+0x54>)
 800091e:	681a      	ldr	r2, [r3, #0]
 8000920:	4b12      	ldr	r3, [pc, #72]	@ (800096c <HAL_InitTick+0x58>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	4619      	mov	r1, r3
 8000926:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800092a:	fbb3 f3f1 	udiv	r3, r3, r1
 800092e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000932:	4618      	mov	r0, r3
 8000934:	f000 f911 	bl	8000b5a <HAL_SYSTICK_Config>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800093e:	2301      	movs	r3, #1
 8000940:	e00e      	b.n	8000960 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	2b0f      	cmp	r3, #15
 8000946:	d80a      	bhi.n	800095e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000948:	2200      	movs	r2, #0
 800094a:	6879      	ldr	r1, [r7, #4]
 800094c:	f04f 30ff 	mov.w	r0, #4294967295
 8000950:	f000 f8e7 	bl	8000b22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000954:	4a06      	ldr	r2, [pc, #24]	@ (8000970 <HAL_InitTick+0x5c>)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800095a:	2300      	movs	r3, #0
 800095c:	e000      	b.n	8000960 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800095e:	2301      	movs	r3, #1
}
 8000960:	4618      	mov	r0, r3
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	20000008 	.word	0x20000008
 800096c:	20000010 	.word	0x20000010
 8000970:	2000000c 	.word	0x2000000c

08000974 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000978:	4b05      	ldr	r3, [pc, #20]	@ (8000990 <HAL_IncTick+0x1c>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	461a      	mov	r2, r3
 800097e:	4b05      	ldr	r3, [pc, #20]	@ (8000994 <HAL_IncTick+0x20>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4413      	add	r3, r2
 8000984:	4a03      	ldr	r2, [pc, #12]	@ (8000994 <HAL_IncTick+0x20>)
 8000986:	6013      	str	r3, [r2, #0]
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	bc80      	pop	{r7}
 800098e:	4770      	bx	lr
 8000990:	20000010 	.word	0x20000010
 8000994:	2000008c 	.word	0x2000008c

08000998 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  return uwTick;
 800099c:	4b02      	ldr	r3, [pc, #8]	@ (80009a8 <HAL_GetTick+0x10>)
 800099e:	681b      	ldr	r3, [r3, #0]
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bc80      	pop	{r7}
 80009a6:	4770      	bx	lr
 80009a8:	2000008c 	.word	0x2000008c

080009ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b085      	sub	sp, #20
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	f003 0307 	and.w	r3, r3, #7
 80009ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009bc:	4b0c      	ldr	r3, [pc, #48]	@ (80009f0 <__NVIC_SetPriorityGrouping+0x44>)
 80009be:	68db      	ldr	r3, [r3, #12]
 80009c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009c2:	68ba      	ldr	r2, [r7, #8]
 80009c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009c8:	4013      	ands	r3, r2
 80009ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009de:	4a04      	ldr	r2, [pc, #16]	@ (80009f0 <__NVIC_SetPriorityGrouping+0x44>)
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	60d3      	str	r3, [r2, #12]
}
 80009e4:	bf00      	nop
 80009e6:	3714      	adds	r7, #20
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bc80      	pop	{r7}
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	e000ed00 	.word	0xe000ed00

080009f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009f8:	4b04      	ldr	r3, [pc, #16]	@ (8000a0c <__NVIC_GetPriorityGrouping+0x18>)
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	0a1b      	lsrs	r3, r3, #8
 80009fe:	f003 0307 	and.w	r3, r3, #7
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bc80      	pop	{r7}
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	e000ed00 	.word	0xe000ed00

08000a10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	6039      	str	r1, [r7, #0]
 8000a1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	db0a      	blt.n	8000a3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	b2da      	uxtb	r2, r3
 8000a28:	490c      	ldr	r1, [pc, #48]	@ (8000a5c <__NVIC_SetPriority+0x4c>)
 8000a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2e:	0112      	lsls	r2, r2, #4
 8000a30:	b2d2      	uxtb	r2, r2
 8000a32:	440b      	add	r3, r1
 8000a34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a38:	e00a      	b.n	8000a50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	b2da      	uxtb	r2, r3
 8000a3e:	4908      	ldr	r1, [pc, #32]	@ (8000a60 <__NVIC_SetPriority+0x50>)
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	f003 030f 	and.w	r3, r3, #15
 8000a46:	3b04      	subs	r3, #4
 8000a48:	0112      	lsls	r2, r2, #4
 8000a4a:	b2d2      	uxtb	r2, r2
 8000a4c:	440b      	add	r3, r1
 8000a4e:	761a      	strb	r2, [r3, #24]
}
 8000a50:	bf00      	nop
 8000a52:	370c      	adds	r7, #12
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bc80      	pop	{r7}
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	e000e100 	.word	0xe000e100
 8000a60:	e000ed00 	.word	0xe000ed00

08000a64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b089      	sub	sp, #36	@ 0x24
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	60f8      	str	r0, [r7, #12]
 8000a6c:	60b9      	str	r1, [r7, #8]
 8000a6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	f003 0307 	and.w	r3, r3, #7
 8000a76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a78:	69fb      	ldr	r3, [r7, #28]
 8000a7a:	f1c3 0307 	rsb	r3, r3, #7
 8000a7e:	2b04      	cmp	r3, #4
 8000a80:	bf28      	it	cs
 8000a82:	2304      	movcs	r3, #4
 8000a84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a86:	69fb      	ldr	r3, [r7, #28]
 8000a88:	3304      	adds	r3, #4
 8000a8a:	2b06      	cmp	r3, #6
 8000a8c:	d902      	bls.n	8000a94 <NVIC_EncodePriority+0x30>
 8000a8e:	69fb      	ldr	r3, [r7, #28]
 8000a90:	3b03      	subs	r3, #3
 8000a92:	e000      	b.n	8000a96 <NVIC_EncodePriority+0x32>
 8000a94:	2300      	movs	r3, #0
 8000a96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a98:	f04f 32ff 	mov.w	r2, #4294967295
 8000a9c:	69bb      	ldr	r3, [r7, #24]
 8000a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa2:	43da      	mvns	r2, r3
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	401a      	ands	r2, r3
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000aac:	f04f 31ff 	mov.w	r1, #4294967295
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab6:	43d9      	mvns	r1, r3
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000abc:	4313      	orrs	r3, r2
         );
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3724      	adds	r7, #36	@ 0x24
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bc80      	pop	{r7}
 8000ac6:	4770      	bx	lr

08000ac8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	3b01      	subs	r3, #1
 8000ad4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ad8:	d301      	bcc.n	8000ade <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ada:	2301      	movs	r3, #1
 8000adc:	e00f      	b.n	8000afe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ade:	4a0a      	ldr	r2, [pc, #40]	@ (8000b08 <SysTick_Config+0x40>)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	3b01      	subs	r3, #1
 8000ae4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ae6:	210f      	movs	r1, #15
 8000ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aec:	f7ff ff90 	bl	8000a10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000af0:	4b05      	ldr	r3, [pc, #20]	@ (8000b08 <SysTick_Config+0x40>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000af6:	4b04      	ldr	r3, [pc, #16]	@ (8000b08 <SysTick_Config+0x40>)
 8000af8:	2207      	movs	r2, #7
 8000afa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000afc:	2300      	movs	r3, #0
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	e000e010 	.word	0xe000e010

08000b0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b14:	6878      	ldr	r0, [r7, #4]
 8000b16:	f7ff ff49 	bl	80009ac <__NVIC_SetPriorityGrouping>
}
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b086      	sub	sp, #24
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	4603      	mov	r3, r0
 8000b2a:	60b9      	str	r1, [r7, #8]
 8000b2c:	607a      	str	r2, [r7, #4]
 8000b2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b34:	f7ff ff5e 	bl	80009f4 <__NVIC_GetPriorityGrouping>
 8000b38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	68b9      	ldr	r1, [r7, #8]
 8000b3e:	6978      	ldr	r0, [r7, #20]
 8000b40:	f7ff ff90 	bl	8000a64 <NVIC_EncodePriority>
 8000b44:	4602      	mov	r2, r0
 8000b46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b4a:	4611      	mov	r1, r2
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff ff5f 	bl	8000a10 <__NVIC_SetPriority>
}
 8000b52:	bf00      	nop
 8000b54:	3718      	adds	r7, #24
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b082      	sub	sp, #8
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	f7ff ffb0 	bl	8000ac8 <SysTick_Config>
 8000b68:	4603      	mov	r3, r0
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
	...

08000b74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b08b      	sub	sp, #44	@ 0x2c
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b82:	2300      	movs	r3, #0
 8000b84:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b86:	e169      	b.n	8000e5c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b88:	2201      	movs	r2, #1
 8000b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b90:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	69fa      	ldr	r2, [r7, #28]
 8000b98:	4013      	ands	r3, r2
 8000b9a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b9c:	69ba      	ldr	r2, [r7, #24]
 8000b9e:	69fb      	ldr	r3, [r7, #28]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	f040 8158 	bne.w	8000e56 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	4a9a      	ldr	r2, [pc, #616]	@ (8000e14 <HAL_GPIO_Init+0x2a0>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d05e      	beq.n	8000c6e <HAL_GPIO_Init+0xfa>
 8000bb0:	4a98      	ldr	r2, [pc, #608]	@ (8000e14 <HAL_GPIO_Init+0x2a0>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d875      	bhi.n	8000ca2 <HAL_GPIO_Init+0x12e>
 8000bb6:	4a98      	ldr	r2, [pc, #608]	@ (8000e18 <HAL_GPIO_Init+0x2a4>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d058      	beq.n	8000c6e <HAL_GPIO_Init+0xfa>
 8000bbc:	4a96      	ldr	r2, [pc, #600]	@ (8000e18 <HAL_GPIO_Init+0x2a4>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d86f      	bhi.n	8000ca2 <HAL_GPIO_Init+0x12e>
 8000bc2:	4a96      	ldr	r2, [pc, #600]	@ (8000e1c <HAL_GPIO_Init+0x2a8>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d052      	beq.n	8000c6e <HAL_GPIO_Init+0xfa>
 8000bc8:	4a94      	ldr	r2, [pc, #592]	@ (8000e1c <HAL_GPIO_Init+0x2a8>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d869      	bhi.n	8000ca2 <HAL_GPIO_Init+0x12e>
 8000bce:	4a94      	ldr	r2, [pc, #592]	@ (8000e20 <HAL_GPIO_Init+0x2ac>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d04c      	beq.n	8000c6e <HAL_GPIO_Init+0xfa>
 8000bd4:	4a92      	ldr	r2, [pc, #584]	@ (8000e20 <HAL_GPIO_Init+0x2ac>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d863      	bhi.n	8000ca2 <HAL_GPIO_Init+0x12e>
 8000bda:	4a92      	ldr	r2, [pc, #584]	@ (8000e24 <HAL_GPIO_Init+0x2b0>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d046      	beq.n	8000c6e <HAL_GPIO_Init+0xfa>
 8000be0:	4a90      	ldr	r2, [pc, #576]	@ (8000e24 <HAL_GPIO_Init+0x2b0>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d85d      	bhi.n	8000ca2 <HAL_GPIO_Init+0x12e>
 8000be6:	2b12      	cmp	r3, #18
 8000be8:	d82a      	bhi.n	8000c40 <HAL_GPIO_Init+0xcc>
 8000bea:	2b12      	cmp	r3, #18
 8000bec:	d859      	bhi.n	8000ca2 <HAL_GPIO_Init+0x12e>
 8000bee:	a201      	add	r2, pc, #4	@ (adr r2, 8000bf4 <HAL_GPIO_Init+0x80>)
 8000bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bf4:	08000c6f 	.word	0x08000c6f
 8000bf8:	08000c49 	.word	0x08000c49
 8000bfc:	08000c5b 	.word	0x08000c5b
 8000c00:	08000c9d 	.word	0x08000c9d
 8000c04:	08000ca3 	.word	0x08000ca3
 8000c08:	08000ca3 	.word	0x08000ca3
 8000c0c:	08000ca3 	.word	0x08000ca3
 8000c10:	08000ca3 	.word	0x08000ca3
 8000c14:	08000ca3 	.word	0x08000ca3
 8000c18:	08000ca3 	.word	0x08000ca3
 8000c1c:	08000ca3 	.word	0x08000ca3
 8000c20:	08000ca3 	.word	0x08000ca3
 8000c24:	08000ca3 	.word	0x08000ca3
 8000c28:	08000ca3 	.word	0x08000ca3
 8000c2c:	08000ca3 	.word	0x08000ca3
 8000c30:	08000ca3 	.word	0x08000ca3
 8000c34:	08000ca3 	.word	0x08000ca3
 8000c38:	08000c51 	.word	0x08000c51
 8000c3c:	08000c65 	.word	0x08000c65
 8000c40:	4a79      	ldr	r2, [pc, #484]	@ (8000e28 <HAL_GPIO_Init+0x2b4>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d013      	beq.n	8000c6e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c46:	e02c      	b.n	8000ca2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	623b      	str	r3, [r7, #32]
          break;
 8000c4e:	e029      	b.n	8000ca4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	68db      	ldr	r3, [r3, #12]
 8000c54:	3304      	adds	r3, #4
 8000c56:	623b      	str	r3, [r7, #32]
          break;
 8000c58:	e024      	b.n	8000ca4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	68db      	ldr	r3, [r3, #12]
 8000c5e:	3308      	adds	r3, #8
 8000c60:	623b      	str	r3, [r7, #32]
          break;
 8000c62:	e01f      	b.n	8000ca4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	330c      	adds	r3, #12
 8000c6a:	623b      	str	r3, [r7, #32]
          break;
 8000c6c:	e01a      	b.n	8000ca4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	689b      	ldr	r3, [r3, #8]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d102      	bne.n	8000c7c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c76:	2304      	movs	r3, #4
 8000c78:	623b      	str	r3, [r7, #32]
          break;
 8000c7a:	e013      	b.n	8000ca4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	689b      	ldr	r3, [r3, #8]
 8000c80:	2b01      	cmp	r3, #1
 8000c82:	d105      	bne.n	8000c90 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c84:	2308      	movs	r3, #8
 8000c86:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	69fa      	ldr	r2, [r7, #28]
 8000c8c:	611a      	str	r2, [r3, #16]
          break;
 8000c8e:	e009      	b.n	8000ca4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c90:	2308      	movs	r3, #8
 8000c92:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	69fa      	ldr	r2, [r7, #28]
 8000c98:	615a      	str	r2, [r3, #20]
          break;
 8000c9a:	e003      	b.n	8000ca4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	623b      	str	r3, [r7, #32]
          break;
 8000ca0:	e000      	b.n	8000ca4 <HAL_GPIO_Init+0x130>
          break;
 8000ca2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ca4:	69bb      	ldr	r3, [r7, #24]
 8000ca6:	2bff      	cmp	r3, #255	@ 0xff
 8000ca8:	d801      	bhi.n	8000cae <HAL_GPIO_Init+0x13a>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	e001      	b.n	8000cb2 <HAL_GPIO_Init+0x13e>
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	3304      	adds	r3, #4
 8000cb2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000cb4:	69bb      	ldr	r3, [r7, #24]
 8000cb6:	2bff      	cmp	r3, #255	@ 0xff
 8000cb8:	d802      	bhi.n	8000cc0 <HAL_GPIO_Init+0x14c>
 8000cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cbc:	009b      	lsls	r3, r3, #2
 8000cbe:	e002      	b.n	8000cc6 <HAL_GPIO_Init+0x152>
 8000cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cc2:	3b08      	subs	r3, #8
 8000cc4:	009b      	lsls	r3, r3, #2
 8000cc6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	210f      	movs	r1, #15
 8000cce:	693b      	ldr	r3, [r7, #16]
 8000cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd4:	43db      	mvns	r3, r3
 8000cd6:	401a      	ands	r2, r3
 8000cd8:	6a39      	ldr	r1, [r7, #32]
 8000cda:	693b      	ldr	r3, [r7, #16]
 8000cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce0:	431a      	orrs	r2, r3
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	f000 80b1 	beq.w	8000e56 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000cf4:	4b4d      	ldr	r3, [pc, #308]	@ (8000e2c <HAL_GPIO_Init+0x2b8>)
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	4a4c      	ldr	r2, [pc, #304]	@ (8000e2c <HAL_GPIO_Init+0x2b8>)
 8000cfa:	f043 0301 	orr.w	r3, r3, #1
 8000cfe:	6193      	str	r3, [r2, #24]
 8000d00:	4b4a      	ldr	r3, [pc, #296]	@ (8000e2c <HAL_GPIO_Init+0x2b8>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	60bb      	str	r3, [r7, #8]
 8000d0a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d0c:	4a48      	ldr	r2, [pc, #288]	@ (8000e30 <HAL_GPIO_Init+0x2bc>)
 8000d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d10:	089b      	lsrs	r3, r3, #2
 8000d12:	3302      	adds	r3, #2
 8000d14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d18:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d1c:	f003 0303 	and.w	r3, r3, #3
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	220f      	movs	r2, #15
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	43db      	mvns	r3, r3
 8000d2a:	68fa      	ldr	r2, [r7, #12]
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	4a40      	ldr	r2, [pc, #256]	@ (8000e34 <HAL_GPIO_Init+0x2c0>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d013      	beq.n	8000d60 <HAL_GPIO_Init+0x1ec>
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	4a3f      	ldr	r2, [pc, #252]	@ (8000e38 <HAL_GPIO_Init+0x2c4>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d00d      	beq.n	8000d5c <HAL_GPIO_Init+0x1e8>
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	4a3e      	ldr	r2, [pc, #248]	@ (8000e3c <HAL_GPIO_Init+0x2c8>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d007      	beq.n	8000d58 <HAL_GPIO_Init+0x1e4>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	4a3d      	ldr	r2, [pc, #244]	@ (8000e40 <HAL_GPIO_Init+0x2cc>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d101      	bne.n	8000d54 <HAL_GPIO_Init+0x1e0>
 8000d50:	2303      	movs	r3, #3
 8000d52:	e006      	b.n	8000d62 <HAL_GPIO_Init+0x1ee>
 8000d54:	2304      	movs	r3, #4
 8000d56:	e004      	b.n	8000d62 <HAL_GPIO_Init+0x1ee>
 8000d58:	2302      	movs	r3, #2
 8000d5a:	e002      	b.n	8000d62 <HAL_GPIO_Init+0x1ee>
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	e000      	b.n	8000d62 <HAL_GPIO_Init+0x1ee>
 8000d60:	2300      	movs	r3, #0
 8000d62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d64:	f002 0203 	and.w	r2, r2, #3
 8000d68:	0092      	lsls	r2, r2, #2
 8000d6a:	4093      	lsls	r3, r2
 8000d6c:	68fa      	ldr	r2, [r7, #12]
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d72:	492f      	ldr	r1, [pc, #188]	@ (8000e30 <HAL_GPIO_Init+0x2bc>)
 8000d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d76:	089b      	lsrs	r3, r3, #2
 8000d78:	3302      	adds	r3, #2
 8000d7a:	68fa      	ldr	r2, [r7, #12]
 8000d7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d006      	beq.n	8000d9a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d8c:	4b2d      	ldr	r3, [pc, #180]	@ (8000e44 <HAL_GPIO_Init+0x2d0>)
 8000d8e:	689a      	ldr	r2, [r3, #8]
 8000d90:	492c      	ldr	r1, [pc, #176]	@ (8000e44 <HAL_GPIO_Init+0x2d0>)
 8000d92:	69bb      	ldr	r3, [r7, #24]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	608b      	str	r3, [r1, #8]
 8000d98:	e006      	b.n	8000da8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d9a:	4b2a      	ldr	r3, [pc, #168]	@ (8000e44 <HAL_GPIO_Init+0x2d0>)
 8000d9c:	689a      	ldr	r2, [r3, #8]
 8000d9e:	69bb      	ldr	r3, [r7, #24]
 8000da0:	43db      	mvns	r3, r3
 8000da2:	4928      	ldr	r1, [pc, #160]	@ (8000e44 <HAL_GPIO_Init+0x2d0>)
 8000da4:	4013      	ands	r3, r2
 8000da6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d006      	beq.n	8000dc2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000db4:	4b23      	ldr	r3, [pc, #140]	@ (8000e44 <HAL_GPIO_Init+0x2d0>)
 8000db6:	68da      	ldr	r2, [r3, #12]
 8000db8:	4922      	ldr	r1, [pc, #136]	@ (8000e44 <HAL_GPIO_Init+0x2d0>)
 8000dba:	69bb      	ldr	r3, [r7, #24]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	60cb      	str	r3, [r1, #12]
 8000dc0:	e006      	b.n	8000dd0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000dc2:	4b20      	ldr	r3, [pc, #128]	@ (8000e44 <HAL_GPIO_Init+0x2d0>)
 8000dc4:	68da      	ldr	r2, [r3, #12]
 8000dc6:	69bb      	ldr	r3, [r7, #24]
 8000dc8:	43db      	mvns	r3, r3
 8000dca:	491e      	ldr	r1, [pc, #120]	@ (8000e44 <HAL_GPIO_Init+0x2d0>)
 8000dcc:	4013      	ands	r3, r2
 8000dce:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d006      	beq.n	8000dea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ddc:	4b19      	ldr	r3, [pc, #100]	@ (8000e44 <HAL_GPIO_Init+0x2d0>)
 8000dde:	685a      	ldr	r2, [r3, #4]
 8000de0:	4918      	ldr	r1, [pc, #96]	@ (8000e44 <HAL_GPIO_Init+0x2d0>)
 8000de2:	69bb      	ldr	r3, [r7, #24]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	604b      	str	r3, [r1, #4]
 8000de8:	e006      	b.n	8000df8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000dea:	4b16      	ldr	r3, [pc, #88]	@ (8000e44 <HAL_GPIO_Init+0x2d0>)
 8000dec:	685a      	ldr	r2, [r3, #4]
 8000dee:	69bb      	ldr	r3, [r7, #24]
 8000df0:	43db      	mvns	r3, r3
 8000df2:	4914      	ldr	r1, [pc, #80]	@ (8000e44 <HAL_GPIO_Init+0x2d0>)
 8000df4:	4013      	ands	r3, r2
 8000df6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d021      	beq.n	8000e48 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e04:	4b0f      	ldr	r3, [pc, #60]	@ (8000e44 <HAL_GPIO_Init+0x2d0>)
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	490e      	ldr	r1, [pc, #56]	@ (8000e44 <HAL_GPIO_Init+0x2d0>)
 8000e0a:	69bb      	ldr	r3, [r7, #24]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	600b      	str	r3, [r1, #0]
 8000e10:	e021      	b.n	8000e56 <HAL_GPIO_Init+0x2e2>
 8000e12:	bf00      	nop
 8000e14:	10320000 	.word	0x10320000
 8000e18:	10310000 	.word	0x10310000
 8000e1c:	10220000 	.word	0x10220000
 8000e20:	10210000 	.word	0x10210000
 8000e24:	10120000 	.word	0x10120000
 8000e28:	10110000 	.word	0x10110000
 8000e2c:	40021000 	.word	0x40021000
 8000e30:	40010000 	.word	0x40010000
 8000e34:	40010800 	.word	0x40010800
 8000e38:	40010c00 	.word	0x40010c00
 8000e3c:	40011000 	.word	0x40011000
 8000e40:	40011400 	.word	0x40011400
 8000e44:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e48:	4b0b      	ldr	r3, [pc, #44]	@ (8000e78 <HAL_GPIO_Init+0x304>)
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	69bb      	ldr	r3, [r7, #24]
 8000e4e:	43db      	mvns	r3, r3
 8000e50:	4909      	ldr	r1, [pc, #36]	@ (8000e78 <HAL_GPIO_Init+0x304>)
 8000e52:	4013      	ands	r3, r2
 8000e54:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e58:	3301      	adds	r3, #1
 8000e5a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e62:	fa22 f303 	lsr.w	r3, r2, r3
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	f47f ae8e 	bne.w	8000b88 <HAL_GPIO_Init+0x14>
  }
}
 8000e6c:	bf00      	nop
 8000e6e:	bf00      	nop
 8000e70:	372c      	adds	r7, #44	@ 0x2c
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bc80      	pop	{r7}
 8000e76:	4770      	bx	lr
 8000e78:	40010400 	.word	0x40010400

08000e7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	460b      	mov	r3, r1
 8000e86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	689a      	ldr	r2, [r3, #8]
 8000e8c:	887b      	ldrh	r3, [r7, #2]
 8000e8e:	4013      	ands	r3, r2
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d002      	beq.n	8000e9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000e94:	2301      	movs	r3, #1
 8000e96:	73fb      	strb	r3, [r7, #15]
 8000e98:	e001      	b.n	8000e9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3714      	adds	r7, #20
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bc80      	pop	{r7}
 8000ea8:	4770      	bx	lr

08000eaa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	b083      	sub	sp, #12
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	6078      	str	r0, [r7, #4]
 8000eb2:	460b      	mov	r3, r1
 8000eb4:	807b      	strh	r3, [r7, #2]
 8000eb6:	4613      	mov	r3, r2
 8000eb8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000eba:	787b      	ldrb	r3, [r7, #1]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d003      	beq.n	8000ec8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ec0:	887a      	ldrh	r2, [r7, #2]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000ec6:	e003      	b.n	8000ed0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ec8:	887b      	ldrh	r3, [r7, #2]
 8000eca:	041a      	lsls	r2, r3, #16
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	611a      	str	r2, [r3, #16]
}
 8000ed0:	bf00      	nop
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bc80      	pop	{r7}
 8000ed8:	4770      	bx	lr
	...

08000edc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d101      	bne.n	8000eee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	e272      	b.n	80013d4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f003 0301 	and.w	r3, r3, #1
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	f000 8087 	beq.w	800100a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000efc:	4b92      	ldr	r3, [pc, #584]	@ (8001148 <HAL_RCC_OscConfig+0x26c>)
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f003 030c 	and.w	r3, r3, #12
 8000f04:	2b04      	cmp	r3, #4
 8000f06:	d00c      	beq.n	8000f22 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f08:	4b8f      	ldr	r3, [pc, #572]	@ (8001148 <HAL_RCC_OscConfig+0x26c>)
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f003 030c 	and.w	r3, r3, #12
 8000f10:	2b08      	cmp	r3, #8
 8000f12:	d112      	bne.n	8000f3a <HAL_RCC_OscConfig+0x5e>
 8000f14:	4b8c      	ldr	r3, [pc, #560]	@ (8001148 <HAL_RCC_OscConfig+0x26c>)
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f20:	d10b      	bne.n	8000f3a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f22:	4b89      	ldr	r3, [pc, #548]	@ (8001148 <HAL_RCC_OscConfig+0x26c>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d06c      	beq.n	8001008 <HAL_RCC_OscConfig+0x12c>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d168      	bne.n	8001008 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	e24c      	b.n	80013d4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f42:	d106      	bne.n	8000f52 <HAL_RCC_OscConfig+0x76>
 8000f44:	4b80      	ldr	r3, [pc, #512]	@ (8001148 <HAL_RCC_OscConfig+0x26c>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a7f      	ldr	r2, [pc, #508]	@ (8001148 <HAL_RCC_OscConfig+0x26c>)
 8000f4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f4e:	6013      	str	r3, [r2, #0]
 8000f50:	e02e      	b.n	8000fb0 <HAL_RCC_OscConfig+0xd4>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d10c      	bne.n	8000f74 <HAL_RCC_OscConfig+0x98>
 8000f5a:	4b7b      	ldr	r3, [pc, #492]	@ (8001148 <HAL_RCC_OscConfig+0x26c>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a7a      	ldr	r2, [pc, #488]	@ (8001148 <HAL_RCC_OscConfig+0x26c>)
 8000f60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f64:	6013      	str	r3, [r2, #0]
 8000f66:	4b78      	ldr	r3, [pc, #480]	@ (8001148 <HAL_RCC_OscConfig+0x26c>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a77      	ldr	r2, [pc, #476]	@ (8001148 <HAL_RCC_OscConfig+0x26c>)
 8000f6c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f70:	6013      	str	r3, [r2, #0]
 8000f72:	e01d      	b.n	8000fb0 <HAL_RCC_OscConfig+0xd4>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000f7c:	d10c      	bne.n	8000f98 <HAL_RCC_OscConfig+0xbc>
 8000f7e:	4b72      	ldr	r3, [pc, #456]	@ (8001148 <HAL_RCC_OscConfig+0x26c>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a71      	ldr	r2, [pc, #452]	@ (8001148 <HAL_RCC_OscConfig+0x26c>)
 8000f84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f88:	6013      	str	r3, [r2, #0]
 8000f8a:	4b6f      	ldr	r3, [pc, #444]	@ (8001148 <HAL_RCC_OscConfig+0x26c>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a6e      	ldr	r2, [pc, #440]	@ (8001148 <HAL_RCC_OscConfig+0x26c>)
 8000f90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f94:	6013      	str	r3, [r2, #0]
 8000f96:	e00b      	b.n	8000fb0 <HAL_RCC_OscConfig+0xd4>
 8000f98:	4b6b      	ldr	r3, [pc, #428]	@ (8001148 <HAL_RCC_OscConfig+0x26c>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a6a      	ldr	r2, [pc, #424]	@ (8001148 <HAL_RCC_OscConfig+0x26c>)
 8000f9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000fa2:	6013      	str	r3, [r2, #0]
 8000fa4:	4b68      	ldr	r3, [pc, #416]	@ (8001148 <HAL_RCC_OscConfig+0x26c>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a67      	ldr	r2, [pc, #412]	@ (8001148 <HAL_RCC_OscConfig+0x26c>)
 8000faa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000fae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d013      	beq.n	8000fe0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fb8:	f7ff fcee 	bl	8000998 <HAL_GetTick>
 8000fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fbe:	e008      	b.n	8000fd2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fc0:	f7ff fcea 	bl	8000998 <HAL_GetTick>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	2b64      	cmp	r3, #100	@ 0x64
 8000fcc:	d901      	bls.n	8000fd2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	e200      	b.n	80013d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fd2:	4b5d      	ldr	r3, [pc, #372]	@ (8001148 <HAL_RCC_OscConfig+0x26c>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d0f0      	beq.n	8000fc0 <HAL_RCC_OscConfig+0xe4>
 8000fde:	e014      	b.n	800100a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fe0:	f7ff fcda 	bl	8000998 <HAL_GetTick>
 8000fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fe6:	e008      	b.n	8000ffa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fe8:	f7ff fcd6 	bl	8000998 <HAL_GetTick>
 8000fec:	4602      	mov	r2, r0
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	2b64      	cmp	r3, #100	@ 0x64
 8000ff4:	d901      	bls.n	8000ffa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	e1ec      	b.n	80013d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ffa:	4b53      	ldr	r3, [pc, #332]	@ (8001148 <HAL_RCC_OscConfig+0x26c>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001002:	2b00      	cmp	r3, #0
 8001004:	d1f0      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x10c>
 8001006:	e000      	b.n	800100a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001008:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f003 0302 	and.w	r3, r3, #2
 8001012:	2b00      	cmp	r3, #0
 8001014:	d063      	beq.n	80010de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001016:	4b4c      	ldr	r3, [pc, #304]	@ (8001148 <HAL_RCC_OscConfig+0x26c>)
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f003 030c 	and.w	r3, r3, #12
 800101e:	2b00      	cmp	r3, #0
 8001020:	d00b      	beq.n	800103a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001022:	4b49      	ldr	r3, [pc, #292]	@ (8001148 <HAL_RCC_OscConfig+0x26c>)
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f003 030c 	and.w	r3, r3, #12
 800102a:	2b08      	cmp	r3, #8
 800102c:	d11c      	bne.n	8001068 <HAL_RCC_OscConfig+0x18c>
 800102e:	4b46      	ldr	r3, [pc, #280]	@ (8001148 <HAL_RCC_OscConfig+0x26c>)
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001036:	2b00      	cmp	r3, #0
 8001038:	d116      	bne.n	8001068 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800103a:	4b43      	ldr	r3, [pc, #268]	@ (8001148 <HAL_RCC_OscConfig+0x26c>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f003 0302 	and.w	r3, r3, #2
 8001042:	2b00      	cmp	r3, #0
 8001044:	d005      	beq.n	8001052 <HAL_RCC_OscConfig+0x176>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	691b      	ldr	r3, [r3, #16]
 800104a:	2b01      	cmp	r3, #1
 800104c:	d001      	beq.n	8001052 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e1c0      	b.n	80013d4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001052:	4b3d      	ldr	r3, [pc, #244]	@ (8001148 <HAL_RCC_OscConfig+0x26c>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	695b      	ldr	r3, [r3, #20]
 800105e:	00db      	lsls	r3, r3, #3
 8001060:	4939      	ldr	r1, [pc, #228]	@ (8001148 <HAL_RCC_OscConfig+0x26c>)
 8001062:	4313      	orrs	r3, r2
 8001064:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001066:	e03a      	b.n	80010de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	691b      	ldr	r3, [r3, #16]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d020      	beq.n	80010b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001070:	4b36      	ldr	r3, [pc, #216]	@ (800114c <HAL_RCC_OscConfig+0x270>)
 8001072:	2201      	movs	r2, #1
 8001074:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001076:	f7ff fc8f 	bl	8000998 <HAL_GetTick>
 800107a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800107c:	e008      	b.n	8001090 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800107e:	f7ff fc8b 	bl	8000998 <HAL_GetTick>
 8001082:	4602      	mov	r2, r0
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	1ad3      	subs	r3, r2, r3
 8001088:	2b02      	cmp	r3, #2
 800108a:	d901      	bls.n	8001090 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800108c:	2303      	movs	r3, #3
 800108e:	e1a1      	b.n	80013d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001090:	4b2d      	ldr	r3, [pc, #180]	@ (8001148 <HAL_RCC_OscConfig+0x26c>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f003 0302 	and.w	r3, r3, #2
 8001098:	2b00      	cmp	r3, #0
 800109a:	d0f0      	beq.n	800107e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800109c:	4b2a      	ldr	r3, [pc, #168]	@ (8001148 <HAL_RCC_OscConfig+0x26c>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	695b      	ldr	r3, [r3, #20]
 80010a8:	00db      	lsls	r3, r3, #3
 80010aa:	4927      	ldr	r1, [pc, #156]	@ (8001148 <HAL_RCC_OscConfig+0x26c>)
 80010ac:	4313      	orrs	r3, r2
 80010ae:	600b      	str	r3, [r1, #0]
 80010b0:	e015      	b.n	80010de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010b2:	4b26      	ldr	r3, [pc, #152]	@ (800114c <HAL_RCC_OscConfig+0x270>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010b8:	f7ff fc6e 	bl	8000998 <HAL_GetTick>
 80010bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010be:	e008      	b.n	80010d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010c0:	f7ff fc6a 	bl	8000998 <HAL_GetTick>
 80010c4:	4602      	mov	r2, r0
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	d901      	bls.n	80010d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80010ce:	2303      	movs	r3, #3
 80010d0:	e180      	b.n	80013d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001148 <HAL_RCC_OscConfig+0x26c>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f003 0302 	and.w	r3, r3, #2
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d1f0      	bne.n	80010c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f003 0308 	and.w	r3, r3, #8
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d03a      	beq.n	8001160 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	699b      	ldr	r3, [r3, #24]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d019      	beq.n	8001126 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010f2:	4b17      	ldr	r3, [pc, #92]	@ (8001150 <HAL_RCC_OscConfig+0x274>)
 80010f4:	2201      	movs	r2, #1
 80010f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010f8:	f7ff fc4e 	bl	8000998 <HAL_GetTick>
 80010fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010fe:	e008      	b.n	8001112 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001100:	f7ff fc4a 	bl	8000998 <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	2b02      	cmp	r3, #2
 800110c:	d901      	bls.n	8001112 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800110e:	2303      	movs	r3, #3
 8001110:	e160      	b.n	80013d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001112:	4b0d      	ldr	r3, [pc, #52]	@ (8001148 <HAL_RCC_OscConfig+0x26c>)
 8001114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001116:	f003 0302 	and.w	r3, r3, #2
 800111a:	2b00      	cmp	r3, #0
 800111c:	d0f0      	beq.n	8001100 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800111e:	2001      	movs	r0, #1
 8001120:	f000 fa9c 	bl	800165c <RCC_Delay>
 8001124:	e01c      	b.n	8001160 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001126:	4b0a      	ldr	r3, [pc, #40]	@ (8001150 <HAL_RCC_OscConfig+0x274>)
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800112c:	f7ff fc34 	bl	8000998 <HAL_GetTick>
 8001130:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001132:	e00f      	b.n	8001154 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001134:	f7ff fc30 	bl	8000998 <HAL_GetTick>
 8001138:	4602      	mov	r2, r0
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	2b02      	cmp	r3, #2
 8001140:	d908      	bls.n	8001154 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001142:	2303      	movs	r3, #3
 8001144:	e146      	b.n	80013d4 <HAL_RCC_OscConfig+0x4f8>
 8001146:	bf00      	nop
 8001148:	40021000 	.word	0x40021000
 800114c:	42420000 	.word	0x42420000
 8001150:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001154:	4b92      	ldr	r3, [pc, #584]	@ (80013a0 <HAL_RCC_OscConfig+0x4c4>)
 8001156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001158:	f003 0302 	and.w	r3, r3, #2
 800115c:	2b00      	cmp	r3, #0
 800115e:	d1e9      	bne.n	8001134 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f003 0304 	and.w	r3, r3, #4
 8001168:	2b00      	cmp	r3, #0
 800116a:	f000 80a6 	beq.w	80012ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800116e:	2300      	movs	r3, #0
 8001170:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001172:	4b8b      	ldr	r3, [pc, #556]	@ (80013a0 <HAL_RCC_OscConfig+0x4c4>)
 8001174:	69db      	ldr	r3, [r3, #28]
 8001176:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d10d      	bne.n	800119a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800117e:	4b88      	ldr	r3, [pc, #544]	@ (80013a0 <HAL_RCC_OscConfig+0x4c4>)
 8001180:	69db      	ldr	r3, [r3, #28]
 8001182:	4a87      	ldr	r2, [pc, #540]	@ (80013a0 <HAL_RCC_OscConfig+0x4c4>)
 8001184:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001188:	61d3      	str	r3, [r2, #28]
 800118a:	4b85      	ldr	r3, [pc, #532]	@ (80013a0 <HAL_RCC_OscConfig+0x4c4>)
 800118c:	69db      	ldr	r3, [r3, #28]
 800118e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001192:	60bb      	str	r3, [r7, #8]
 8001194:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001196:	2301      	movs	r3, #1
 8001198:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800119a:	4b82      	ldr	r3, [pc, #520]	@ (80013a4 <HAL_RCC_OscConfig+0x4c8>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d118      	bne.n	80011d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011a6:	4b7f      	ldr	r3, [pc, #508]	@ (80013a4 <HAL_RCC_OscConfig+0x4c8>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a7e      	ldr	r2, [pc, #504]	@ (80013a4 <HAL_RCC_OscConfig+0x4c8>)
 80011ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011b2:	f7ff fbf1 	bl	8000998 <HAL_GetTick>
 80011b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011b8:	e008      	b.n	80011cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011ba:	f7ff fbed 	bl	8000998 <HAL_GetTick>
 80011be:	4602      	mov	r2, r0
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	2b64      	cmp	r3, #100	@ 0x64
 80011c6:	d901      	bls.n	80011cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80011c8:	2303      	movs	r3, #3
 80011ca:	e103      	b.n	80013d4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011cc:	4b75      	ldr	r3, [pc, #468]	@ (80013a4 <HAL_RCC_OscConfig+0x4c8>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d0f0      	beq.n	80011ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d106      	bne.n	80011ee <HAL_RCC_OscConfig+0x312>
 80011e0:	4b6f      	ldr	r3, [pc, #444]	@ (80013a0 <HAL_RCC_OscConfig+0x4c4>)
 80011e2:	6a1b      	ldr	r3, [r3, #32]
 80011e4:	4a6e      	ldr	r2, [pc, #440]	@ (80013a0 <HAL_RCC_OscConfig+0x4c4>)
 80011e6:	f043 0301 	orr.w	r3, r3, #1
 80011ea:	6213      	str	r3, [r2, #32]
 80011ec:	e02d      	b.n	800124a <HAL_RCC_OscConfig+0x36e>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	68db      	ldr	r3, [r3, #12]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d10c      	bne.n	8001210 <HAL_RCC_OscConfig+0x334>
 80011f6:	4b6a      	ldr	r3, [pc, #424]	@ (80013a0 <HAL_RCC_OscConfig+0x4c4>)
 80011f8:	6a1b      	ldr	r3, [r3, #32]
 80011fa:	4a69      	ldr	r2, [pc, #420]	@ (80013a0 <HAL_RCC_OscConfig+0x4c4>)
 80011fc:	f023 0301 	bic.w	r3, r3, #1
 8001200:	6213      	str	r3, [r2, #32]
 8001202:	4b67      	ldr	r3, [pc, #412]	@ (80013a0 <HAL_RCC_OscConfig+0x4c4>)
 8001204:	6a1b      	ldr	r3, [r3, #32]
 8001206:	4a66      	ldr	r2, [pc, #408]	@ (80013a0 <HAL_RCC_OscConfig+0x4c4>)
 8001208:	f023 0304 	bic.w	r3, r3, #4
 800120c:	6213      	str	r3, [r2, #32]
 800120e:	e01c      	b.n	800124a <HAL_RCC_OscConfig+0x36e>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	2b05      	cmp	r3, #5
 8001216:	d10c      	bne.n	8001232 <HAL_RCC_OscConfig+0x356>
 8001218:	4b61      	ldr	r3, [pc, #388]	@ (80013a0 <HAL_RCC_OscConfig+0x4c4>)
 800121a:	6a1b      	ldr	r3, [r3, #32]
 800121c:	4a60      	ldr	r2, [pc, #384]	@ (80013a0 <HAL_RCC_OscConfig+0x4c4>)
 800121e:	f043 0304 	orr.w	r3, r3, #4
 8001222:	6213      	str	r3, [r2, #32]
 8001224:	4b5e      	ldr	r3, [pc, #376]	@ (80013a0 <HAL_RCC_OscConfig+0x4c4>)
 8001226:	6a1b      	ldr	r3, [r3, #32]
 8001228:	4a5d      	ldr	r2, [pc, #372]	@ (80013a0 <HAL_RCC_OscConfig+0x4c4>)
 800122a:	f043 0301 	orr.w	r3, r3, #1
 800122e:	6213      	str	r3, [r2, #32]
 8001230:	e00b      	b.n	800124a <HAL_RCC_OscConfig+0x36e>
 8001232:	4b5b      	ldr	r3, [pc, #364]	@ (80013a0 <HAL_RCC_OscConfig+0x4c4>)
 8001234:	6a1b      	ldr	r3, [r3, #32]
 8001236:	4a5a      	ldr	r2, [pc, #360]	@ (80013a0 <HAL_RCC_OscConfig+0x4c4>)
 8001238:	f023 0301 	bic.w	r3, r3, #1
 800123c:	6213      	str	r3, [r2, #32]
 800123e:	4b58      	ldr	r3, [pc, #352]	@ (80013a0 <HAL_RCC_OscConfig+0x4c4>)
 8001240:	6a1b      	ldr	r3, [r3, #32]
 8001242:	4a57      	ldr	r2, [pc, #348]	@ (80013a0 <HAL_RCC_OscConfig+0x4c4>)
 8001244:	f023 0304 	bic.w	r3, r3, #4
 8001248:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	68db      	ldr	r3, [r3, #12]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d015      	beq.n	800127e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001252:	f7ff fba1 	bl	8000998 <HAL_GetTick>
 8001256:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001258:	e00a      	b.n	8001270 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800125a:	f7ff fb9d 	bl	8000998 <HAL_GetTick>
 800125e:	4602      	mov	r2, r0
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	1ad3      	subs	r3, r2, r3
 8001264:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001268:	4293      	cmp	r3, r2
 800126a:	d901      	bls.n	8001270 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800126c:	2303      	movs	r3, #3
 800126e:	e0b1      	b.n	80013d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001270:	4b4b      	ldr	r3, [pc, #300]	@ (80013a0 <HAL_RCC_OscConfig+0x4c4>)
 8001272:	6a1b      	ldr	r3, [r3, #32]
 8001274:	f003 0302 	and.w	r3, r3, #2
 8001278:	2b00      	cmp	r3, #0
 800127a:	d0ee      	beq.n	800125a <HAL_RCC_OscConfig+0x37e>
 800127c:	e014      	b.n	80012a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800127e:	f7ff fb8b 	bl	8000998 <HAL_GetTick>
 8001282:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001284:	e00a      	b.n	800129c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001286:	f7ff fb87 	bl	8000998 <HAL_GetTick>
 800128a:	4602      	mov	r2, r0
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001294:	4293      	cmp	r3, r2
 8001296:	d901      	bls.n	800129c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001298:	2303      	movs	r3, #3
 800129a:	e09b      	b.n	80013d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800129c:	4b40      	ldr	r3, [pc, #256]	@ (80013a0 <HAL_RCC_OscConfig+0x4c4>)
 800129e:	6a1b      	ldr	r3, [r3, #32]
 80012a0:	f003 0302 	and.w	r3, r3, #2
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d1ee      	bne.n	8001286 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80012a8:	7dfb      	ldrb	r3, [r7, #23]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d105      	bne.n	80012ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012ae:	4b3c      	ldr	r3, [pc, #240]	@ (80013a0 <HAL_RCC_OscConfig+0x4c4>)
 80012b0:	69db      	ldr	r3, [r3, #28]
 80012b2:	4a3b      	ldr	r2, [pc, #236]	@ (80013a0 <HAL_RCC_OscConfig+0x4c4>)
 80012b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80012b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	69db      	ldr	r3, [r3, #28]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	f000 8087 	beq.w	80013d2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012c4:	4b36      	ldr	r3, [pc, #216]	@ (80013a0 <HAL_RCC_OscConfig+0x4c4>)
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f003 030c 	and.w	r3, r3, #12
 80012cc:	2b08      	cmp	r3, #8
 80012ce:	d061      	beq.n	8001394 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	69db      	ldr	r3, [r3, #28]
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d146      	bne.n	8001366 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012d8:	4b33      	ldr	r3, [pc, #204]	@ (80013a8 <HAL_RCC_OscConfig+0x4cc>)
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012de:	f7ff fb5b 	bl	8000998 <HAL_GetTick>
 80012e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012e4:	e008      	b.n	80012f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012e6:	f7ff fb57 	bl	8000998 <HAL_GetTick>
 80012ea:	4602      	mov	r2, r0
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d901      	bls.n	80012f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80012f4:	2303      	movs	r3, #3
 80012f6:	e06d      	b.n	80013d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012f8:	4b29      	ldr	r3, [pc, #164]	@ (80013a0 <HAL_RCC_OscConfig+0x4c4>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001300:	2b00      	cmp	r3, #0
 8001302:	d1f0      	bne.n	80012e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6a1b      	ldr	r3, [r3, #32]
 8001308:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800130c:	d108      	bne.n	8001320 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800130e:	4b24      	ldr	r3, [pc, #144]	@ (80013a0 <HAL_RCC_OscConfig+0x4c4>)
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	4921      	ldr	r1, [pc, #132]	@ (80013a0 <HAL_RCC_OscConfig+0x4c4>)
 800131c:	4313      	orrs	r3, r2
 800131e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001320:	4b1f      	ldr	r3, [pc, #124]	@ (80013a0 <HAL_RCC_OscConfig+0x4c4>)
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6a19      	ldr	r1, [r3, #32]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001330:	430b      	orrs	r3, r1
 8001332:	491b      	ldr	r1, [pc, #108]	@ (80013a0 <HAL_RCC_OscConfig+0x4c4>)
 8001334:	4313      	orrs	r3, r2
 8001336:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001338:	4b1b      	ldr	r3, [pc, #108]	@ (80013a8 <HAL_RCC_OscConfig+0x4cc>)
 800133a:	2201      	movs	r2, #1
 800133c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800133e:	f7ff fb2b 	bl	8000998 <HAL_GetTick>
 8001342:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001344:	e008      	b.n	8001358 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001346:	f7ff fb27 	bl	8000998 <HAL_GetTick>
 800134a:	4602      	mov	r2, r0
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	2b02      	cmp	r3, #2
 8001352:	d901      	bls.n	8001358 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001354:	2303      	movs	r3, #3
 8001356:	e03d      	b.n	80013d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001358:	4b11      	ldr	r3, [pc, #68]	@ (80013a0 <HAL_RCC_OscConfig+0x4c4>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001360:	2b00      	cmp	r3, #0
 8001362:	d0f0      	beq.n	8001346 <HAL_RCC_OscConfig+0x46a>
 8001364:	e035      	b.n	80013d2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001366:	4b10      	ldr	r3, [pc, #64]	@ (80013a8 <HAL_RCC_OscConfig+0x4cc>)
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800136c:	f7ff fb14 	bl	8000998 <HAL_GetTick>
 8001370:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001372:	e008      	b.n	8001386 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001374:	f7ff fb10 	bl	8000998 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	2b02      	cmp	r3, #2
 8001380:	d901      	bls.n	8001386 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001382:	2303      	movs	r3, #3
 8001384:	e026      	b.n	80013d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001386:	4b06      	ldr	r3, [pc, #24]	@ (80013a0 <HAL_RCC_OscConfig+0x4c4>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d1f0      	bne.n	8001374 <HAL_RCC_OscConfig+0x498>
 8001392:	e01e      	b.n	80013d2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	69db      	ldr	r3, [r3, #28]
 8001398:	2b01      	cmp	r3, #1
 800139a:	d107      	bne.n	80013ac <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e019      	b.n	80013d4 <HAL_RCC_OscConfig+0x4f8>
 80013a0:	40021000 	.word	0x40021000
 80013a4:	40007000 	.word	0x40007000
 80013a8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80013ac:	4b0b      	ldr	r3, [pc, #44]	@ (80013dc <HAL_RCC_OscConfig+0x500>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6a1b      	ldr	r3, [r3, #32]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d106      	bne.n	80013ce <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d001      	beq.n	80013d2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e000      	b.n	80013d4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80013d2:	2300      	movs	r3, #0
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3718      	adds	r7, #24
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	40021000 	.word	0x40021000

080013e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d101      	bne.n	80013f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e0d0      	b.n	8001596 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013f4:	4b6a      	ldr	r3, [pc, #424]	@ (80015a0 <HAL_RCC_ClockConfig+0x1c0>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 0307 	and.w	r3, r3, #7
 80013fc:	683a      	ldr	r2, [r7, #0]
 80013fe:	429a      	cmp	r2, r3
 8001400:	d910      	bls.n	8001424 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001402:	4b67      	ldr	r3, [pc, #412]	@ (80015a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f023 0207 	bic.w	r2, r3, #7
 800140a:	4965      	ldr	r1, [pc, #404]	@ (80015a0 <HAL_RCC_ClockConfig+0x1c0>)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	4313      	orrs	r3, r2
 8001410:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001412:	4b63      	ldr	r3, [pc, #396]	@ (80015a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0307 	and.w	r3, r3, #7
 800141a:	683a      	ldr	r2, [r7, #0]
 800141c:	429a      	cmp	r2, r3
 800141e:	d001      	beq.n	8001424 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	e0b8      	b.n	8001596 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 0302 	and.w	r3, r3, #2
 800142c:	2b00      	cmp	r3, #0
 800142e:	d020      	beq.n	8001472 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0304 	and.w	r3, r3, #4
 8001438:	2b00      	cmp	r3, #0
 800143a:	d005      	beq.n	8001448 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800143c:	4b59      	ldr	r3, [pc, #356]	@ (80015a4 <HAL_RCC_ClockConfig+0x1c4>)
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	4a58      	ldr	r2, [pc, #352]	@ (80015a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001442:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001446:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0308 	and.w	r3, r3, #8
 8001450:	2b00      	cmp	r3, #0
 8001452:	d005      	beq.n	8001460 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001454:	4b53      	ldr	r3, [pc, #332]	@ (80015a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	4a52      	ldr	r2, [pc, #328]	@ (80015a4 <HAL_RCC_ClockConfig+0x1c4>)
 800145a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800145e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001460:	4b50      	ldr	r3, [pc, #320]	@ (80015a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	494d      	ldr	r1, [pc, #308]	@ (80015a4 <HAL_RCC_ClockConfig+0x1c4>)
 800146e:	4313      	orrs	r3, r2
 8001470:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	2b00      	cmp	r3, #0
 800147c:	d040      	beq.n	8001500 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d107      	bne.n	8001496 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001486:	4b47      	ldr	r3, [pc, #284]	@ (80015a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d115      	bne.n	80014be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e07f      	b.n	8001596 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	2b02      	cmp	r3, #2
 800149c:	d107      	bne.n	80014ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800149e:	4b41      	ldr	r3, [pc, #260]	@ (80015a4 <HAL_RCC_ClockConfig+0x1c4>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d109      	bne.n	80014be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e073      	b.n	8001596 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ae:	4b3d      	ldr	r3, [pc, #244]	@ (80015a4 <HAL_RCC_ClockConfig+0x1c4>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d101      	bne.n	80014be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e06b      	b.n	8001596 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014be:	4b39      	ldr	r3, [pc, #228]	@ (80015a4 <HAL_RCC_ClockConfig+0x1c4>)
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f023 0203 	bic.w	r2, r3, #3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	4936      	ldr	r1, [pc, #216]	@ (80015a4 <HAL_RCC_ClockConfig+0x1c4>)
 80014cc:	4313      	orrs	r3, r2
 80014ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014d0:	f7ff fa62 	bl	8000998 <HAL_GetTick>
 80014d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014d6:	e00a      	b.n	80014ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014d8:	f7ff fa5e 	bl	8000998 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e053      	b.n	8001596 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014ee:	4b2d      	ldr	r3, [pc, #180]	@ (80015a4 <HAL_RCC_ClockConfig+0x1c4>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f003 020c 	and.w	r2, r3, #12
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d1eb      	bne.n	80014d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001500:	4b27      	ldr	r3, [pc, #156]	@ (80015a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0307 	and.w	r3, r3, #7
 8001508:	683a      	ldr	r2, [r7, #0]
 800150a:	429a      	cmp	r2, r3
 800150c:	d210      	bcs.n	8001530 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800150e:	4b24      	ldr	r3, [pc, #144]	@ (80015a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f023 0207 	bic.w	r2, r3, #7
 8001516:	4922      	ldr	r1, [pc, #136]	@ (80015a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	4313      	orrs	r3, r2
 800151c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800151e:	4b20      	ldr	r3, [pc, #128]	@ (80015a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0307 	and.w	r3, r3, #7
 8001526:	683a      	ldr	r2, [r7, #0]
 8001528:	429a      	cmp	r2, r3
 800152a:	d001      	beq.n	8001530 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e032      	b.n	8001596 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0304 	and.w	r3, r3, #4
 8001538:	2b00      	cmp	r3, #0
 800153a:	d008      	beq.n	800154e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800153c:	4b19      	ldr	r3, [pc, #100]	@ (80015a4 <HAL_RCC_ClockConfig+0x1c4>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	4916      	ldr	r1, [pc, #88]	@ (80015a4 <HAL_RCC_ClockConfig+0x1c4>)
 800154a:	4313      	orrs	r3, r2
 800154c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0308 	and.w	r3, r3, #8
 8001556:	2b00      	cmp	r3, #0
 8001558:	d009      	beq.n	800156e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800155a:	4b12      	ldr	r3, [pc, #72]	@ (80015a4 <HAL_RCC_ClockConfig+0x1c4>)
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	691b      	ldr	r3, [r3, #16]
 8001566:	00db      	lsls	r3, r3, #3
 8001568:	490e      	ldr	r1, [pc, #56]	@ (80015a4 <HAL_RCC_ClockConfig+0x1c4>)
 800156a:	4313      	orrs	r3, r2
 800156c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800156e:	f000 f821 	bl	80015b4 <HAL_RCC_GetSysClockFreq>
 8001572:	4602      	mov	r2, r0
 8001574:	4b0b      	ldr	r3, [pc, #44]	@ (80015a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	091b      	lsrs	r3, r3, #4
 800157a:	f003 030f 	and.w	r3, r3, #15
 800157e:	490a      	ldr	r1, [pc, #40]	@ (80015a8 <HAL_RCC_ClockConfig+0x1c8>)
 8001580:	5ccb      	ldrb	r3, [r1, r3]
 8001582:	fa22 f303 	lsr.w	r3, r2, r3
 8001586:	4a09      	ldr	r2, [pc, #36]	@ (80015ac <HAL_RCC_ClockConfig+0x1cc>)
 8001588:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800158a:	4b09      	ldr	r3, [pc, #36]	@ (80015b0 <HAL_RCC_ClockConfig+0x1d0>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff f9c0 	bl	8000914 <HAL_InitTick>

  return HAL_OK;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40022000 	.word	0x40022000
 80015a4:	40021000 	.word	0x40021000
 80015a8:	080022cc 	.word	0x080022cc
 80015ac:	20000008 	.word	0x20000008
 80015b0:	2000000c 	.word	0x2000000c

080015b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b087      	sub	sp, #28
 80015b8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80015ba:	2300      	movs	r3, #0
 80015bc:	60fb      	str	r3, [r7, #12]
 80015be:	2300      	movs	r3, #0
 80015c0:	60bb      	str	r3, [r7, #8]
 80015c2:	2300      	movs	r3, #0
 80015c4:	617b      	str	r3, [r7, #20]
 80015c6:	2300      	movs	r3, #0
 80015c8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80015ca:	2300      	movs	r3, #0
 80015cc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80015ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001648 <HAL_RCC_GetSysClockFreq+0x94>)
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	f003 030c 	and.w	r3, r3, #12
 80015da:	2b04      	cmp	r3, #4
 80015dc:	d002      	beq.n	80015e4 <HAL_RCC_GetSysClockFreq+0x30>
 80015de:	2b08      	cmp	r3, #8
 80015e0:	d003      	beq.n	80015ea <HAL_RCC_GetSysClockFreq+0x36>
 80015e2:	e027      	b.n	8001634 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80015e4:	4b19      	ldr	r3, [pc, #100]	@ (800164c <HAL_RCC_GetSysClockFreq+0x98>)
 80015e6:	613b      	str	r3, [r7, #16]
      break;
 80015e8:	e027      	b.n	800163a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	0c9b      	lsrs	r3, r3, #18
 80015ee:	f003 030f 	and.w	r3, r3, #15
 80015f2:	4a17      	ldr	r2, [pc, #92]	@ (8001650 <HAL_RCC_GetSysClockFreq+0x9c>)
 80015f4:	5cd3      	ldrb	r3, [r2, r3]
 80015f6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d010      	beq.n	8001624 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001602:	4b11      	ldr	r3, [pc, #68]	@ (8001648 <HAL_RCC_GetSysClockFreq+0x94>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	0c5b      	lsrs	r3, r3, #17
 8001608:	f003 0301 	and.w	r3, r3, #1
 800160c:	4a11      	ldr	r2, [pc, #68]	@ (8001654 <HAL_RCC_GetSysClockFreq+0xa0>)
 800160e:	5cd3      	ldrb	r3, [r2, r3]
 8001610:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a0d      	ldr	r2, [pc, #52]	@ (800164c <HAL_RCC_GetSysClockFreq+0x98>)
 8001616:	fb03 f202 	mul.w	r2, r3, r2
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001620:	617b      	str	r3, [r7, #20]
 8001622:	e004      	b.n	800162e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4a0c      	ldr	r2, [pc, #48]	@ (8001658 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001628:	fb02 f303 	mul.w	r3, r2, r3
 800162c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	613b      	str	r3, [r7, #16]
      break;
 8001632:	e002      	b.n	800163a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001634:	4b05      	ldr	r3, [pc, #20]	@ (800164c <HAL_RCC_GetSysClockFreq+0x98>)
 8001636:	613b      	str	r3, [r7, #16]
      break;
 8001638:	bf00      	nop
    }
  }
  return sysclockfreq;
 800163a:	693b      	ldr	r3, [r7, #16]
}
 800163c:	4618      	mov	r0, r3
 800163e:	371c      	adds	r7, #28
 8001640:	46bd      	mov	sp, r7
 8001642:	bc80      	pop	{r7}
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	40021000 	.word	0x40021000
 800164c:	007a1200 	.word	0x007a1200
 8001650:	080022dc 	.word	0x080022dc
 8001654:	080022ec 	.word	0x080022ec
 8001658:	003d0900 	.word	0x003d0900

0800165c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001664:	4b0a      	ldr	r3, [pc, #40]	@ (8001690 <RCC_Delay+0x34>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a0a      	ldr	r2, [pc, #40]	@ (8001694 <RCC_Delay+0x38>)
 800166a:	fba2 2303 	umull	r2, r3, r2, r3
 800166e:	0a5b      	lsrs	r3, r3, #9
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	fb02 f303 	mul.w	r3, r2, r3
 8001676:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001678:	bf00      	nop
  }
  while (Delay --);
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	1e5a      	subs	r2, r3, #1
 800167e:	60fa      	str	r2, [r7, #12]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d1f9      	bne.n	8001678 <RCC_Delay+0x1c>
}
 8001684:	bf00      	nop
 8001686:	bf00      	nop
 8001688:	3714      	adds	r7, #20
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr
 8001690:	20000008 	.word	0x20000008
 8001694:	10624dd3 	.word	0x10624dd3

08001698 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d101      	bne.n	80016aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e041      	b.n	800172e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d106      	bne.n	80016c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2200      	movs	r2, #0
 80016ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7ff f86e 	bl	80007a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2202      	movs	r2, #2
 80016c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	3304      	adds	r3, #4
 80016d4:	4619      	mov	r1, r3
 80016d6:	4610      	mov	r0, r2
 80016d8:	f000 fab2 	bl	8001c40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2201      	movs	r2, #1
 80016e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2201      	movs	r2, #1
 80016e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2201      	movs	r2, #1
 80016f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2201      	movs	r2, #1
 80016f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2201      	movs	r2, #1
 8001700:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2201      	movs	r2, #1
 8001708:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2201      	movs	r2, #1
 8001710:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2201      	movs	r2, #1
 8001718:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2201      	movs	r2, #1
 8001720:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2201      	movs	r2, #1
 8001728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	b082      	sub	sp, #8
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d101      	bne.n	8001748 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e041      	b.n	80017cc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800174e:	b2db      	uxtb	r3, r3
 8001750:	2b00      	cmp	r3, #0
 8001752:	d106      	bne.n	8001762 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2200      	movs	r2, #0
 8001758:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f000 f839 	bl	80017d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2202      	movs	r2, #2
 8001766:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	3304      	adds	r3, #4
 8001772:	4619      	mov	r1, r3
 8001774:	4610      	mov	r0, r2
 8001776:	f000 fa63 	bl	8001c40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2201      	movs	r2, #1
 800177e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2201      	movs	r2, #1
 8001786:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2201      	movs	r2, #1
 800178e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2201      	movs	r2, #1
 8001796:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2201      	movs	r2, #1
 800179e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2201      	movs	r2, #1
 80017a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2201      	movs	r2, #1
 80017ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2201      	movs	r2, #1
 80017b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2201      	movs	r2, #1
 80017be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2201      	movs	r2, #1
 80017c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80017ca:	2300      	movs	r3, #0
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80017dc:	bf00      	nop
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bc80      	pop	{r7}
 80017e4:	4770      	bx	lr
	...

080017e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d109      	bne.n	800180c <HAL_TIM_PWM_Start+0x24>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	2b01      	cmp	r3, #1
 8001802:	bf14      	ite	ne
 8001804:	2301      	movne	r3, #1
 8001806:	2300      	moveq	r3, #0
 8001808:	b2db      	uxtb	r3, r3
 800180a:	e022      	b.n	8001852 <HAL_TIM_PWM_Start+0x6a>
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	2b04      	cmp	r3, #4
 8001810:	d109      	bne.n	8001826 <HAL_TIM_PWM_Start+0x3e>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001818:	b2db      	uxtb	r3, r3
 800181a:	2b01      	cmp	r3, #1
 800181c:	bf14      	ite	ne
 800181e:	2301      	movne	r3, #1
 8001820:	2300      	moveq	r3, #0
 8001822:	b2db      	uxtb	r3, r3
 8001824:	e015      	b.n	8001852 <HAL_TIM_PWM_Start+0x6a>
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	2b08      	cmp	r3, #8
 800182a:	d109      	bne.n	8001840 <HAL_TIM_PWM_Start+0x58>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001832:	b2db      	uxtb	r3, r3
 8001834:	2b01      	cmp	r3, #1
 8001836:	bf14      	ite	ne
 8001838:	2301      	movne	r3, #1
 800183a:	2300      	moveq	r3, #0
 800183c:	b2db      	uxtb	r3, r3
 800183e:	e008      	b.n	8001852 <HAL_TIM_PWM_Start+0x6a>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001846:	b2db      	uxtb	r3, r3
 8001848:	2b01      	cmp	r3, #1
 800184a:	bf14      	ite	ne
 800184c:	2301      	movne	r3, #1
 800184e:	2300      	moveq	r3, #0
 8001850:	b2db      	uxtb	r3, r3
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e05e      	b.n	8001918 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d104      	bne.n	800186a <HAL_TIM_PWM_Start+0x82>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2202      	movs	r2, #2
 8001864:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001868:	e013      	b.n	8001892 <HAL_TIM_PWM_Start+0xaa>
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	2b04      	cmp	r3, #4
 800186e:	d104      	bne.n	800187a <HAL_TIM_PWM_Start+0x92>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2202      	movs	r2, #2
 8001874:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001878:	e00b      	b.n	8001892 <HAL_TIM_PWM_Start+0xaa>
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	2b08      	cmp	r3, #8
 800187e:	d104      	bne.n	800188a <HAL_TIM_PWM_Start+0xa2>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2202      	movs	r2, #2
 8001884:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001888:	e003      	b.n	8001892 <HAL_TIM_PWM_Start+0xaa>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2202      	movs	r2, #2
 800188e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2201      	movs	r2, #1
 8001898:	6839      	ldr	r1, [r7, #0]
 800189a:	4618      	mov	r0, r3
 800189c:	f000 fc5c 	bl	8002158 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a1e      	ldr	r2, [pc, #120]	@ (8001920 <HAL_TIM_PWM_Start+0x138>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d107      	bne.n	80018ba <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80018b8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a18      	ldr	r2, [pc, #96]	@ (8001920 <HAL_TIM_PWM_Start+0x138>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d00e      	beq.n	80018e2 <HAL_TIM_PWM_Start+0xfa>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018cc:	d009      	beq.n	80018e2 <HAL_TIM_PWM_Start+0xfa>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a14      	ldr	r2, [pc, #80]	@ (8001924 <HAL_TIM_PWM_Start+0x13c>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d004      	beq.n	80018e2 <HAL_TIM_PWM_Start+0xfa>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a12      	ldr	r2, [pc, #72]	@ (8001928 <HAL_TIM_PWM_Start+0x140>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d111      	bne.n	8001906 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	f003 0307 	and.w	r3, r3, #7
 80018ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	2b06      	cmp	r3, #6
 80018f2:	d010      	beq.n	8001916 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f042 0201 	orr.w	r2, r2, #1
 8001902:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001904:	e007      	b.n	8001916 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f042 0201 	orr.w	r2, r2, #1
 8001914:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001916:	2300      	movs	r3, #0
}
 8001918:	4618      	mov	r0, r3
 800191a:	3710      	adds	r7, #16
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	40012c00 	.word	0x40012c00
 8001924:	40000400 	.word	0x40000400
 8001928:	40000800 	.word	0x40000800

0800192c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b086      	sub	sp, #24
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001938:	2300      	movs	r3, #0
 800193a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001942:	2b01      	cmp	r3, #1
 8001944:	d101      	bne.n	800194a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001946:	2302      	movs	r3, #2
 8001948:	e0ae      	b.n	8001aa8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	2201      	movs	r2, #1
 800194e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2b0c      	cmp	r3, #12
 8001956:	f200 809f 	bhi.w	8001a98 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800195a:	a201      	add	r2, pc, #4	@ (adr r2, 8001960 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800195c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001960:	08001995 	.word	0x08001995
 8001964:	08001a99 	.word	0x08001a99
 8001968:	08001a99 	.word	0x08001a99
 800196c:	08001a99 	.word	0x08001a99
 8001970:	080019d5 	.word	0x080019d5
 8001974:	08001a99 	.word	0x08001a99
 8001978:	08001a99 	.word	0x08001a99
 800197c:	08001a99 	.word	0x08001a99
 8001980:	08001a17 	.word	0x08001a17
 8001984:	08001a99 	.word	0x08001a99
 8001988:	08001a99 	.word	0x08001a99
 800198c:	08001a99 	.word	0x08001a99
 8001990:	08001a57 	.word	0x08001a57
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	68b9      	ldr	r1, [r7, #8]
 800199a:	4618      	mov	r0, r3
 800199c:	f000 f9be 	bl	8001d1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	699a      	ldr	r2, [r3, #24]
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f042 0208 	orr.w	r2, r2, #8
 80019ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	699a      	ldr	r2, [r3, #24]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f022 0204 	bic.w	r2, r2, #4
 80019be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	6999      	ldr	r1, [r3, #24]
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	691a      	ldr	r2, [r3, #16]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	430a      	orrs	r2, r1
 80019d0:	619a      	str	r2, [r3, #24]
      break;
 80019d2:	e064      	b.n	8001a9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	68b9      	ldr	r1, [r7, #8]
 80019da:	4618      	mov	r0, r3
 80019dc:	f000 fa04 	bl	8001de8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	699a      	ldr	r2, [r3, #24]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80019ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	699a      	ldr	r2, [r3, #24]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80019fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	6999      	ldr	r1, [r3, #24]
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	691b      	ldr	r3, [r3, #16]
 8001a0a:	021a      	lsls	r2, r3, #8
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	430a      	orrs	r2, r1
 8001a12:	619a      	str	r2, [r3, #24]
      break;
 8001a14:	e043      	b.n	8001a9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	68b9      	ldr	r1, [r7, #8]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f000 fa4d 	bl	8001ebc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	69da      	ldr	r2, [r3, #28]
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f042 0208 	orr.w	r2, r2, #8
 8001a30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	69da      	ldr	r2, [r3, #28]
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f022 0204 	bic.w	r2, r2, #4
 8001a40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	69d9      	ldr	r1, [r3, #28]
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	691a      	ldr	r2, [r3, #16]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	430a      	orrs	r2, r1
 8001a52:	61da      	str	r2, [r3, #28]
      break;
 8001a54:	e023      	b.n	8001a9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	68b9      	ldr	r1, [r7, #8]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f000 fa97 	bl	8001f90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	69da      	ldr	r2, [r3, #28]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001a70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	69da      	ldr	r2, [r3, #28]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	69d9      	ldr	r1, [r3, #28]
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	691b      	ldr	r3, [r3, #16]
 8001a8c:	021a      	lsls	r2, r3, #8
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	430a      	orrs	r2, r1
 8001a94:	61da      	str	r2, [r3, #28]
      break;
 8001a96:	e002      	b.n	8001a9e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	75fb      	strb	r3, [r7, #23]
      break;
 8001a9c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001aa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3718      	adds	r7, #24
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001aba:	2300      	movs	r3, #0
 8001abc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d101      	bne.n	8001acc <HAL_TIM_ConfigClockSource+0x1c>
 8001ac8:	2302      	movs	r3, #2
 8001aca:	e0b4      	b.n	8001c36 <HAL_TIM_ConfigClockSource+0x186>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2202      	movs	r2, #2
 8001ad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001aea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001af2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	68ba      	ldr	r2, [r7, #8]
 8001afa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001b04:	d03e      	beq.n	8001b84 <HAL_TIM_ConfigClockSource+0xd4>
 8001b06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001b0a:	f200 8087 	bhi.w	8001c1c <HAL_TIM_ConfigClockSource+0x16c>
 8001b0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001b12:	f000 8086 	beq.w	8001c22 <HAL_TIM_ConfigClockSource+0x172>
 8001b16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001b1a:	d87f      	bhi.n	8001c1c <HAL_TIM_ConfigClockSource+0x16c>
 8001b1c:	2b70      	cmp	r3, #112	@ 0x70
 8001b1e:	d01a      	beq.n	8001b56 <HAL_TIM_ConfigClockSource+0xa6>
 8001b20:	2b70      	cmp	r3, #112	@ 0x70
 8001b22:	d87b      	bhi.n	8001c1c <HAL_TIM_ConfigClockSource+0x16c>
 8001b24:	2b60      	cmp	r3, #96	@ 0x60
 8001b26:	d050      	beq.n	8001bca <HAL_TIM_ConfigClockSource+0x11a>
 8001b28:	2b60      	cmp	r3, #96	@ 0x60
 8001b2a:	d877      	bhi.n	8001c1c <HAL_TIM_ConfigClockSource+0x16c>
 8001b2c:	2b50      	cmp	r3, #80	@ 0x50
 8001b2e:	d03c      	beq.n	8001baa <HAL_TIM_ConfigClockSource+0xfa>
 8001b30:	2b50      	cmp	r3, #80	@ 0x50
 8001b32:	d873      	bhi.n	8001c1c <HAL_TIM_ConfigClockSource+0x16c>
 8001b34:	2b40      	cmp	r3, #64	@ 0x40
 8001b36:	d058      	beq.n	8001bea <HAL_TIM_ConfigClockSource+0x13a>
 8001b38:	2b40      	cmp	r3, #64	@ 0x40
 8001b3a:	d86f      	bhi.n	8001c1c <HAL_TIM_ConfigClockSource+0x16c>
 8001b3c:	2b30      	cmp	r3, #48	@ 0x30
 8001b3e:	d064      	beq.n	8001c0a <HAL_TIM_ConfigClockSource+0x15a>
 8001b40:	2b30      	cmp	r3, #48	@ 0x30
 8001b42:	d86b      	bhi.n	8001c1c <HAL_TIM_ConfigClockSource+0x16c>
 8001b44:	2b20      	cmp	r3, #32
 8001b46:	d060      	beq.n	8001c0a <HAL_TIM_ConfigClockSource+0x15a>
 8001b48:	2b20      	cmp	r3, #32
 8001b4a:	d867      	bhi.n	8001c1c <HAL_TIM_ConfigClockSource+0x16c>
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d05c      	beq.n	8001c0a <HAL_TIM_ConfigClockSource+0x15a>
 8001b50:	2b10      	cmp	r3, #16
 8001b52:	d05a      	beq.n	8001c0a <HAL_TIM_ConfigClockSource+0x15a>
 8001b54:	e062      	b.n	8001c1c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001b66:	f000 fad8 	bl	800211a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8001b78:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	68ba      	ldr	r2, [r7, #8]
 8001b80:	609a      	str	r2, [r3, #8]
      break;
 8001b82:	e04f      	b.n	8001c24 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001b94:	f000 fac1 	bl	800211a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	689a      	ldr	r2, [r3, #8]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001ba6:	609a      	str	r2, [r3, #8]
      break;
 8001ba8:	e03c      	b.n	8001c24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	f000 fa38 	bl	800202c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2150      	movs	r1, #80	@ 0x50
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f000 fa8f 	bl	80020e6 <TIM_ITRx_SetConfig>
      break;
 8001bc8:	e02c      	b.n	8001c24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	f000 fa56 	bl	8002088 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2160      	movs	r1, #96	@ 0x60
 8001be2:	4618      	mov	r0, r3
 8001be4:	f000 fa7f 	bl	80020e6 <TIM_ITRx_SetConfig>
      break;
 8001be8:	e01c      	b.n	8001c24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	f000 fa18 	bl	800202c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2140      	movs	r1, #64	@ 0x40
 8001c02:	4618      	mov	r0, r3
 8001c04:	f000 fa6f 	bl	80020e6 <TIM_ITRx_SetConfig>
      break;
 8001c08:	e00c      	b.n	8001c24 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4619      	mov	r1, r3
 8001c14:	4610      	mov	r0, r2
 8001c16:	f000 fa66 	bl	80020e6 <TIM_ITRx_SetConfig>
      break;
 8001c1a:	e003      	b.n	8001c24 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	73fb      	strb	r3, [r7, #15]
      break;
 8001c20:	e000      	b.n	8001c24 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001c22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
	...

08001c40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4a2f      	ldr	r2, [pc, #188]	@ (8001d10 <TIM_Base_SetConfig+0xd0>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d00b      	beq.n	8001c70 <TIM_Base_SetConfig+0x30>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c5e:	d007      	beq.n	8001c70 <TIM_Base_SetConfig+0x30>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	4a2c      	ldr	r2, [pc, #176]	@ (8001d14 <TIM_Base_SetConfig+0xd4>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d003      	beq.n	8001c70 <TIM_Base_SetConfig+0x30>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	4a2b      	ldr	r2, [pc, #172]	@ (8001d18 <TIM_Base_SetConfig+0xd8>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d108      	bne.n	8001c82 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001c76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	68fa      	ldr	r2, [r7, #12]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a22      	ldr	r2, [pc, #136]	@ (8001d10 <TIM_Base_SetConfig+0xd0>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d00b      	beq.n	8001ca2 <TIM_Base_SetConfig+0x62>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c90:	d007      	beq.n	8001ca2 <TIM_Base_SetConfig+0x62>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a1f      	ldr	r2, [pc, #124]	@ (8001d14 <TIM_Base_SetConfig+0xd4>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d003      	beq.n	8001ca2 <TIM_Base_SetConfig+0x62>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a1e      	ldr	r2, [pc, #120]	@ (8001d18 <TIM_Base_SetConfig+0xd8>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d108      	bne.n	8001cb4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ca8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	68fa      	ldr	r2, [r7, #12]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	695b      	ldr	r3, [r3, #20]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	68fa      	ldr	r2, [r7, #12]
 8001cc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	689a      	ldr	r2, [r3, #8]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4a0d      	ldr	r2, [pc, #52]	@ (8001d10 <TIM_Base_SetConfig+0xd0>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d103      	bne.n	8001ce8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	691a      	ldr	r2, [r3, #16]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2201      	movs	r2, #1
 8001cec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	691b      	ldr	r3, [r3, #16]
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d005      	beq.n	8001d06 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	691b      	ldr	r3, [r3, #16]
 8001cfe:	f023 0201 	bic.w	r2, r3, #1
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	611a      	str	r2, [r3, #16]
  }
}
 8001d06:	bf00      	nop
 8001d08:	3714      	adds	r7, #20
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bc80      	pop	{r7}
 8001d0e:	4770      	bx	lr
 8001d10:	40012c00 	.word	0x40012c00
 8001d14:	40000400 	.word	0x40000400
 8001d18:	40000800 	.word	0x40000800

08001d1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b087      	sub	sp, #28
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a1b      	ldr	r3, [r3, #32]
 8001d2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6a1b      	ldr	r3, [r3, #32]
 8001d30:	f023 0201 	bic.w	r2, r3, #1
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	699b      	ldr	r3, [r3, #24]
 8001d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f023 0303 	bic.w	r3, r3, #3
 8001d52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	68fa      	ldr	r2, [r7, #12]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	f023 0302 	bic.w	r3, r3, #2
 8001d64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	697a      	ldr	r2, [r7, #20]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	4a1c      	ldr	r2, [pc, #112]	@ (8001de4 <TIM_OC1_SetConfig+0xc8>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d10c      	bne.n	8001d92 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	f023 0308 	bic.w	r3, r3, #8
 8001d7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	697a      	ldr	r2, [r7, #20]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	f023 0304 	bic.w	r3, r3, #4
 8001d90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a13      	ldr	r2, [pc, #76]	@ (8001de4 <TIM_OC1_SetConfig+0xc8>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d111      	bne.n	8001dbe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001da0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001da8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	695b      	ldr	r3, [r3, #20]
 8001dae:	693a      	ldr	r2, [r7, #16]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	693a      	ldr	r2, [r7, #16]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	693a      	ldr	r2, [r7, #16]
 8001dc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685a      	ldr	r2, [r3, #4]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	697a      	ldr	r2, [r7, #20]
 8001dd6:	621a      	str	r2, [r3, #32]
}
 8001dd8:	bf00      	nop
 8001dda:	371c      	adds	r7, #28
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bc80      	pop	{r7}
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	40012c00 	.word	0x40012c00

08001de8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b087      	sub	sp, #28
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a1b      	ldr	r3, [r3, #32]
 8001df6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a1b      	ldr	r3, [r3, #32]
 8001dfc:	f023 0210 	bic.w	r2, r3, #16
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	699b      	ldr	r3, [r3, #24]
 8001e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001e16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	021b      	lsls	r3, r3, #8
 8001e26:	68fa      	ldr	r2, [r7, #12]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	f023 0320 	bic.w	r3, r3, #32
 8001e32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	011b      	lsls	r3, r3, #4
 8001e3a:	697a      	ldr	r2, [r7, #20]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4a1d      	ldr	r2, [pc, #116]	@ (8001eb8 <TIM_OC2_SetConfig+0xd0>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d10d      	bne.n	8001e64 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001e4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	011b      	lsls	r3, r3, #4
 8001e56:	697a      	ldr	r2, [r7, #20]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001e62:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4a14      	ldr	r2, [pc, #80]	@ (8001eb8 <TIM_OC2_SetConfig+0xd0>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d113      	bne.n	8001e94 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001e72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001e7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	695b      	ldr	r3, [r3, #20]
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	699b      	ldr	r3, [r3, #24]
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	68fa      	ldr	r2, [r7, #12]
 8001e9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685a      	ldr	r2, [r3, #4]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	697a      	ldr	r2, [r7, #20]
 8001eac:	621a      	str	r2, [r3, #32]
}
 8001eae:	bf00      	nop
 8001eb0:	371c      	adds	r7, #28
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bc80      	pop	{r7}
 8001eb6:	4770      	bx	lr
 8001eb8:	40012c00 	.word	0x40012c00

08001ebc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b087      	sub	sp, #28
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a1b      	ldr	r3, [r3, #32]
 8001eca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a1b      	ldr	r3, [r3, #32]
 8001ed0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	69db      	ldr	r3, [r3, #28]
 8001ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001eea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f023 0303 	bic.w	r3, r3, #3
 8001ef2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001f04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	021b      	lsls	r3, r3, #8
 8001f0c:	697a      	ldr	r2, [r7, #20]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a1d      	ldr	r2, [pc, #116]	@ (8001f8c <TIM_OC3_SetConfig+0xd0>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d10d      	bne.n	8001f36 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001f20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	021b      	lsls	r3, r3, #8
 8001f28:	697a      	ldr	r2, [r7, #20]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001f34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a14      	ldr	r2, [pc, #80]	@ (8001f8c <TIM_OC3_SetConfig+0xd0>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d113      	bne.n	8001f66 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001f44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001f4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	011b      	lsls	r3, r3, #4
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	011b      	lsls	r3, r3, #4
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	693a      	ldr	r2, [r7, #16]
 8001f6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685a      	ldr	r2, [r3, #4]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	697a      	ldr	r2, [r7, #20]
 8001f7e:	621a      	str	r2, [r3, #32]
}
 8001f80:	bf00      	nop
 8001f82:	371c      	adds	r7, #28
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bc80      	pop	{r7}
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	40012c00 	.word	0x40012c00

08001f90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b087      	sub	sp, #28
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6a1b      	ldr	r3, [r3, #32]
 8001f9e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a1b      	ldr	r3, [r3, #32]
 8001fa4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	69db      	ldr	r3, [r3, #28]
 8001fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001fbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001fc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	021b      	lsls	r3, r3, #8
 8001fce:	68fa      	ldr	r2, [r7, #12]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001fda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	031b      	lsls	r3, r3, #12
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a0f      	ldr	r2, [pc, #60]	@ (8002028 <TIM_OC4_SetConfig+0x98>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d109      	bne.n	8002004 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001ff6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	695b      	ldr	r3, [r3, #20]
 8001ffc:	019b      	lsls	r3, r3, #6
 8001ffe:	697a      	ldr	r2, [r7, #20]
 8002000:	4313      	orrs	r3, r2
 8002002:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	697a      	ldr	r2, [r7, #20]
 8002008:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	68fa      	ldr	r2, [r7, #12]
 800200e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685a      	ldr	r2, [r3, #4]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	621a      	str	r2, [r3, #32]
}
 800201e:	bf00      	nop
 8002020:	371c      	adds	r7, #28
 8002022:	46bd      	mov	sp, r7
 8002024:	bc80      	pop	{r7}
 8002026:	4770      	bx	lr
 8002028:	40012c00 	.word	0x40012c00

0800202c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800202c:	b480      	push	{r7}
 800202e:	b087      	sub	sp, #28
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6a1b      	ldr	r3, [r3, #32]
 800203c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	6a1b      	ldr	r3, [r3, #32]
 8002042:	f023 0201 	bic.w	r2, r3, #1
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002056:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	011b      	lsls	r3, r3, #4
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	4313      	orrs	r3, r2
 8002060:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	f023 030a 	bic.w	r3, r3, #10
 8002068:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800206a:	697a      	ldr	r2, [r7, #20]
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	4313      	orrs	r3, r2
 8002070:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	697a      	ldr	r2, [r7, #20]
 800207c:	621a      	str	r2, [r3, #32]
}
 800207e:	bf00      	nop
 8002080:	371c      	adds	r7, #28
 8002082:	46bd      	mov	sp, r7
 8002084:	bc80      	pop	{r7}
 8002086:	4770      	bx	lr

08002088 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002088:	b480      	push	{r7}
 800208a:	b087      	sub	sp, #28
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	6a1b      	ldr	r3, [r3, #32]
 8002098:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6a1b      	ldr	r3, [r3, #32]
 800209e:	f023 0210 	bic.w	r2, r3, #16
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	699b      	ldr	r3, [r3, #24]
 80020aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80020b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	031b      	lsls	r3, r3, #12
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80020c4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	011b      	lsls	r3, r3, #4
 80020ca:	697a      	ldr	r2, [r7, #20]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	697a      	ldr	r2, [r7, #20]
 80020da:	621a      	str	r2, [r3, #32]
}
 80020dc:	bf00      	nop
 80020de:	371c      	adds	r7, #28
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bc80      	pop	{r7}
 80020e4:	4770      	bx	lr

080020e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80020e6:	b480      	push	{r7}
 80020e8:	b085      	sub	sp, #20
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
 80020ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80020fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80020fe:	683a      	ldr	r2, [r7, #0]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	4313      	orrs	r3, r2
 8002104:	f043 0307 	orr.w	r3, r3, #7
 8002108:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	68fa      	ldr	r2, [r7, #12]
 800210e:	609a      	str	r2, [r3, #8]
}
 8002110:	bf00      	nop
 8002112:	3714      	adds	r7, #20
 8002114:	46bd      	mov	sp, r7
 8002116:	bc80      	pop	{r7}
 8002118:	4770      	bx	lr

0800211a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800211a:	b480      	push	{r7}
 800211c:	b087      	sub	sp, #28
 800211e:	af00      	add	r7, sp, #0
 8002120:	60f8      	str	r0, [r7, #12]
 8002122:	60b9      	str	r1, [r7, #8]
 8002124:	607a      	str	r2, [r7, #4]
 8002126:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002134:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	021a      	lsls	r2, r3, #8
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	431a      	orrs	r2, r3
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	4313      	orrs	r3, r2
 8002142:	697a      	ldr	r2, [r7, #20]
 8002144:	4313      	orrs	r3, r2
 8002146:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	697a      	ldr	r2, [r7, #20]
 800214c:	609a      	str	r2, [r3, #8]
}
 800214e:	bf00      	nop
 8002150:	371c      	adds	r7, #28
 8002152:	46bd      	mov	sp, r7
 8002154:	bc80      	pop	{r7}
 8002156:	4770      	bx	lr

08002158 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002158:	b480      	push	{r7}
 800215a:	b087      	sub	sp, #28
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	f003 031f 	and.w	r3, r3, #31
 800216a:	2201      	movs	r2, #1
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	6a1a      	ldr	r2, [r3, #32]
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	43db      	mvns	r3, r3
 800217a:	401a      	ands	r2, r3
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6a1a      	ldr	r2, [r3, #32]
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	f003 031f 	and.w	r3, r3, #31
 800218a:	6879      	ldr	r1, [r7, #4]
 800218c:	fa01 f303 	lsl.w	r3, r1, r3
 8002190:	431a      	orrs	r2, r3
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	621a      	str	r2, [r3, #32]
}
 8002196:	bf00      	nop
 8002198:	371c      	adds	r7, #28
 800219a:	46bd      	mov	sp, r7
 800219c:	bc80      	pop	{r7}
 800219e:	4770      	bx	lr

080021a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d101      	bne.n	80021b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80021b4:	2302      	movs	r3, #2
 80021b6:	e046      	b.n	8002246 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2202      	movs	r2, #2
 80021c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	68fa      	ldr	r2, [r7, #12]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a16      	ldr	r2, [pc, #88]	@ (8002250 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d00e      	beq.n	800221a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002204:	d009      	beq.n	800221a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a12      	ldr	r2, [pc, #72]	@ (8002254 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d004      	beq.n	800221a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a10      	ldr	r2, [pc, #64]	@ (8002258 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d10c      	bne.n	8002234 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002220:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	68ba      	ldr	r2, [r7, #8]
 8002228:	4313      	orrs	r3, r2
 800222a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	68ba      	ldr	r2, [r7, #8]
 8002232:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3714      	adds	r7, #20
 800224a:	46bd      	mov	sp, r7
 800224c:	bc80      	pop	{r7}
 800224e:	4770      	bx	lr
 8002250:	40012c00 	.word	0x40012c00
 8002254:	40000400 	.word	0x40000400
 8002258:	40000800 	.word	0x40000800

0800225c <memset>:
 800225c:	4603      	mov	r3, r0
 800225e:	4402      	add	r2, r0
 8002260:	4293      	cmp	r3, r2
 8002262:	d100      	bne.n	8002266 <memset+0xa>
 8002264:	4770      	bx	lr
 8002266:	f803 1b01 	strb.w	r1, [r3], #1
 800226a:	e7f9      	b.n	8002260 <memset+0x4>

0800226c <__libc_init_array>:
 800226c:	b570      	push	{r4, r5, r6, lr}
 800226e:	2600      	movs	r6, #0
 8002270:	4d0c      	ldr	r5, [pc, #48]	@ (80022a4 <__libc_init_array+0x38>)
 8002272:	4c0d      	ldr	r4, [pc, #52]	@ (80022a8 <__libc_init_array+0x3c>)
 8002274:	1b64      	subs	r4, r4, r5
 8002276:	10a4      	asrs	r4, r4, #2
 8002278:	42a6      	cmp	r6, r4
 800227a:	d109      	bne.n	8002290 <__libc_init_array+0x24>
 800227c:	f000 f81a 	bl	80022b4 <_init>
 8002280:	2600      	movs	r6, #0
 8002282:	4d0a      	ldr	r5, [pc, #40]	@ (80022ac <__libc_init_array+0x40>)
 8002284:	4c0a      	ldr	r4, [pc, #40]	@ (80022b0 <__libc_init_array+0x44>)
 8002286:	1b64      	subs	r4, r4, r5
 8002288:	10a4      	asrs	r4, r4, #2
 800228a:	42a6      	cmp	r6, r4
 800228c:	d105      	bne.n	800229a <__libc_init_array+0x2e>
 800228e:	bd70      	pop	{r4, r5, r6, pc}
 8002290:	f855 3b04 	ldr.w	r3, [r5], #4
 8002294:	4798      	blx	r3
 8002296:	3601      	adds	r6, #1
 8002298:	e7ee      	b.n	8002278 <__libc_init_array+0xc>
 800229a:	f855 3b04 	ldr.w	r3, [r5], #4
 800229e:	4798      	blx	r3
 80022a0:	3601      	adds	r6, #1
 80022a2:	e7f2      	b.n	800228a <__libc_init_array+0x1e>
 80022a4:	080022f0 	.word	0x080022f0
 80022a8:	080022f0 	.word	0x080022f0
 80022ac:	080022f0 	.word	0x080022f0
 80022b0:	080022f4 	.word	0x080022f4

080022b4 <_init>:
 80022b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022b6:	bf00      	nop
 80022b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022ba:	bc08      	pop	{r3}
 80022bc:	469e      	mov	lr, r3
 80022be:	4770      	bx	lr

080022c0 <_fini>:
 80022c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022c2:	bf00      	nop
 80022c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022c6:	bc08      	pop	{r3}
 80022c8:	469e      	mov	lr, r3
 80022ca:	4770      	bx	lr
