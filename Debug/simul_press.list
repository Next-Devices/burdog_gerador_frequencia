
simul_press.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033d4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08003494  08003494  00004494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003568  08003568  0000502c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003568  08003568  0000502c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003568  08003568  0000502c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003568  08003568  00004568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800356c  0800356c  0000456c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000002c  20000000  08003570  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  2000002c  0800359c  0000502c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000164  0800359c  00005164  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000502c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ea39  00000000  00000000  00005054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d44  00000000  00000000  00013a8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d00  00000000  00000000  000157d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a44  00000000  00000000  000164d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000142b4  00000000  00000000  00016f1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fd2c  00000000  00000000  0002b1d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080308  00000000  00000000  0003aefc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bb204  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f38  00000000  00000000  000bb248  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000be180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000002c 	.word	0x2000002c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800347c 	.word	0x0800347c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000030 	.word	0x20000030
 8000104:	0800347c 	.word	0x0800347c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fe67 	bl	8000ef8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f97f 	bl	800052c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 fa45 	bl	80006bc <MX_GPIO_Init>
  MX_TIM3_Init();
 8000232:	f000 f9c3 	bl	80005bc <MX_TIM3_Init>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000236:	4bac      	ldr	r3, [pc, #688]	@ (80004e8 <main+0x2c8>)
 8000238:	2104      	movs	r1, #4
 800023a:	0018      	movs	r0, r3
 800023c:	f001 fe04 	bl	8001e48 <HAL_TIM_PWM_Start>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000240:	2000      	movs	r0, #0
 8000242:	f000 fc81 	bl	8000b48 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000246:	2101      	movs	r1, #1
 8000248:	2000      	movs	r0, #0
 800024a:	f000 fce7 	bl	8000c1c <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 800024e:	4ba7      	ldr	r3, [pc, #668]	@ (80004ec <main+0x2cc>)
 8000250:	22e1      	movs	r2, #225	@ 0xe1
 8000252:	0252      	lsls	r2, r2, #9
 8000254:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000256:	4ba5      	ldr	r3, [pc, #660]	@ (80004ec <main+0x2cc>)
 8000258:	2200      	movs	r2, #0
 800025a:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 800025c:	4ba3      	ldr	r3, [pc, #652]	@ (80004ec <main+0x2cc>)
 800025e:	2200      	movs	r2, #0
 8000260:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000262:	4ba2      	ldr	r3, [pc, #648]	@ (80004ec <main+0x2cc>)
 8000264:	2200      	movs	r2, #0
 8000266:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000268:	4ba0      	ldr	r3, [pc, #640]	@ (80004ec <main+0x2cc>)
 800026a:	2200      	movs	r2, #0
 800026c:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 800026e:	4b9f      	ldr	r3, [pc, #636]	@ (80004ec <main+0x2cc>)
 8000270:	0019      	movs	r1, r3
 8000272:	2000      	movs	r0, #0
 8000274:	f000 fd78 	bl	8000d68 <BSP_COM_Init>
 8000278:	1e03      	subs	r3, r0, #0
 800027a:	d001      	beq.n	8000280 <main+0x60>
  {
    Error_Handler();
 800027c:	f000 fb86 	bl	800098c <Error_Handler>
  }

   // Inicializa com frequência de "vazio"
   PWM_SetFrequency(FREQ_VAZIO);
 8000280:	4b9b      	ldr	r3, [pc, #620]	@ (80004f0 <main+0x2d0>)
 8000282:	0018      	movs	r0, r3
 8000284:	f000 fab6 	bl	80007f4 <PWM_SetFrequency>
   // Desliga todos os LEDs inicialmente
   HAL_GPIO_WritePin(GPIOA, extra_baixo_Pin, GPIO_PIN_RESET);
 8000288:	2380      	movs	r3, #128	@ 0x80
 800028a:	0099      	lsls	r1, r3, #2
 800028c:	23a0      	movs	r3, #160	@ 0xa0
 800028e:	05db      	lsls	r3, r3, #23
 8000290:	2200      	movs	r2, #0
 8000292:	0018      	movs	r0, r3
 8000294:	f001 f9a9 	bl	80015ea <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(GPIOA, baixo_Pin, GPIO_PIN_RESET);
 8000298:	2380      	movs	r3, #128	@ 0x80
 800029a:	0219      	lsls	r1, r3, #8
 800029c:	23a0      	movs	r3, #160	@ 0xa0
 800029e:	05db      	lsls	r3, r3, #23
 80002a0:	2200      	movs	r2, #0
 80002a2:	0018      	movs	r0, r3
 80002a4:	f001 f9a1 	bl	80015ea <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(GPIOB, medio_Pin, GPIO_PIN_RESET);
 80002a8:	4b92      	ldr	r3, [pc, #584]	@ (80004f4 <main+0x2d4>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	2120      	movs	r1, #32
 80002ae:	0018      	movs	r0, r3
 80002b0:	f001 f99b 	bl	80015ea <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(GPIOB, alto_Pin, GPIO_PIN_RESET);
 80002b4:	4b8f      	ldr	r3, [pc, #572]	@ (80004f4 <main+0x2d4>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	2110      	movs	r1, #16
 80002ba:	0018      	movs	r0, r3
 80002bc:	f001 f995 	bl	80015ea <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   while (1)
     {
         uint32_t current_time = HAL_GetTick();
 80002c0:	f000 fe8e 	bl	8000fe0 <HAL_GetTick>
 80002c4:	0003      	movs	r3, r0
 80002c6:	607b      	str	r3, [r7, #4]

         // Lógica para o botão "selecionar nível"
         if (HAL_GPIO_ReadPin(GPIOB, bt_nivel_Pin) == GPIO_PIN_RESET &&
 80002c8:	2380      	movs	r3, #128	@ 0x80
 80002ca:	00db      	lsls	r3, r3, #3
 80002cc:	4a89      	ldr	r2, [pc, #548]	@ (80004f4 <main+0x2d4>)
 80002ce:	0019      	movs	r1, r3
 80002d0:	0010      	movs	r0, r2
 80002d2:	f001 f96d 	bl	80015b0 <HAL_GPIO_ReadPin>
 80002d6:	1e03      	subs	r3, r0, #0
 80002d8:	d000      	beq.n	80002dc <main+0xbc>
 80002da:	e06b      	b.n	80003b4 <main+0x194>
             (current_time - last_nivel_press_time) > DEBOUNCE_TIME)
 80002dc:	4b86      	ldr	r3, [pc, #536]	@ (80004f8 <main+0x2d8>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	687a      	ldr	r2, [r7, #4]
 80002e2:	1ad2      	subs	r2, r2, r3
 80002e4:	23c8      	movs	r3, #200	@ 0xc8
 80002e6:	005b      	lsls	r3, r3, #1
         if (HAL_GPIO_ReadPin(GPIOB, bt_nivel_Pin) == GPIO_PIN_RESET &&
 80002e8:	429a      	cmp	r2, r3
 80002ea:	d800      	bhi.n	80002ee <main+0xce>
 80002ec:	e062      	b.n	80003b4 <main+0x194>
         {
             last_nivel_press_time = current_time;
 80002ee:	4b82      	ldr	r3, [pc, #520]	@ (80004f8 <main+0x2d8>)
 80002f0:	687a      	ldr	r2, [r7, #4]
 80002f2:	601a      	str	r2, [r3, #0]

             // Avança para o próximo nível, sem passar por "NENHUM"
             if (nivelAtual == NIVEL_NENHUM) {
 80002f4:	4b81      	ldr	r3, [pc, #516]	@ (80004fc <main+0x2dc>)
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d103      	bne.n	8000304 <main+0xe4>
                 nivelAtual = NIVEL_EXTRA_BAIXO;
 80002fc:	4b7f      	ldr	r3, [pc, #508]	@ (80004fc <main+0x2dc>)
 80002fe:	2201      	movs	r2, #1
 8000300:	701a      	strb	r2, [r3, #0]
 8000302:	e01a      	b.n	800033a <main+0x11a>
             }
             else if (nivelAtual == NIVEL_EXTRA_BAIXO) {
 8000304:	4b7d      	ldr	r3, [pc, #500]	@ (80004fc <main+0x2dc>)
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	2b01      	cmp	r3, #1
 800030a:	d103      	bne.n	8000314 <main+0xf4>
                 nivelAtual = NIVEL_BAIXO;
 800030c:	4b7b      	ldr	r3, [pc, #492]	@ (80004fc <main+0x2dc>)
 800030e:	2202      	movs	r2, #2
 8000310:	701a      	strb	r2, [r3, #0]
 8000312:	e012      	b.n	800033a <main+0x11a>
             }
             else if (nivelAtual == NIVEL_BAIXO) {
 8000314:	4b79      	ldr	r3, [pc, #484]	@ (80004fc <main+0x2dc>)
 8000316:	781b      	ldrb	r3, [r3, #0]
 8000318:	2b02      	cmp	r3, #2
 800031a:	d103      	bne.n	8000324 <main+0x104>
                 nivelAtual = NIVEL_MEDIO;
 800031c:	4b77      	ldr	r3, [pc, #476]	@ (80004fc <main+0x2dc>)
 800031e:	2203      	movs	r2, #3
 8000320:	701a      	strb	r2, [r3, #0]
 8000322:	e00a      	b.n	800033a <main+0x11a>
             }
             else if (nivelAtual == NIVEL_MEDIO) {
 8000324:	4b75      	ldr	r3, [pc, #468]	@ (80004fc <main+0x2dc>)
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	2b03      	cmp	r3, #3
 800032a:	d103      	bne.n	8000334 <main+0x114>
                 nivelAtual = NIVEL_ALTO;
 800032c:	4b73      	ldr	r3, [pc, #460]	@ (80004fc <main+0x2dc>)
 800032e:	2204      	movs	r2, #4
 8000330:	701a      	strb	r2, [r3, #0]
 8000332:	e002      	b.n	800033a <main+0x11a>
             }
             else { // se estava em ALTO, volta para EXTRA_BAIXO
                 nivelAtual = NIVEL_EXTRA_BAIXO;
 8000334:	4b71      	ldr	r3, [pc, #452]	@ (80004fc <main+0x2dc>)
 8000336:	2201      	movs	r2, #1
 8000338:	701a      	strb	r2, [r3, #0]
             }


             // Atualiza a frequência alvo conforme nível escolhido
             switch (nivelAtual) {
 800033a:	4b70      	ldr	r3, [pc, #448]	@ (80004fc <main+0x2dc>)
 800033c:	781b      	ldrb	r3, [r3, #0]
 800033e:	2b04      	cmp	r3, #4
 8000340:	d014      	beq.n	800036c <main+0x14c>
 8000342:	dc17      	bgt.n	8000374 <main+0x154>
 8000344:	2b03      	cmp	r3, #3
 8000346:	d00d      	beq.n	8000364 <main+0x144>
 8000348:	dc14      	bgt.n	8000374 <main+0x154>
 800034a:	2b01      	cmp	r3, #1
 800034c:	d002      	beq.n	8000354 <main+0x134>
 800034e:	2b02      	cmp	r3, #2
 8000350:	d004      	beq.n	800035c <main+0x13c>
 8000352:	e00f      	b.n	8000374 <main+0x154>
                 case NIVEL_EXTRA_BAIXO: freqAlvo = FREQ_EXTRA_BAIXO; break;
 8000354:	4b6a      	ldr	r3, [pc, #424]	@ (8000500 <main+0x2e0>)
 8000356:	4a6b      	ldr	r2, [pc, #428]	@ (8000504 <main+0x2e4>)
 8000358:	601a      	str	r2, [r3, #0]
 800035a:	e00f      	b.n	800037c <main+0x15c>
                 case NIVEL_BAIXO:       freqAlvo = FREQ_BAIXO;       break;
 800035c:	4b68      	ldr	r3, [pc, #416]	@ (8000500 <main+0x2e0>)
 800035e:	4a6a      	ldr	r2, [pc, #424]	@ (8000508 <main+0x2e8>)
 8000360:	601a      	str	r2, [r3, #0]
 8000362:	e00b      	b.n	800037c <main+0x15c>
                 case NIVEL_MEDIO:       freqAlvo = FREQ_MEDIO;       break;
 8000364:	4b66      	ldr	r3, [pc, #408]	@ (8000500 <main+0x2e0>)
 8000366:	4a69      	ldr	r2, [pc, #420]	@ (800050c <main+0x2ec>)
 8000368:	601a      	str	r2, [r3, #0]
 800036a:	e007      	b.n	800037c <main+0x15c>
                 case NIVEL_ALTO:        freqAlvo = FREQ_ALTO;        break;
 800036c:	4b64      	ldr	r3, [pc, #400]	@ (8000500 <main+0x2e0>)
 800036e:	4a68      	ldr	r2, [pc, #416]	@ (8000510 <main+0x2f0>)
 8000370:	601a      	str	r2, [r3, #0]
 8000372:	e003      	b.n	800037c <main+0x15c>
                 default:                freqAlvo = FREQ_VAZIO;       break; // fallback
 8000374:	4b62      	ldr	r3, [pc, #392]	@ (8000500 <main+0x2e0>)
 8000376:	4a5e      	ldr	r2, [pc, #376]	@ (80004f0 <main+0x2d0>)
 8000378:	601a      	str	r2, [r3, #0]
 800037a:	46c0      	nop			@ (mov r8, r8)
             }

             // Desliga todos os LEDs até atingir a frequência do nível
             HAL_GPIO_WritePin(GPIOA, extra_baixo_Pin, GPIO_PIN_RESET);
 800037c:	2380      	movs	r3, #128	@ 0x80
 800037e:	0099      	lsls	r1, r3, #2
 8000380:	23a0      	movs	r3, #160	@ 0xa0
 8000382:	05db      	lsls	r3, r3, #23
 8000384:	2200      	movs	r2, #0
 8000386:	0018      	movs	r0, r3
 8000388:	f001 f92f 	bl	80015ea <HAL_GPIO_WritePin>
             HAL_GPIO_WritePin(GPIOA, baixo_Pin, GPIO_PIN_RESET);
 800038c:	2380      	movs	r3, #128	@ 0x80
 800038e:	0219      	lsls	r1, r3, #8
 8000390:	23a0      	movs	r3, #160	@ 0xa0
 8000392:	05db      	lsls	r3, r3, #23
 8000394:	2200      	movs	r2, #0
 8000396:	0018      	movs	r0, r3
 8000398:	f001 f927 	bl	80015ea <HAL_GPIO_WritePin>
             HAL_GPIO_WritePin(GPIOB, medio_Pin, GPIO_PIN_RESET);
 800039c:	4b55      	ldr	r3, [pc, #340]	@ (80004f4 <main+0x2d4>)
 800039e:	2200      	movs	r2, #0
 80003a0:	2120      	movs	r1, #32
 80003a2:	0018      	movs	r0, r3
 80003a4:	f001 f921 	bl	80015ea <HAL_GPIO_WritePin>
             HAL_GPIO_WritePin(GPIOB, alto_Pin, GPIO_PIN_RESET);
 80003a8:	4b52      	ldr	r3, [pc, #328]	@ (80004f4 <main+0x2d4>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	2110      	movs	r1, #16
 80003ae:	0018      	movs	r0, r3
 80003b0:	f001 f91b 	bl	80015ea <HAL_GPIO_WritePin>
         }

         // Lógica para o botão "encher"
         if (HAL_GPIO_ReadPin(GPIOB, bt_encher_Pin) == GPIO_PIN_RESET && (current_time - last_encher_press_time) > DEBOUNCE_TIME) {
 80003b4:	4b4f      	ldr	r3, [pc, #316]	@ (80004f4 <main+0x2d4>)
 80003b6:	2108      	movs	r1, #8
 80003b8:	0018      	movs	r0, r3
 80003ba:	f001 f8f9 	bl	80015b0 <HAL_GPIO_ReadPin>
 80003be:	1e03      	subs	r3, r0, #0
 80003c0:	d110      	bne.n	80003e4 <main+0x1c4>
 80003c2:	4b54      	ldr	r3, [pc, #336]	@ (8000514 <main+0x2f4>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	687a      	ldr	r2, [r7, #4]
 80003c8:	1ad2      	subs	r2, r2, r3
 80003ca:	23c8      	movs	r3, #200	@ 0xc8
 80003cc:	005b      	lsls	r3, r3, #1
 80003ce:	429a      	cmp	r2, r3
 80003d0:	d908      	bls.n	80003e4 <main+0x1c4>
        	 last_encher_press_time  = current_time;
 80003d2:	4b50      	ldr	r3, [pc, #320]	@ (8000514 <main+0x2f4>)
 80003d4:	687a      	ldr	r2, [r7, #4]
 80003d6:	601a      	str	r2, [r3, #0]
             enchendo = 1;
 80003d8:	4b4f      	ldr	r3, [pc, #316]	@ (8000518 <main+0x2f8>)
 80003da:	2201      	movs	r2, #1
 80003dc:	701a      	strb	r2, [r3, #0]
             esvaziando = 0;
 80003de:	4b4f      	ldr	r3, [pc, #316]	@ (800051c <main+0x2fc>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	701a      	strb	r2, [r3, #0]
         }

         // Lógica para o botão "esvaziar"
         if (HAL_GPIO_ReadPin(bt_esvaziar_GPIO_Port, bt_esvaziar_Pin) == GPIO_PIN_RESET && (current_time - last_esvaziar_press_time) > DEBOUNCE_TIME) {
 80003e4:	2380      	movs	r3, #128	@ 0x80
 80003e6:	00da      	lsls	r2, r3, #3
 80003e8:	23a0      	movs	r3, #160	@ 0xa0
 80003ea:	05db      	lsls	r3, r3, #23
 80003ec:	0011      	movs	r1, r2
 80003ee:	0018      	movs	r0, r3
 80003f0:	f001 f8de 	bl	80015b0 <HAL_GPIO_ReadPin>
 80003f4:	1e03      	subs	r3, r0, #0
 80003f6:	d110      	bne.n	800041a <main+0x1fa>
 80003f8:	4b49      	ldr	r3, [pc, #292]	@ (8000520 <main+0x300>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	687a      	ldr	r2, [r7, #4]
 80003fe:	1ad2      	subs	r2, r2, r3
 8000400:	23c8      	movs	r3, #200	@ 0xc8
 8000402:	005b      	lsls	r3, r3, #1
 8000404:	429a      	cmp	r2, r3
 8000406:	d908      	bls.n	800041a <main+0x1fa>
             last_esvaziar_press_time = current_time;
 8000408:	4b45      	ldr	r3, [pc, #276]	@ (8000520 <main+0x300>)
 800040a:	687a      	ldr	r2, [r7, #4]
 800040c:	601a      	str	r2, [r3, #0]
             enchendo = 0;
 800040e:	4b42      	ldr	r3, [pc, #264]	@ (8000518 <main+0x2f8>)
 8000410:	2200      	movs	r2, #0
 8000412:	701a      	strb	r2, [r3, #0]
             esvaziando = 1;
 8000414:	4b41      	ldr	r3, [pc, #260]	@ (800051c <main+0x2fc>)
 8000416:	2201      	movs	r2, #1
 8000418:	701a      	strb	r2, [r3, #0]
         }


             if (enchendo) {
 800041a:	4b3f      	ldr	r3, [pc, #252]	@ (8000518 <main+0x2f8>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b00      	cmp	r3, #0
 8000420:	d02e      	beq.n	8000480 <main+0x260>
                 if (freqAtual > freqAlvo) {
 8000422:	4b40      	ldr	r3, [pc, #256]	@ (8000524 <main+0x304>)
 8000424:	681a      	ldr	r2, [r3, #0]
 8000426:	4b36      	ldr	r3, [pc, #216]	@ (8000500 <main+0x2e0>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	429a      	cmp	r2, r3
 800042c:	d91a      	bls.n	8000464 <main+0x244>
                     freqAtual -= 100;  // vai diminuindo até o alvo
 800042e:	4b3d      	ldr	r3, [pc, #244]	@ (8000524 <main+0x304>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	3b64      	subs	r3, #100	@ 0x64
 8000434:	001a      	movs	r2, r3
 8000436:	4b3b      	ldr	r3, [pc, #236]	@ (8000524 <main+0x304>)
 8000438:	601a      	str	r2, [r3, #0]
                     if (freqAtual < freqAlvo) freqAtual = freqAlvo;
 800043a:	4b3a      	ldr	r3, [pc, #232]	@ (8000524 <main+0x304>)
 800043c:	681a      	ldr	r2, [r3, #0]
 800043e:	4b30      	ldr	r3, [pc, #192]	@ (8000500 <main+0x2e0>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	429a      	cmp	r2, r3
 8000444:	d203      	bcs.n	800044e <main+0x22e>
 8000446:	4b2e      	ldr	r3, [pc, #184]	@ (8000500 <main+0x2e0>)
 8000448:	681a      	ldr	r2, [r3, #0]
 800044a:	4b36      	ldr	r3, [pc, #216]	@ (8000524 <main+0x304>)
 800044c:	601a      	str	r2, [r3, #0]
                     PWM_SetFrequency(freqAtual);
 800044e:	4b35      	ldr	r3, [pc, #212]	@ (8000524 <main+0x304>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	0018      	movs	r0, r3
 8000454:	f000 f9ce 	bl	80007f4 <PWM_SetFrequency>
                     PiscarLED(nivelAtual);
 8000458:	4b28      	ldr	r3, [pc, #160]	@ (80004fc <main+0x2dc>)
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	0018      	movs	r0, r3
 800045e:	f000 fa49 	bl	80008f4 <PiscarLED>
 8000462:	e72d      	b.n	80002c0 <main+0xa0>
                 } else {
                     enchendo = 0;
 8000464:	4b2c      	ldr	r3, [pc, #176]	@ (8000518 <main+0x2f8>)
 8000466:	2200      	movs	r2, #0
 8000468:	701a      	strb	r2, [r3, #0]
                     PWM_SetFrequency(freqAtual);
 800046a:	4b2e      	ldr	r3, [pc, #184]	@ (8000524 <main+0x304>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	0018      	movs	r0, r3
 8000470:	f000 f9c0 	bl	80007f4 <PWM_SetFrequency>
                     AtualizaLEDs(nivelAtual);
 8000474:	4b21      	ldr	r3, [pc, #132]	@ (80004fc <main+0x2dc>)
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	0018      	movs	r0, r3
 800047a:	f000 f9e5 	bl	8000848 <AtualizaLEDs>
 800047e:	e71f      	b.n	80002c0 <main+0xa0>
                 }
             } else if (esvaziando) {
 8000480:	4b26      	ldr	r3, [pc, #152]	@ (800051c <main+0x2fc>)
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	2b00      	cmp	r3, #0
 8000486:	d100      	bne.n	800048a <main+0x26a>
 8000488:	e71a      	b.n	80002c0 <main+0xa0>
                 if (freqAtual < FREQ_VAZIO) {
 800048a:	4b26      	ldr	r3, [pc, #152]	@ (8000524 <main+0x304>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	4a26      	ldr	r2, [pc, #152]	@ (8000528 <main+0x308>)
 8000490:	4293      	cmp	r3, r2
 8000492:	d818      	bhi.n	80004c6 <main+0x2a6>
                     freqAtual += 100;  // vai subindo até "vazio"
 8000494:	4b23      	ldr	r3, [pc, #140]	@ (8000524 <main+0x304>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	3364      	adds	r3, #100	@ 0x64
 800049a:	001a      	movs	r2, r3
 800049c:	4b21      	ldr	r3, [pc, #132]	@ (8000524 <main+0x304>)
 800049e:	601a      	str	r2, [r3, #0]
                     if (freqAtual > FREQ_VAZIO) freqAtual = FREQ_VAZIO;
 80004a0:	4b20      	ldr	r3, [pc, #128]	@ (8000524 <main+0x304>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a12      	ldr	r2, [pc, #72]	@ (80004f0 <main+0x2d0>)
 80004a6:	4293      	cmp	r3, r2
 80004a8:	d902      	bls.n	80004b0 <main+0x290>
 80004aa:	4b1e      	ldr	r3, [pc, #120]	@ (8000524 <main+0x304>)
 80004ac:	4a10      	ldr	r2, [pc, #64]	@ (80004f0 <main+0x2d0>)
 80004ae:	601a      	str	r2, [r3, #0]
                     PWM_SetFrequency(freqAtual);
 80004b0:	4b1c      	ldr	r3, [pc, #112]	@ (8000524 <main+0x304>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	0018      	movs	r0, r3
 80004b6:	f000 f99d 	bl	80007f4 <PWM_SetFrequency>
                     PiscarLED(nivelAtual);
 80004ba:	4b10      	ldr	r3, [pc, #64]	@ (80004fc <main+0x2dc>)
 80004bc:	781b      	ldrb	r3, [r3, #0]
 80004be:	0018      	movs	r0, r3
 80004c0:	f000 fa18 	bl	80008f4 <PiscarLED>
 80004c4:	e6fc      	b.n	80002c0 <main+0xa0>
                 } else {
                     esvaziando = 0;
 80004c6:	4b15      	ldr	r3, [pc, #84]	@ (800051c <main+0x2fc>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	701a      	strb	r2, [r3, #0]
                     nivelAtual = NIVEL_NENHUM;
 80004cc:	4b0b      	ldr	r3, [pc, #44]	@ (80004fc <main+0x2dc>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	701a      	strb	r2, [r3, #0]
                     PWM_SetFrequency(FREQ_VAZIO);
 80004d2:	4b07      	ldr	r3, [pc, #28]	@ (80004f0 <main+0x2d0>)
 80004d4:	0018      	movs	r0, r3
 80004d6:	f000 f98d 	bl	80007f4 <PWM_SetFrequency>
                     AtualizaLEDs(nivelAtual);
 80004da:	4b08      	ldr	r3, [pc, #32]	@ (80004fc <main+0x2dc>)
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	0018      	movs	r0, r3
 80004e0:	f000 f9b2 	bl	8000848 <AtualizaLEDs>
     {
 80004e4:	e6ec      	b.n	80002c0 <main+0xa0>
 80004e6:	46c0      	nop			@ (mov r8, r8)
 80004e8:	2000005c 	.word	0x2000005c
 80004ec:	2000004c 	.word	0x2000004c
 80004f0:	00006784 	.word	0x00006784
 80004f4:	50000400 	.word	0x50000400
 80004f8:	200000ac 	.word	0x200000ac
 80004fc:	20000048 	.word	0x20000048
 8000500:	20000000 	.word	0x20000000
 8000504:	00006112 	.word	0x00006112
 8000508:	00005eec 	.word	0x00005eec
 800050c:	00005bcc 	.word	0x00005bcc
 8000510:	00005744 	.word	0x00005744
 8000514:	200000b0 	.word	0x200000b0
 8000518:	200000a8 	.word	0x200000a8
 800051c:	200000a9 	.word	0x200000a9
 8000520:	200000b4 	.word	0x200000b4
 8000524:	20000004 	.word	0x20000004
 8000528:	00006783 	.word	0x00006783

0800052c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800052c:	b590      	push	{r4, r7, lr}
 800052e:	b08d      	sub	sp, #52	@ 0x34
 8000530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000532:	2414      	movs	r4, #20
 8000534:	193b      	adds	r3, r7, r4
 8000536:	0018      	movs	r0, r3
 8000538:	231c      	movs	r3, #28
 800053a:	001a      	movs	r2, r3
 800053c:	2100      	movs	r1, #0
 800053e:	f002 ff71 	bl	8003424 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000542:	003b      	movs	r3, r7
 8000544:	0018      	movs	r0, r3
 8000546:	2314      	movs	r3, #20
 8000548:	001a      	movs	r2, r3
 800054a:	2100      	movs	r1, #0
 800054c:	f002 ff6a 	bl	8003424 <memset>

  __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_1);
 8000550:	4b19      	ldr	r3, [pc, #100]	@ (80005b8 <SystemClock_Config+0x8c>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	2207      	movs	r2, #7
 8000556:	4393      	bics	r3, r2
 8000558:	001a      	movs	r2, r3
 800055a:	4b17      	ldr	r3, [pc, #92]	@ (80005b8 <SystemClock_Config+0x8c>)
 800055c:	2101      	movs	r1, #1
 800055e:	430a      	orrs	r2, r1
 8000560:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000562:	193b      	adds	r3, r7, r4
 8000564:	2201      	movs	r2, #1
 8000566:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000568:	193b      	adds	r3, r7, r4
 800056a:	2280      	movs	r2, #128	@ 0x80
 800056c:	0252      	lsls	r2, r2, #9
 800056e:	605a      	str	r2, [r3, #4]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000570:	193b      	adds	r3, r7, r4
 8000572:	0018      	movs	r0, r3
 8000574:	f001 f856 	bl	8001624 <HAL_RCC_OscConfig>
 8000578:	1e03      	subs	r3, r0, #0
 800057a:	d001      	beq.n	8000580 <SystemClock_Config+0x54>
  {
    Error_Handler();
 800057c:	f000 fa06 	bl	800098c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000580:	003b      	movs	r3, r7
 8000582:	2207      	movs	r2, #7
 8000584:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000586:	003b      	movs	r3, r7
 8000588:	2201      	movs	r2, #1
 800058a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800058c:	003b      	movs	r3, r7
 800058e:	2200      	movs	r2, #0
 8000590:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000592:	003b      	movs	r3, r7
 8000594:	2200      	movs	r2, #0
 8000596:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000598:	003b      	movs	r3, r7
 800059a:	2200      	movs	r2, #0
 800059c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800059e:	003b      	movs	r3, r7
 80005a0:	2101      	movs	r1, #1
 80005a2:	0018      	movs	r0, r3
 80005a4:	f001 fa22 	bl	80019ec <HAL_RCC_ClockConfig>
 80005a8:	1e03      	subs	r3, r0, #0
 80005aa:	d001      	beq.n	80005b0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005ac:	f000 f9ee 	bl	800098c <Error_Handler>
  }
}
 80005b0:	46c0      	nop			@ (mov r8, r8)
 80005b2:	46bd      	mov	sp, r7
 80005b4:	b00d      	add	sp, #52	@ 0x34
 80005b6:	bd90      	pop	{r4, r7, pc}
 80005b8:	40022000 	.word	0x40022000

080005bc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b08e      	sub	sp, #56	@ 0x38
 80005c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005c2:	2328      	movs	r3, #40	@ 0x28
 80005c4:	18fb      	adds	r3, r7, r3
 80005c6:	0018      	movs	r0, r3
 80005c8:	2310      	movs	r3, #16
 80005ca:	001a      	movs	r2, r3
 80005cc:	2100      	movs	r1, #0
 80005ce:	f002 ff29 	bl	8003424 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005d2:	231c      	movs	r3, #28
 80005d4:	18fb      	adds	r3, r7, r3
 80005d6:	0018      	movs	r0, r3
 80005d8:	230c      	movs	r3, #12
 80005da:	001a      	movs	r2, r3
 80005dc:	2100      	movs	r1, #0
 80005de:	f002 ff21 	bl	8003424 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005e2:	003b      	movs	r3, r7
 80005e4:	0018      	movs	r0, r3
 80005e6:	231c      	movs	r3, #28
 80005e8:	001a      	movs	r2, r3
 80005ea:	2100      	movs	r1, #0
 80005ec:	f002 ff1a 	bl	8003424 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80005f0:	4b2f      	ldr	r3, [pc, #188]	@ (80006b0 <MX_TIM3_Init+0xf4>)
 80005f2:	4a30      	ldr	r2, [pc, #192]	@ (80006b4 <MX_TIM3_Init+0xf8>)
 80005f4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80005f6:	4b2e      	ldr	r3, [pc, #184]	@ (80006b0 <MX_TIM3_Init+0xf4>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005fc:	4b2c      	ldr	r3, [pc, #176]	@ (80006b0 <MX_TIM3_Init+0xf4>)
 80005fe:	2200      	movs	r2, #0
 8000600:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1810;
 8000602:	4b2b      	ldr	r3, [pc, #172]	@ (80006b0 <MX_TIM3_Init+0xf4>)
 8000604:	4a2c      	ldr	r2, [pc, #176]	@ (80006b8 <MX_TIM3_Init+0xfc>)
 8000606:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000608:	4b29      	ldr	r3, [pc, #164]	@ (80006b0 <MX_TIM3_Init+0xf4>)
 800060a:	2200      	movs	r2, #0
 800060c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800060e:	4b28      	ldr	r3, [pc, #160]	@ (80006b0 <MX_TIM3_Init+0xf4>)
 8000610:	2200      	movs	r2, #0
 8000612:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000614:	4b26      	ldr	r3, [pc, #152]	@ (80006b0 <MX_TIM3_Init+0xf4>)
 8000616:	0018      	movs	r0, r3
 8000618:	f001 fb5e 	bl	8001cd8 <HAL_TIM_Base_Init>
 800061c:	1e03      	subs	r3, r0, #0
 800061e:	d001      	beq.n	8000624 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000620:	f000 f9b4 	bl	800098c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000624:	2128      	movs	r1, #40	@ 0x28
 8000626:	187b      	adds	r3, r7, r1
 8000628:	2280      	movs	r2, #128	@ 0x80
 800062a:	0152      	lsls	r2, r2, #5
 800062c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800062e:	187a      	adds	r2, r7, r1
 8000630:	4b1f      	ldr	r3, [pc, #124]	@ (80006b0 <MX_TIM3_Init+0xf4>)
 8000632:	0011      	movs	r1, r2
 8000634:	0018      	movs	r0, r3
 8000636:	f001 fddf 	bl	80021f8 <HAL_TIM_ConfigClockSource>
 800063a:	1e03      	subs	r3, r0, #0
 800063c:	d001      	beq.n	8000642 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800063e:	f000 f9a5 	bl	800098c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000642:	4b1b      	ldr	r3, [pc, #108]	@ (80006b0 <MX_TIM3_Init+0xf4>)
 8000644:	0018      	movs	r0, r3
 8000646:	f001 fb9f 	bl	8001d88 <HAL_TIM_PWM_Init>
 800064a:	1e03      	subs	r3, r0, #0
 800064c:	d001      	beq.n	8000652 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800064e:	f000 f99d 	bl	800098c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000652:	211c      	movs	r1, #28
 8000654:	187b      	adds	r3, r7, r1
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800065a:	187b      	adds	r3, r7, r1
 800065c:	2200      	movs	r2, #0
 800065e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000660:	187a      	adds	r2, r7, r1
 8000662:	4b13      	ldr	r3, [pc, #76]	@ (80006b0 <MX_TIM3_Init+0xf4>)
 8000664:	0011      	movs	r1, r2
 8000666:	0018      	movs	r0, r3
 8000668:	f002 fa6a 	bl	8002b40 <HAL_TIMEx_MasterConfigSynchronization>
 800066c:	1e03      	subs	r3, r0, #0
 800066e:	d001      	beq.n	8000674 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000670:	f000 f98c 	bl	800098c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000674:	003b      	movs	r3, r7
 8000676:	2260      	movs	r2, #96	@ 0x60
 8000678:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800067a:	003b      	movs	r3, r7
 800067c:	2200      	movs	r2, #0
 800067e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000680:	003b      	movs	r3, r7
 8000682:	2200      	movs	r2, #0
 8000684:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000686:	003b      	movs	r3, r7
 8000688:	2200      	movs	r2, #0
 800068a:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800068c:	0039      	movs	r1, r7
 800068e:	4b08      	ldr	r3, [pc, #32]	@ (80006b0 <MX_TIM3_Init+0xf4>)
 8000690:	2204      	movs	r2, #4
 8000692:	0018      	movs	r0, r3
 8000694:	f001 fcb0 	bl	8001ff8 <HAL_TIM_PWM_ConfigChannel>
 8000698:	1e03      	subs	r3, r0, #0
 800069a:	d001      	beq.n	80006a0 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 800069c:	f000 f976 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80006a0:	4b03      	ldr	r3, [pc, #12]	@ (80006b0 <MX_TIM3_Init+0xf4>)
 80006a2:	0018      	movs	r0, r3
 80006a4:	f000 f9ba 	bl	8000a1c <HAL_TIM_MspPostInit>

}
 80006a8:	46c0      	nop			@ (mov r8, r8)
 80006aa:	46bd      	mov	sp, r7
 80006ac:	b00e      	add	sp, #56	@ 0x38
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	2000005c 	.word	0x2000005c
 80006b4:	40000400 	.word	0x40000400
 80006b8:	00000712 	.word	0x00000712

080006bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006bc:	b590      	push	{r4, r7, lr}
 80006be:	b08b      	sub	sp, #44	@ 0x2c
 80006c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c2:	2414      	movs	r4, #20
 80006c4:	193b      	adds	r3, r7, r4
 80006c6:	0018      	movs	r0, r3
 80006c8:	2314      	movs	r3, #20
 80006ca:	001a      	movs	r2, r3
 80006cc:	2100      	movs	r1, #0
 80006ce:	f002 fea9 	bl	8003424 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d2:	4b46      	ldr	r3, [pc, #280]	@ (80007ec <MX_GPIO_Init+0x130>)
 80006d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006d6:	4b45      	ldr	r3, [pc, #276]	@ (80007ec <MX_GPIO_Init+0x130>)
 80006d8:	2104      	movs	r1, #4
 80006da:	430a      	orrs	r2, r1
 80006dc:	635a      	str	r2, [r3, #52]	@ 0x34
 80006de:	4b43      	ldr	r3, [pc, #268]	@ (80007ec <MX_GPIO_Init+0x130>)
 80006e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006e2:	2204      	movs	r2, #4
 80006e4:	4013      	ands	r3, r2
 80006e6:	613b      	str	r3, [r7, #16]
 80006e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006ea:	4b40      	ldr	r3, [pc, #256]	@ (80007ec <MX_GPIO_Init+0x130>)
 80006ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006ee:	4b3f      	ldr	r3, [pc, #252]	@ (80007ec <MX_GPIO_Init+0x130>)
 80006f0:	2120      	movs	r1, #32
 80006f2:	430a      	orrs	r2, r1
 80006f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80006f6:	4b3d      	ldr	r3, [pc, #244]	@ (80007ec <MX_GPIO_Init+0x130>)
 80006f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006fa:	2220      	movs	r2, #32
 80006fc:	4013      	ands	r3, r2
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000702:	4b3a      	ldr	r3, [pc, #232]	@ (80007ec <MX_GPIO_Init+0x130>)
 8000704:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000706:	4b39      	ldr	r3, [pc, #228]	@ (80007ec <MX_GPIO_Init+0x130>)
 8000708:	2102      	movs	r1, #2
 800070a:	430a      	orrs	r2, r1
 800070c:	635a      	str	r2, [r3, #52]	@ 0x34
 800070e:	4b37      	ldr	r3, [pc, #220]	@ (80007ec <MX_GPIO_Init+0x130>)
 8000710:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000712:	2202      	movs	r2, #2
 8000714:	4013      	ands	r3, r2
 8000716:	60bb      	str	r3, [r7, #8]
 8000718:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071a:	4b34      	ldr	r3, [pc, #208]	@ (80007ec <MX_GPIO_Init+0x130>)
 800071c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800071e:	4b33      	ldr	r3, [pc, #204]	@ (80007ec <MX_GPIO_Init+0x130>)
 8000720:	2101      	movs	r1, #1
 8000722:	430a      	orrs	r2, r1
 8000724:	635a      	str	r2, [r3, #52]	@ 0x34
 8000726:	4b31      	ldr	r3, [pc, #196]	@ (80007ec <MX_GPIO_Init+0x130>)
 8000728:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800072a:	2201      	movs	r2, #1
 800072c:	4013      	ands	r3, r2
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, extra_baixo_Pin|baixo_Pin, GPIO_PIN_RESET);
 8000732:	2382      	movs	r3, #130	@ 0x82
 8000734:	0219      	lsls	r1, r3, #8
 8000736:	23a0      	movs	r3, #160	@ 0xa0
 8000738:	05db      	lsls	r3, r3, #23
 800073a:	2200      	movs	r2, #0
 800073c:	0018      	movs	r0, r3
 800073e:	f000 ff54 	bl	80015ea <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, alto_Pin|medio_Pin, GPIO_PIN_RESET);
 8000742:	4b2b      	ldr	r3, [pc, #172]	@ (80007f0 <MX_GPIO_Init+0x134>)
 8000744:	2200      	movs	r2, #0
 8000746:	2130      	movs	r1, #48	@ 0x30
 8000748:	0018      	movs	r0, r3
 800074a:	f000 ff4e 	bl	80015ea <HAL_GPIO_WritePin>

  /*Configure GPIO pins : bt_nivel_Pin bt_encher_Pin */
  GPIO_InitStruct.Pin = bt_nivel_Pin|bt_encher_Pin;
 800074e:	193b      	adds	r3, r7, r4
 8000750:	2281      	movs	r2, #129	@ 0x81
 8000752:	00d2      	lsls	r2, r2, #3
 8000754:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000756:	193b      	adds	r3, r7, r4
 8000758:	2200      	movs	r2, #0
 800075a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800075c:	193b      	adds	r3, r7, r4
 800075e:	2201      	movs	r2, #1
 8000760:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000762:	193b      	adds	r3, r7, r4
 8000764:	4a22      	ldr	r2, [pc, #136]	@ (80007f0 <MX_GPIO_Init+0x134>)
 8000766:	0019      	movs	r1, r3
 8000768:	0010      	movs	r0, r2
 800076a:	f000 fdaf 	bl	80012cc <HAL_GPIO_Init>

  /*Configure GPIO pins : extra_baixo_Pin baixo_Pin */
  GPIO_InitStruct.Pin = extra_baixo_Pin|baixo_Pin;
 800076e:	0021      	movs	r1, r4
 8000770:	187b      	adds	r3, r7, r1
 8000772:	2282      	movs	r2, #130	@ 0x82
 8000774:	0212      	lsls	r2, r2, #8
 8000776:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000778:	000c      	movs	r4, r1
 800077a:	193b      	adds	r3, r7, r4
 800077c:	2201      	movs	r2, #1
 800077e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	193b      	adds	r3, r7, r4
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000786:	193b      	adds	r3, r7, r4
 8000788:	2200      	movs	r2, #0
 800078a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078c:	193a      	adds	r2, r7, r4
 800078e:	23a0      	movs	r3, #160	@ 0xa0
 8000790:	05db      	lsls	r3, r3, #23
 8000792:	0011      	movs	r1, r2
 8000794:	0018      	movs	r0, r3
 8000796:	f000 fd99 	bl	80012cc <HAL_GPIO_Init>

  /*Configure GPIO pin : bt_esvaziar_Pin */
  GPIO_InitStruct.Pin = bt_esvaziar_Pin;
 800079a:	193b      	adds	r3, r7, r4
 800079c:	2280      	movs	r2, #128	@ 0x80
 800079e:	00d2      	lsls	r2, r2, #3
 80007a0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a2:	193b      	adds	r3, r7, r4
 80007a4:	2200      	movs	r2, #0
 80007a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007a8:	193b      	adds	r3, r7, r4
 80007aa:	2201      	movs	r2, #1
 80007ac:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(bt_esvaziar_GPIO_Port, &GPIO_InitStruct);
 80007ae:	193a      	adds	r2, r7, r4
 80007b0:	23a0      	movs	r3, #160	@ 0xa0
 80007b2:	05db      	lsls	r3, r3, #23
 80007b4:	0011      	movs	r1, r2
 80007b6:	0018      	movs	r0, r3
 80007b8:	f000 fd88 	bl	80012cc <HAL_GPIO_Init>

  /*Configure GPIO pins : alto_Pin medio_Pin */
  GPIO_InitStruct.Pin = alto_Pin|medio_Pin;
 80007bc:	0021      	movs	r1, r4
 80007be:	187b      	adds	r3, r7, r1
 80007c0:	2230      	movs	r2, #48	@ 0x30
 80007c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c4:	187b      	adds	r3, r7, r1
 80007c6:	2201      	movs	r2, #1
 80007c8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	187b      	adds	r3, r7, r1
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d0:	187b      	adds	r3, r7, r1
 80007d2:	2200      	movs	r2, #0
 80007d4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d6:	187b      	adds	r3, r7, r1
 80007d8:	4a05      	ldr	r2, [pc, #20]	@ (80007f0 <MX_GPIO_Init+0x134>)
 80007da:	0019      	movs	r1, r3
 80007dc:	0010      	movs	r0, r2
 80007de:	f000 fd75 	bl	80012cc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007e2:	46c0      	nop			@ (mov r8, r8)
 80007e4:	46bd      	mov	sp, r7
 80007e6:	b00b      	add	sp, #44	@ 0x2c
 80007e8:	bd90      	pop	{r4, r7, pc}
 80007ea:	46c0      	nop			@ (mov r8, r8)
 80007ec:	40021000 	.word	0x40021000
 80007f0:	50000400 	.word	0x50000400

080007f4 <PWM_SetFrequency>:

/* USER CODE BEGIN 4 */
void PWM_SetFrequency(uint32_t freq)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b086      	sub	sp, #24
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
    uint32_t timer_clock = 48000000; // APB1 Timer clock
 80007fc:	4b10      	ldr	r3, [pc, #64]	@ (8000840 <PWM_SetFrequency+0x4c>)
 80007fe:	617b      	str	r3, [r7, #20]
    uint32_t prescaler = 0;
 8000800:	2300      	movs	r3, #0
 8000802:	613b      	str	r3, [r7, #16]

    uint32_t arr = (timer_clock / (prescaler + 1)) / freq - 1;
 8000804:	693b      	ldr	r3, [r7, #16]
 8000806:	3301      	adds	r3, #1
 8000808:	0019      	movs	r1, r3
 800080a:	6978      	ldr	r0, [r7, #20]
 800080c:	f7ff fc7c 	bl	8000108 <__udivsi3>
 8000810:	0003      	movs	r3, r0
 8000812:	6879      	ldr	r1, [r7, #4]
 8000814:	0018      	movs	r0, r3
 8000816:	f7ff fc77 	bl	8000108 <__udivsi3>
 800081a:	0003      	movs	r3, r0
 800081c:	3b01      	subs	r3, #1
 800081e:	60fb      	str	r3, [r7, #12]

    __HAL_TIM_SET_AUTORELOAD(&htim3, arr); //sobrescreve arr para chegar na frequencia desejada
 8000820:	4b08      	ldr	r3, [pc, #32]	@ (8000844 <PWM_SetFrequency+0x50>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	68fa      	ldr	r2, [r7, #12]
 8000826:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000828:	4b06      	ldr	r3, [pc, #24]	@ (8000844 <PWM_SetFrequency+0x50>)
 800082a:	68fa      	ldr	r2, [r7, #12]
 800082c:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, arr/2); // duty 50%
 800082e:	4b05      	ldr	r3, [pc, #20]	@ (8000844 <PWM_SetFrequency+0x50>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	68fa      	ldr	r2, [r7, #12]
 8000834:	0852      	lsrs	r2, r2, #1
 8000836:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000838:	46c0      	nop			@ (mov r8, r8)
 800083a:	46bd      	mov	sp, r7
 800083c:	b006      	add	sp, #24
 800083e:	bd80      	pop	{r7, pc}
 8000840:	02dc6c00 	.word	0x02dc6c00
 8000844:	2000005c 	.word	0x2000005c

08000848 <AtualizaLEDs>:

void AtualizaLEDs(NivelPressostato nivel)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	0002      	movs	r2, r0
 8000850:	1dfb      	adds	r3, r7, #7
 8000852:	701a      	strb	r2, [r3, #0]
    // Desliga todos os LEDs primeiro
	HAL_GPIO_WritePin(GPIOA, extra_baixo_Pin, GPIO_PIN_RESET);
 8000854:	2380      	movs	r3, #128	@ 0x80
 8000856:	0099      	lsls	r1, r3, #2
 8000858:	23a0      	movs	r3, #160	@ 0xa0
 800085a:	05db      	lsls	r3, r3, #23
 800085c:	2200      	movs	r2, #0
 800085e:	0018      	movs	r0, r3
 8000860:	f000 fec3 	bl	80015ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, baixo_Pin, GPIO_PIN_RESET);
 8000864:	2380      	movs	r3, #128	@ 0x80
 8000866:	0219      	lsls	r1, r3, #8
 8000868:	23a0      	movs	r3, #160	@ 0xa0
 800086a:	05db      	lsls	r3, r3, #23
 800086c:	2200      	movs	r2, #0
 800086e:	0018      	movs	r0, r3
 8000870:	f000 febb 	bl	80015ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, medio_Pin, GPIO_PIN_RESET);
 8000874:	4b1e      	ldr	r3, [pc, #120]	@ (80008f0 <AtualizaLEDs+0xa8>)
 8000876:	2200      	movs	r2, #0
 8000878:	2120      	movs	r1, #32
 800087a:	0018      	movs	r0, r3
 800087c:	f000 feb5 	bl	80015ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, alto_Pin, GPIO_PIN_RESET);
 8000880:	4b1b      	ldr	r3, [pc, #108]	@ (80008f0 <AtualizaLEDs+0xa8>)
 8000882:	2200      	movs	r2, #0
 8000884:	2110      	movs	r1, #16
 8000886:	0018      	movs	r0, r3
 8000888:	f000 feaf 	bl	80015ea <HAL_GPIO_WritePin>

    // Acende apenas o LED correspondente ao nível atingido
    switch (nivel) {
 800088c:	1dfb      	adds	r3, r7, #7
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	2b04      	cmp	r3, #4
 8000892:	d021      	beq.n	80008d8 <AtualizaLEDs+0x90>
 8000894:	dc27      	bgt.n	80008e6 <AtualizaLEDs+0x9e>
 8000896:	2b03      	cmp	r3, #3
 8000898:	d017      	beq.n	80008ca <AtualizaLEDs+0x82>
 800089a:	dc24      	bgt.n	80008e6 <AtualizaLEDs+0x9e>
 800089c:	2b01      	cmp	r3, #1
 800089e:	d002      	beq.n	80008a6 <AtualizaLEDs+0x5e>
 80008a0:	2b02      	cmp	r3, #2
 80008a2:	d009      	beq.n	80008b8 <AtualizaLEDs+0x70>
        case NIVEL_ALTO:
            HAL_GPIO_WritePin(GPIOB, alto_Pin, GPIO_PIN_SET);
            break;
        default:
            // Nenhum LED para NIVEL_NENHUM
            break;
 80008a4:	e01f      	b.n	80008e6 <AtualizaLEDs+0x9e>
            HAL_GPIO_WritePin(GPIOA, extra_baixo_Pin, GPIO_PIN_SET);
 80008a6:	2380      	movs	r3, #128	@ 0x80
 80008a8:	0099      	lsls	r1, r3, #2
 80008aa:	23a0      	movs	r3, #160	@ 0xa0
 80008ac:	05db      	lsls	r3, r3, #23
 80008ae:	2201      	movs	r2, #1
 80008b0:	0018      	movs	r0, r3
 80008b2:	f000 fe9a 	bl	80015ea <HAL_GPIO_WritePin>
            break;
 80008b6:	e017      	b.n	80008e8 <AtualizaLEDs+0xa0>
            HAL_GPIO_WritePin(GPIOA, baixo_Pin, GPIO_PIN_SET);
 80008b8:	2380      	movs	r3, #128	@ 0x80
 80008ba:	0219      	lsls	r1, r3, #8
 80008bc:	23a0      	movs	r3, #160	@ 0xa0
 80008be:	05db      	lsls	r3, r3, #23
 80008c0:	2201      	movs	r2, #1
 80008c2:	0018      	movs	r0, r3
 80008c4:	f000 fe91 	bl	80015ea <HAL_GPIO_WritePin>
            break;
 80008c8:	e00e      	b.n	80008e8 <AtualizaLEDs+0xa0>
            HAL_GPIO_WritePin(GPIOB, medio_Pin, GPIO_PIN_SET);
 80008ca:	4b09      	ldr	r3, [pc, #36]	@ (80008f0 <AtualizaLEDs+0xa8>)
 80008cc:	2201      	movs	r2, #1
 80008ce:	2120      	movs	r1, #32
 80008d0:	0018      	movs	r0, r3
 80008d2:	f000 fe8a 	bl	80015ea <HAL_GPIO_WritePin>
            break;
 80008d6:	e007      	b.n	80008e8 <AtualizaLEDs+0xa0>
            HAL_GPIO_WritePin(GPIOB, alto_Pin, GPIO_PIN_SET);
 80008d8:	4b05      	ldr	r3, [pc, #20]	@ (80008f0 <AtualizaLEDs+0xa8>)
 80008da:	2201      	movs	r2, #1
 80008dc:	2110      	movs	r1, #16
 80008de:	0018      	movs	r0, r3
 80008e0:	f000 fe83 	bl	80015ea <HAL_GPIO_WritePin>
            break;
 80008e4:	e000      	b.n	80008e8 <AtualizaLEDs+0xa0>
            break;
 80008e6:	46c0      	nop			@ (mov r8, r8)
    }
}
 80008e8:	46c0      	nop			@ (mov r8, r8)
 80008ea:	46bd      	mov	sp, r7
 80008ec:	b002      	add	sp, #8
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	50000400 	.word	0x50000400

080008f4 <PiscarLED>:

void PiscarLED(NivelPressostato nivel)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	0002      	movs	r2, r0
 80008fc:	1dfb      	adds	r3, r7, #7
 80008fe:	701a      	strb	r2, [r3, #0]
    uint32_t current_time = HAL_GetTick();
 8000900:	f000 fb6e 	bl	8000fe0 <HAL_GetTick>
 8000904:	0003      	movs	r3, r0
 8000906:	60fb      	str	r3, [r7, #12]

    // Alterna a cada 500 ms
    if (current_time - lastBlinkTime >= 500) {
 8000908:	4b1d      	ldr	r3, [pc, #116]	@ (8000980 <PiscarLED+0x8c>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	68fa      	ldr	r2, [r7, #12]
 800090e:	1ad2      	subs	r2, r2, r3
 8000910:	23fa      	movs	r3, #250	@ 0xfa
 8000912:	005b      	lsls	r3, r3, #1
 8000914:	429a      	cmp	r2, r3
 8000916:	d30a      	bcc.n	800092e <PiscarLED+0x3a>
        lastBlinkTime = current_time;
 8000918:	4b19      	ldr	r3, [pc, #100]	@ (8000980 <PiscarLED+0x8c>)
 800091a:	68fa      	ldr	r2, [r7, #12]
 800091c:	601a      	str	r2, [r3, #0]
        ledState = !ledState;
 800091e:	4b19      	ldr	r3, [pc, #100]	@ (8000984 <PiscarLED+0x90>)
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	425a      	negs	r2, r3
 8000924:	4153      	adcs	r3, r2
 8000926:	b2db      	uxtb	r3, r3
 8000928:	001a      	movs	r2, r3
 800092a:	4b16      	ldr	r3, [pc, #88]	@ (8000984 <PiscarLED+0x90>)
 800092c:	701a      	strb	r2, [r3, #0]
    }

    // Desliga todos os LEDs
    HAL_GPIO_WritePin(GPIOA, extra_baixo_Pin, GPIO_PIN_RESET);
 800092e:	2380      	movs	r3, #128	@ 0x80
 8000930:	0099      	lsls	r1, r3, #2
 8000932:	23a0      	movs	r3, #160	@ 0xa0
 8000934:	05db      	lsls	r3, r3, #23
 8000936:	2200      	movs	r2, #0
 8000938:	0018      	movs	r0, r3
 800093a:	f000 fe56 	bl	80015ea <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, baixo_Pin, GPIO_PIN_RESET);
 800093e:	2380      	movs	r3, #128	@ 0x80
 8000940:	0219      	lsls	r1, r3, #8
 8000942:	23a0      	movs	r3, #160	@ 0xa0
 8000944:	05db      	lsls	r3, r3, #23
 8000946:	2200      	movs	r2, #0
 8000948:	0018      	movs	r0, r3
 800094a:	f000 fe4e 	bl	80015ea <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, medio_Pin, GPIO_PIN_RESET);
 800094e:	4b0e      	ldr	r3, [pc, #56]	@ (8000988 <PiscarLED+0x94>)
 8000950:	2200      	movs	r2, #0
 8000952:	2120      	movs	r1, #32
 8000954:	0018      	movs	r0, r3
 8000956:	f000 fe48 	bl	80015ea <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, alto_Pin, GPIO_PIN_RESET);
 800095a:	4b0b      	ldr	r3, [pc, #44]	@ (8000988 <PiscarLED+0x94>)
 800095c:	2200      	movs	r2, #0
 800095e:	2110      	movs	r1, #16
 8000960:	0018      	movs	r0, r3
 8000962:	f000 fe42 	bl	80015ea <HAL_GPIO_WritePin>

    if (ledState) {
 8000966:	4b07      	ldr	r3, [pc, #28]	@ (8000984 <PiscarLED+0x90>)
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d004      	beq.n	8000978 <PiscarLED+0x84>
        AtualizaLEDs(nivel); // Acende apenas o nível selecionado
 800096e:	1dfb      	adds	r3, r7, #7
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	0018      	movs	r0, r3
 8000974:	f7ff ff68 	bl	8000848 <AtualizaLEDs>
    }
}
 8000978:	46c0      	nop			@ (mov r8, r8)
 800097a:	46bd      	mov	sp, r7
 800097c:	b004      	add	sp, #16
 800097e:	bd80      	pop	{r7, pc}
 8000980:	200000b8 	.word	0x200000b8
 8000984:	200000bc 	.word	0x200000bc
 8000988:	50000400 	.word	0x50000400

0800098c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000990:	b672      	cpsid	i
}
 8000992:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000994:	46c0      	nop			@ (mov r8, r8)
 8000996:	e7fd      	b.n	8000994 <Error_Handler+0x8>

08000998 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099e:	4b0f      	ldr	r3, [pc, #60]	@ (80009dc <HAL_MspInit+0x44>)
 80009a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80009a2:	4b0e      	ldr	r3, [pc, #56]	@ (80009dc <HAL_MspInit+0x44>)
 80009a4:	2101      	movs	r1, #1
 80009a6:	430a      	orrs	r2, r1
 80009a8:	641a      	str	r2, [r3, #64]	@ 0x40
 80009aa:	4b0c      	ldr	r3, [pc, #48]	@ (80009dc <HAL_MspInit+0x44>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ae:	2201      	movs	r2, #1
 80009b0:	4013      	ands	r3, r2
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b6:	4b09      	ldr	r3, [pc, #36]	@ (80009dc <HAL_MspInit+0x44>)
 80009b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80009ba:	4b08      	ldr	r3, [pc, #32]	@ (80009dc <HAL_MspInit+0x44>)
 80009bc:	2180      	movs	r1, #128	@ 0x80
 80009be:	0549      	lsls	r1, r1, #21
 80009c0:	430a      	orrs	r2, r1
 80009c2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80009c4:	4b05      	ldr	r3, [pc, #20]	@ (80009dc <HAL_MspInit+0x44>)
 80009c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80009c8:	2380      	movs	r3, #128	@ 0x80
 80009ca:	055b      	lsls	r3, r3, #21
 80009cc:	4013      	ands	r3, r2
 80009ce:	603b      	str	r3, [r7, #0]
 80009d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d2:	46c0      	nop			@ (mov r8, r8)
 80009d4:	46bd      	mov	sp, r7
 80009d6:	b002      	add	sp, #8
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	46c0      	nop			@ (mov r8, r8)
 80009dc:	40021000 	.word	0x40021000

080009e0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a09      	ldr	r2, [pc, #36]	@ (8000a14 <HAL_TIM_Base_MspInit+0x34>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d10b      	bne.n	8000a0a <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80009f2:	4b09      	ldr	r3, [pc, #36]	@ (8000a18 <HAL_TIM_Base_MspInit+0x38>)
 80009f4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80009f6:	4b08      	ldr	r3, [pc, #32]	@ (8000a18 <HAL_TIM_Base_MspInit+0x38>)
 80009f8:	2102      	movs	r1, #2
 80009fa:	430a      	orrs	r2, r1
 80009fc:	63da      	str	r2, [r3, #60]	@ 0x3c
 80009fe:	4b06      	ldr	r3, [pc, #24]	@ (8000a18 <HAL_TIM_Base_MspInit+0x38>)
 8000a00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000a02:	2202      	movs	r2, #2
 8000a04:	4013      	ands	r3, r2
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000a0a:	46c0      	nop			@ (mov r8, r8)
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	b004      	add	sp, #16
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	46c0      	nop			@ (mov r8, r8)
 8000a14:	40000400 	.word	0x40000400
 8000a18:	40021000 	.word	0x40021000

08000a1c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a1c:	b590      	push	{r4, r7, lr}
 8000a1e:	b089      	sub	sp, #36	@ 0x24
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a24:	240c      	movs	r4, #12
 8000a26:	193b      	adds	r3, r7, r4
 8000a28:	0018      	movs	r0, r3
 8000a2a:	2314      	movs	r3, #20
 8000a2c:	001a      	movs	r2, r3
 8000a2e:	2100      	movs	r1, #0
 8000a30:	f002 fcf8 	bl	8003424 <memset>
  if(htim->Instance==TIM3)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a14      	ldr	r2, [pc, #80]	@ (8000a8c <HAL_TIM_MspPostInit+0x70>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d121      	bne.n	8000a82 <HAL_TIM_MspPostInit+0x66>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a3e:	4b14      	ldr	r3, [pc, #80]	@ (8000a90 <HAL_TIM_MspPostInit+0x74>)
 8000a40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a42:	4b13      	ldr	r3, [pc, #76]	@ (8000a90 <HAL_TIM_MspPostInit+0x74>)
 8000a44:	2104      	movs	r1, #4
 8000a46:	430a      	orrs	r2, r1
 8000a48:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a4a:	4b11      	ldr	r3, [pc, #68]	@ (8000a90 <HAL_TIM_MspPostInit+0x74>)
 8000a4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a4e:	2204      	movs	r2, #4
 8000a50:	4013      	ands	r3, r2
 8000a52:	60bb      	str	r3, [r7, #8]
 8000a54:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000a56:	0021      	movs	r1, r4
 8000a58:	187b      	adds	r3, r7, r1
 8000a5a:	2280      	movs	r2, #128	@ 0x80
 8000a5c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5e:	187b      	adds	r3, r7, r1
 8000a60:	2202      	movs	r2, #2
 8000a62:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	187b      	adds	r3, r7, r1
 8000a66:	2200      	movs	r2, #0
 8000a68:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6a:	187b      	adds	r3, r7, r1
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000a70:	187b      	adds	r3, r7, r1
 8000a72:	2201      	movs	r2, #1
 8000a74:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a76:	187b      	adds	r3, r7, r1
 8000a78:	4a06      	ldr	r2, [pc, #24]	@ (8000a94 <HAL_TIM_MspPostInit+0x78>)
 8000a7a:	0019      	movs	r1, r3
 8000a7c:	0010      	movs	r0, r2
 8000a7e:	f000 fc25 	bl	80012cc <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000a82:	46c0      	nop			@ (mov r8, r8)
 8000a84:	46bd      	mov	sp, r7
 8000a86:	b009      	add	sp, #36	@ 0x24
 8000a88:	bd90      	pop	{r4, r7, pc}
 8000a8a:	46c0      	nop			@ (mov r8, r8)
 8000a8c:	40000400 	.word	0x40000400
 8000a90:	40021000 	.word	0x40021000
 8000a94:	50000800 	.word	0x50000800

08000a98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a9c:	46c0      	nop			@ (mov r8, r8)
 8000a9e:	e7fd      	b.n	8000a9c <NMI_Handler+0x4>

08000aa0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa4:	46c0      	nop			@ (mov r8, r8)
 8000aa6:	e7fd      	b.n	8000aa4 <HardFault_Handler+0x4>

08000aa8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000aac:	46c0      	nop			@ (mov r8, r8)
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}

08000ab2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ab6:	46c0      	nop			@ (mov r8, r8)
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}

08000abc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac0:	f000 fa7c 	bl	8000fbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac4:	46c0      	nop			@ (mov r8, r8)
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}

08000aca <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000aca:	b580      	push	{r7, lr}
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000ace:	2000      	movs	r0, #0
 8000ad0:	f000 f928 	bl	8000d24 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000ad4:	46c0      	nop			@ (mov r8, r8)
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
	...

08000adc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ae0:	4b03      	ldr	r3, [pc, #12]	@ (8000af0 <SystemInit+0x14>)
 8000ae2:	2280      	movs	r2, #128	@ 0x80
 8000ae4:	0512      	lsls	r2, r2, #20
 8000ae6:	609a      	str	r2, [r3, #8]
#endif
}
 8000ae8:	46c0      	nop			@ (mov r8, r8)
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	46c0      	nop			@ (mov r8, r8)
 8000af0:	e000ed00 	.word	0xe000ed00

08000af4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000af4:	480d      	ldr	r0, [pc, #52]	@ (8000b2c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000af6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000af8:	f7ff fff0 	bl	8000adc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000afc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000afe:	e003      	b.n	8000b08 <LoopCopyDataInit>

08000b00 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000b00:	4b0b      	ldr	r3, [pc, #44]	@ (8000b30 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000b02:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000b04:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000b06:	3104      	adds	r1, #4

08000b08 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000b08:	480a      	ldr	r0, [pc, #40]	@ (8000b34 <LoopForever+0xa>)
  ldr r3, =_edata
 8000b0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b38 <LoopForever+0xe>)
  adds r2, r0, r1
 8000b0c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000b0e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000b10:	d3f6      	bcc.n	8000b00 <CopyDataInit>
  ldr r2, =_sbss
 8000b12:	4a0a      	ldr	r2, [pc, #40]	@ (8000b3c <LoopForever+0x12>)
  b LoopFillZerobss
 8000b14:	e002      	b.n	8000b1c <LoopFillZerobss>

08000b16 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000b16:	2300      	movs	r3, #0
  str  r3, [r2]
 8000b18:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b1a:	3204      	adds	r2, #4

08000b1c <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000b1c:	4b08      	ldr	r3, [pc, #32]	@ (8000b40 <LoopForever+0x16>)
  cmp r2, r3
 8000b1e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000b20:	d3f9      	bcc.n	8000b16 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000b22:	f002 fc87 	bl	8003434 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b26:	f7ff fb7b 	bl	8000220 <main>

08000b2a <LoopForever>:

LoopForever:
    b LoopForever
 8000b2a:	e7fe      	b.n	8000b2a <LoopForever>
  ldr   r0, =_estack
 8000b2c:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 8000b30:	08003570 	.word	0x08003570
  ldr r0, =_sdata
 8000b34:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000b38:	2000002c 	.word	0x2000002c
  ldr r2, =_sbss
 8000b3c:	2000002c 	.word	0x2000002c
  ldr r3, = _ebss
 8000b40:	20000164 	.word	0x20000164

08000b44 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b44:	e7fe      	b.n	8000b44 <ADC1_IRQHandler>
	...

08000b48 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED4
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08a      	sub	sp, #40	@ 0x28
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	0002      	movs	r2, r0
 8000b50:	1dfb      	adds	r3, r7, #7
 8000b52:	701a      	strb	r2, [r3, #0]
  int32_t ret = BSP_ERROR_NONE;
 8000b54:	2300      	movs	r3, #0
 8000b56:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitTypeDef  gpio_init_structure;

#if defined (USE_NUCLEO_64)
  if ((Led != LED1)
 8000b58:	1dfb      	adds	r3, r7, #7
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d007      	beq.n	8000b70 <BSP_LED_Init+0x28>
      && (Led != LED2))
 8000b60:	1dfb      	adds	r3, r7, #7
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d003      	beq.n	8000b70 <BSP_LED_Init+0x28>
#else
  if (Led != LED4)
#endif /* defined (USE_NUCLEO_64) */
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	425b      	negs	r3, r3
 8000b6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b6e:	e04a      	b.n	8000c06 <BSP_LED_Init+0xbe>
  }
  else
  {
    /* Enable the GPIO LED Clock */
#if defined (USE_NUCLEO_64)
    if (Led == LED1)
 8000b70:	1dfb      	adds	r3, r7, #7
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d10c      	bne.n	8000b92 <BSP_LED_Init+0x4a>
    {
      LED1_GPIO_CLK_ENABLE();
 8000b78:	4b25      	ldr	r3, [pc, #148]	@ (8000c10 <BSP_LED_Init+0xc8>)
 8000b7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b7c:	4b24      	ldr	r3, [pc, #144]	@ (8000c10 <BSP_LED_Init+0xc8>)
 8000b7e:	2101      	movs	r1, #1
 8000b80:	430a      	orrs	r2, r1
 8000b82:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b84:	4b22      	ldr	r3, [pc, #136]	@ (8000c10 <BSP_LED_Init+0xc8>)
 8000b86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b88:	2201      	movs	r2, #1
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	e00b      	b.n	8000baa <BSP_LED_Init+0x62>
    }
    else
    {
      LED2_GPIO_CLK_ENABLE();
 8000b92:	4b1f      	ldr	r3, [pc, #124]	@ (8000c10 <BSP_LED_Init+0xc8>)
 8000b94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b96:	4b1e      	ldr	r3, [pc, #120]	@ (8000c10 <BSP_LED_Init+0xc8>)
 8000b98:	2104      	movs	r1, #4
 8000b9a:	430a      	orrs	r2, r1
 8000b9c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b9e:	4b1c      	ldr	r3, [pc, #112]	@ (8000c10 <BSP_LED_Init+0xc8>)
 8000ba0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ba2:	2204      	movs	r2, #4
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	60bb      	str	r3, [r7, #8]
 8000ba8:	68bb      	ldr	r3, [r7, #8]
      LED4_GPIO_CLK_ENABLE();
    }
#endif /* defined (USE_NUCLEO_64) */

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8000baa:	1dfb      	adds	r3, r7, #7
 8000bac:	781a      	ldrb	r2, [r3, #0]
 8000bae:	4b19      	ldr	r3, [pc, #100]	@ (8000c14 <BSP_LED_Init+0xcc>)
 8000bb0:	0052      	lsls	r2, r2, #1
 8000bb2:	5ad3      	ldrh	r3, [r2, r3]
 8000bb4:	001a      	movs	r2, r3
 8000bb6:	2110      	movs	r1, #16
 8000bb8:	187b      	adds	r3, r7, r1
 8000bba:	601a      	str	r2, [r3, #0]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000bbc:	187b      	adds	r3, r7, r1
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	605a      	str	r2, [r3, #4]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8000bc2:	187b      	adds	r3, r7, r1
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	609a      	str	r2, [r3, #8]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc8:	187b      	adds	r3, r7, r1
 8000bca:	2203      	movs	r2, #3
 8000bcc:	60da      	str	r2, [r3, #12]

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000bce:	1dfb      	adds	r3, r7, #7
 8000bd0:	781a      	ldrb	r2, [r3, #0]
 8000bd2:	4b11      	ldr	r3, [pc, #68]	@ (8000c18 <BSP_LED_Init+0xd0>)
 8000bd4:	0092      	lsls	r2, r2, #2
 8000bd6:	58d3      	ldr	r3, [r2, r3]
 8000bd8:	187a      	adds	r2, r7, r1
 8000bda:	0011      	movs	r1, r2
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f000 fb75 	bl	80012cc <HAL_GPIO_Init>
#if defined (USE_NUCLEO_64)
    if (Led == LED2)
 8000be2:	1dfb      	adds	r3, r7, #7
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d10d      	bne.n	8000c06 <BSP_LED_Init+0xbe>
    {
     HAL_GPIO_WritePin(LED_PORT [Led], (uint16_t)LED_PIN[Led], GPIO_PIN_SET);
 8000bea:	1dfb      	adds	r3, r7, #7
 8000bec:	781a      	ldrb	r2, [r3, #0]
 8000bee:	4b0a      	ldr	r3, [pc, #40]	@ (8000c18 <BSP_LED_Init+0xd0>)
 8000bf0:	0092      	lsls	r2, r2, #2
 8000bf2:	58d0      	ldr	r0, [r2, r3]
 8000bf4:	1dfb      	adds	r3, r7, #7
 8000bf6:	781a      	ldrb	r2, [r3, #0]
 8000bf8:	4b06      	ldr	r3, [pc, #24]	@ (8000c14 <BSP_LED_Init+0xcc>)
 8000bfa:	0052      	lsls	r2, r2, #1
 8000bfc:	5ad3      	ldrh	r3, [r2, r3]
 8000bfe:	2201      	movs	r2, #1
 8000c00:	0019      	movs	r1, r3
 8000c02:	f000 fcf2 	bl	80015ea <HAL_GPIO_WritePin>
    }
#endif
  }
  return ret;
 8000c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8000c08:	0018      	movs	r0, r3
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	b00a      	add	sp, #40	@ 0x28
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	40021000 	.word	0x40021000
 8000c14:	080034f4 	.word	0x080034f4
 8000c18:	20000010 	.word	0x20000010

08000c1c <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b088      	sub	sp, #32
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	0002      	movs	r2, r0
 8000c24:	1dfb      	adds	r3, r7, #7
 8000c26:	701a      	strb	r2, [r3, #0]
 8000c28:	1dbb      	adds	r3, r7, #6
 8000c2a:	1c0a      	adds	r2, r1, #0
 8000c2c:	701a      	strb	r2, [r3, #0]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8000c2e:	4b36      	ldr	r3, [pc, #216]	@ (8000d08 <BSP_PB_Init+0xec>)
 8000c30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c32:	4b35      	ldr	r3, [pc, #212]	@ (8000d08 <BSP_PB_Init+0xec>)
 8000c34:	2104      	movs	r1, #4
 8000c36:	430a      	orrs	r2, r1
 8000c38:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c3a:	4b33      	ldr	r3, [pc, #204]	@ (8000d08 <BSP_PB_Init+0xec>)
 8000c3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c3e:	2204      	movs	r2, #4
 8000c40:	4013      	ands	r3, r2
 8000c42:	60bb      	str	r3, [r7, #8]
 8000c44:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8000c46:	2380      	movs	r3, #128	@ 0x80
 8000c48:	019b      	lsls	r3, r3, #6
 8000c4a:	001a      	movs	r2, r3
 8000c4c:	210c      	movs	r1, #12
 8000c4e:	187b      	adds	r3, r7, r1
 8000c50:	601a      	str	r2, [r3, #0]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8000c52:	187b      	adds	r3, r7, r1
 8000c54:	2201      	movs	r2, #1
 8000c56:	609a      	str	r2, [r3, #8]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c58:	187b      	adds	r3, r7, r1
 8000c5a:	2202      	movs	r2, #2
 8000c5c:	60da      	str	r2, [r3, #12]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8000c5e:	1dbb      	adds	r3, r7, #6
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d10d      	bne.n	8000c82 <BSP_PB_Init+0x66>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000c66:	187b      	adds	r3, r7, r1
 8000c68:	2200      	movs	r2, #0
 8000c6a:	605a      	str	r2, [r3, #4]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8000c6c:	1dfb      	adds	r3, r7, #7
 8000c6e:	781a      	ldrb	r2, [r3, #0]
 8000c70:	4b26      	ldr	r3, [pc, #152]	@ (8000d0c <BSP_PB_Init+0xf0>)
 8000c72:	0092      	lsls	r2, r2, #2
 8000c74:	58d3      	ldr	r3, [r2, r3]
 8000c76:	187a      	adds	r2, r7, r1
 8000c78:	0011      	movs	r1, r2
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	f000 fb26 	bl	80012cc <HAL_GPIO_Init>
 8000c80:	e03c      	b.n	8000cfc <BSP_PB_Init+0xe0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 8000c82:	210c      	movs	r1, #12
 8000c84:	187b      	adds	r3, r7, r1
 8000c86:	4a22      	ldr	r2, [pc, #136]	@ (8000d10 <BSP_PB_Init+0xf4>)
 8000c88:	605a      	str	r2, [r3, #4]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000c8a:	1dfb      	adds	r3, r7, #7
 8000c8c:	781a      	ldrb	r2, [r3, #0]
 8000c8e:	4b1f      	ldr	r3, [pc, #124]	@ (8000d0c <BSP_PB_Init+0xf0>)
 8000c90:	0092      	lsls	r2, r2, #2
 8000c92:	58d3      	ldr	r3, [r2, r3]
 8000c94:	187a      	adds	r2, r7, r1
 8000c96:	0011      	movs	r1, r2
 8000c98:	0018      	movs	r0, r3
 8000c9a:	f000 fb17 	bl	80012cc <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8000c9e:	1dfb      	adds	r3, r7, #7
 8000ca0:	781a      	ldrb	r2, [r3, #0]
 8000ca2:	0013      	movs	r3, r2
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	189b      	adds	r3, r3, r2
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	4a1a      	ldr	r2, [pc, #104]	@ (8000d14 <BSP_PB_Init+0xf8>)
 8000cac:	1898      	adds	r0, r3, r2
 8000cae:	1dfb      	adds	r3, r7, #7
 8000cb0:	781a      	ldrb	r2, [r3, #0]
 8000cb2:	4b19      	ldr	r3, [pc, #100]	@ (8000d18 <BSP_PB_Init+0xfc>)
 8000cb4:	0092      	lsls	r2, r2, #2
 8000cb6:	58d3      	ldr	r3, [r2, r3]
 8000cb8:	0019      	movs	r1, r3
 8000cba:	f000 faab 	bl	8001214 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8000cbe:	1dfb      	adds	r3, r7, #7
 8000cc0:	781a      	ldrb	r2, [r3, #0]
 8000cc2:	0013      	movs	r3, r2
 8000cc4:	005b      	lsls	r3, r3, #1
 8000cc6:	189b      	adds	r3, r3, r2
 8000cc8:	009b      	lsls	r3, r3, #2
 8000cca:	4a12      	ldr	r2, [pc, #72]	@ (8000d14 <BSP_PB_Init+0xf8>)
 8000ccc:	1898      	adds	r0, r3, r2
 8000cce:	1dfb      	adds	r3, r7, #7
 8000cd0:	781a      	ldrb	r2, [r3, #0]
 8000cd2:	4b12      	ldr	r3, [pc, #72]	@ (8000d1c <BSP_PB_Init+0x100>)
 8000cd4:	0092      	lsls	r2, r2, #2
 8000cd6:	58d3      	ldr	r3, [r2, r3]
 8000cd8:	001a      	movs	r2, r3
 8000cda:	2100      	movs	r1, #0
 8000cdc:	f000 fa68 	bl	80011b0 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8000ce0:	2007      	movs	r0, #7
 8000ce2:	1dfb      	adds	r3, r7, #7
 8000ce4:	781a      	ldrb	r2, [r3, #0]
 8000ce6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d20 <BSP_PB_Init+0x104>)
 8000ce8:	0092      	lsls	r2, r2, #2
 8000cea:	58d3      	ldr	r3, [r2, r3]
 8000cec:	2200      	movs	r2, #0
 8000cee:	0019      	movs	r1, r3
 8000cf0:	f000 fa2c 	bl	800114c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8000cf4:	2307      	movs	r3, #7
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	f000 fa3d 	bl	8001176 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8000cfc:	2300      	movs	r3, #0
}
 8000cfe:	0018      	movs	r0, r3
 8000d00:	46bd      	mov	sp, r7
 8000d02:	b008      	add	sp, #32
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	46c0      	nop			@ (mov r8, r8)
 8000d08:	40021000 	.word	0x40021000
 8000d0c:	20000018 	.word	0x20000018
 8000d10:	10210000 	.word	0x10210000
 8000d14:	200000c0 	.word	0x200000c0
 8000d18:	080034f8 	.word	0x080034f8
 8000d1c:	2000001c 	.word	0x2000001c
 8000d20:	20000020 	.word	0x20000020

08000d24 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	0002      	movs	r2, r0
 8000d2c:	1dfb      	adds	r3, r7, #7
 8000d2e:	701a      	strb	r2, [r3, #0]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8000d30:	1dfb      	adds	r3, r7, #7
 8000d32:	781a      	ldrb	r2, [r3, #0]
 8000d34:	0013      	movs	r3, r2
 8000d36:	005b      	lsls	r3, r3, #1
 8000d38:	189b      	adds	r3, r3, r2
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	4a04      	ldr	r2, [pc, #16]	@ (8000d50 <BSP_PB_IRQHandler+0x2c>)
 8000d3e:	189b      	adds	r3, r3, r2
 8000d40:	0018      	movs	r0, r3
 8000d42:	f000 fa79 	bl	8001238 <HAL_EXTI_IRQHandler>
}
 8000d46:	46c0      	nop			@ (mov r8, r8)
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	b002      	add	sp, #8
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	46c0      	nop			@ (mov r8, r8)
 8000d50:	200000c0 	.word	0x200000c0

08000d54 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	0002      	movs	r2, r0
 8000d5c:	1dfb      	adds	r3, r7, #7
 8000d5e:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8000d60:	46c0      	nop			@ (mov r8, r8)
 8000d62:	46bd      	mov	sp, r7
 8000d64:	b002      	add	sp, #8
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	0002      	movs	r2, r0
 8000d70:	6039      	str	r1, [r7, #0]
 8000d72:	1dfb      	adds	r3, r7, #7
 8000d74:	701a      	strb	r2, [r3, #0]
  int32_t ret = BSP_ERROR_NONE;
 8000d76:	2300      	movs	r3, #0
 8000d78:	60fb      	str	r3, [r7, #12]

  if (COM >= COMn)
 8000d7a:	1dfb      	adds	r3, r7, #7
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d003      	beq.n	8000d8a <BSP_COM_Init+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000d82:	2302      	movs	r3, #2
 8000d84:	425b      	negs	r3, r3
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	e018      	b.n	8000dbc <BSP_COM_Init+0x54>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8000d8a:	1dfb      	adds	r3, r7, #7
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	2294      	movs	r2, #148	@ 0x94
 8000d90:	435a      	muls	r2, r3
 8000d92:	4b0d      	ldr	r3, [pc, #52]	@ (8000dc8 <BSP_COM_Init+0x60>)
 8000d94:	18d3      	adds	r3, r2, r3
 8000d96:	0018      	movs	r0, r3
 8000d98:	f000 f856 	bl	8000e48 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART2_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000d9c:	1dfb      	adds	r3, r7, #7
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	2294      	movs	r2, #148	@ 0x94
 8000da2:	435a      	muls	r2, r3
 8000da4:	4b08      	ldr	r3, [pc, #32]	@ (8000dc8 <BSP_COM_Init+0x60>)
 8000da6:	18d3      	adds	r3, r2, r3
 8000da8:	683a      	ldr	r2, [r7, #0]
 8000daa:	0011      	movs	r1, r2
 8000dac:	0018      	movs	r0, r3
 8000dae:	f000 f80d 	bl	8000dcc <MX_USART2_Init>
 8000db2:	1e03      	subs	r3, r0, #0
 8000db4:	d002      	beq.n	8000dbc <BSP_COM_Init+0x54>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000db6:	2304      	movs	r3, #4
 8000db8:	425b      	negs	r3, r3
 8000dba:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000dbc:	68fb      	ldr	r3, [r7, #12]
}
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	b004      	add	sp, #16
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	46c0      	nop			@ (mov r8, r8)
 8000dc8:	200000cc 	.word	0x200000cc

08000dcc <MX_USART2_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART2_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 8000dd6:	4b17      	ldr	r3, [pc, #92]	@ (8000e34 <MX_USART2_Init+0x68>)
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	220c      	movs	r2, #12
 8000dea:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	895b      	ldrh	r3, [r3, #10]
 8000df0:	001a      	movs	r2, r3
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685a      	ldr	r2, [r3, #4]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	891b      	ldrh	r3, [r3, #8]
 8000e02:	001a      	movs	r2, r3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	899b      	ldrh	r3, [r3, #12]
 8000e0c:	001a      	movs	r2, r3
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2280      	movs	r2, #128	@ 0x80
 8000e16:	0212      	lsls	r2, r2, #8
 8000e18:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	0018      	movs	r0, r3
 8000e24:	f001 feee 	bl	8002c04 <HAL_UART_Init>
 8000e28:	0003      	movs	r3, r0
}
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	b002      	add	sp, #8
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	46c0      	nop			@ (mov r8, r8)
 8000e34:	2000000c 	.word	0x2000000c

08000e38 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8000e3c:	2000      	movs	r0, #0
 8000e3e:	f7ff ff89 	bl	8000d54 <BSP_PB_Callback>
}
 8000e42:	46c0      	nop			@ (mov r8, r8)
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8000e48:	b590      	push	{r4, r7, lr}
 8000e4a:	b08b      	sub	sp, #44	@ 0x2c
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8000e50:	4b28      	ldr	r3, [pc, #160]	@ (8000ef4 <COM1_MspInit+0xac>)
 8000e52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000e54:	4b27      	ldr	r3, [pc, #156]	@ (8000ef4 <COM1_MspInit+0xac>)
 8000e56:	2101      	movs	r1, #1
 8000e58:	430a      	orrs	r2, r1
 8000e5a:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e5c:	4b25      	ldr	r3, [pc, #148]	@ (8000ef4 <COM1_MspInit+0xac>)
 8000e5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e60:	2201      	movs	r2, #1
 8000e62:	4013      	ands	r3, r2
 8000e64:	613b      	str	r3, [r7, #16]
 8000e66:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8000e68:	4b22      	ldr	r3, [pc, #136]	@ (8000ef4 <COM1_MspInit+0xac>)
 8000e6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000e6c:	4b21      	ldr	r3, [pc, #132]	@ (8000ef4 <COM1_MspInit+0xac>)
 8000e6e:	2101      	movs	r1, #1
 8000e70:	430a      	orrs	r2, r1
 8000e72:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e74:	4b1f      	ldr	r3, [pc, #124]	@ (8000ef4 <COM1_MspInit+0xac>)
 8000e76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e78:	2201      	movs	r2, #1
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	60fb      	str	r3, [r7, #12]
 8000e7e:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8000e80:	4b1c      	ldr	r3, [pc, #112]	@ (8000ef4 <COM1_MspInit+0xac>)
 8000e82:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000e84:	4b1b      	ldr	r3, [pc, #108]	@ (8000ef4 <COM1_MspInit+0xac>)
 8000e86:	2180      	movs	r1, #128	@ 0x80
 8000e88:	0289      	lsls	r1, r1, #10
 8000e8a:	430a      	orrs	r2, r1
 8000e8c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000e8e:	4b19      	ldr	r3, [pc, #100]	@ (8000ef4 <COM1_MspInit+0xac>)
 8000e90:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000e92:	2380      	movs	r3, #128	@ 0x80
 8000e94:	029b      	lsls	r3, r3, #10
 8000e96:	4013      	ands	r3, r2
 8000e98:	60bb      	str	r3, [r7, #8]
 8000e9a:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8000e9c:	2414      	movs	r4, #20
 8000e9e:	193b      	adds	r3, r7, r4
 8000ea0:	2204      	movs	r2, #4
 8000ea2:	601a      	str	r2, [r3, #0]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000ea4:	193b      	adds	r3, r7, r4
 8000ea6:	2202      	movs	r2, #2
 8000ea8:	605a      	str	r2, [r3, #4]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000eaa:	193b      	adds	r3, r7, r4
 8000eac:	2202      	movs	r2, #2
 8000eae:	60da      	str	r2, [r3, #12]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8000eb0:	193b      	adds	r3, r7, r4
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	609a      	str	r2, [r3, #8]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8000eb6:	193b      	adds	r3, r7, r4
 8000eb8:	2201      	movs	r2, #1
 8000eba:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8000ebc:	193a      	adds	r2, r7, r4
 8000ebe:	23a0      	movs	r3, #160	@ 0xa0
 8000ec0:	05db      	lsls	r3, r3, #23
 8000ec2:	0011      	movs	r1, r2
 8000ec4:	0018      	movs	r0, r3
 8000ec6:	f000 fa01 	bl	80012cc <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 8000eca:	193b      	adds	r3, r7, r4
 8000ecc:	2208      	movs	r2, #8
 8000ece:	601a      	str	r2, [r3, #0]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000ed0:	193b      	adds	r3, r7, r4
 8000ed2:	2202      	movs	r2, #2
 8000ed4:	605a      	str	r2, [r3, #4]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8000ed6:	193b      	adds	r3, r7, r4
 8000ed8:	2201      	movs	r2, #1
 8000eda:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8000edc:	193a      	adds	r2, r7, r4
 8000ede:	23a0      	movs	r3, #160	@ 0xa0
 8000ee0:	05db      	lsls	r3, r3, #23
 8000ee2:	0011      	movs	r1, r2
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	f000 f9f1 	bl	80012cc <HAL_GPIO_Init>
}
 8000eea:	46c0      	nop			@ (mov r8, r8)
 8000eec:	46bd      	mov	sp, r7
 8000eee:	b00b      	add	sp, #44	@ 0x2c
 8000ef0:	bd90      	pop	{r4, r7, pc}
 8000ef2:	46c0      	nop			@ (mov r8, r8)
 8000ef4:	40021000 	.word	0x40021000

08000ef8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000efe:	1dfb      	adds	r3, r7, #7
 8000f00:	2200      	movs	r2, #0
 8000f02:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f04:	2003      	movs	r0, #3
 8000f06:	f000 f80f 	bl	8000f28 <HAL_InitTick>
 8000f0a:	1e03      	subs	r3, r0, #0
 8000f0c:	d003      	beq.n	8000f16 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000f0e:	1dfb      	adds	r3, r7, #7
 8000f10:	2201      	movs	r2, #1
 8000f12:	701a      	strb	r2, [r3, #0]
 8000f14:	e001      	b.n	8000f1a <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f16:	f7ff fd3f 	bl	8000998 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f1a:	1dfb      	adds	r3, r7, #7
 8000f1c:	781b      	ldrb	r3, [r3, #0]
}
 8000f1e:	0018      	movs	r0, r3
 8000f20:	46bd      	mov	sp, r7
 8000f22:	b002      	add	sp, #8
 8000f24:	bd80      	pop	{r7, pc}
	...

08000f28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f28:	b590      	push	{r4, r7, lr}
 8000f2a:	b085      	sub	sp, #20
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f30:	230f      	movs	r3, #15
 8000f32:	18fb      	adds	r3, r7, r3
 8000f34:	2200      	movs	r2, #0
 8000f36:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000f38:	4b1d      	ldr	r3, [pc, #116]	@ (8000fb0 <HAL_InitTick+0x88>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d02b      	beq.n	8000f98 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000f40:	4b1c      	ldr	r3, [pc, #112]	@ (8000fb4 <HAL_InitTick+0x8c>)
 8000f42:	681c      	ldr	r4, [r3, #0]
 8000f44:	4b1a      	ldr	r3, [pc, #104]	@ (8000fb0 <HAL_InitTick+0x88>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	0019      	movs	r1, r3
 8000f4a:	23fa      	movs	r3, #250	@ 0xfa
 8000f4c:	0098      	lsls	r0, r3, #2
 8000f4e:	f7ff f8db 	bl	8000108 <__udivsi3>
 8000f52:	0003      	movs	r3, r0
 8000f54:	0019      	movs	r1, r3
 8000f56:	0020      	movs	r0, r4
 8000f58:	f7ff f8d6 	bl	8000108 <__udivsi3>
 8000f5c:	0003      	movs	r3, r0
 8000f5e:	0018      	movs	r0, r3
 8000f60:	f000 f919 	bl	8001196 <HAL_SYSTICK_Config>
 8000f64:	1e03      	subs	r3, r0, #0
 8000f66:	d112      	bne.n	8000f8e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2b03      	cmp	r3, #3
 8000f6c:	d80a      	bhi.n	8000f84 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f6e:	6879      	ldr	r1, [r7, #4]
 8000f70:	2301      	movs	r3, #1
 8000f72:	425b      	negs	r3, r3
 8000f74:	2200      	movs	r2, #0
 8000f76:	0018      	movs	r0, r3
 8000f78:	f000 f8e8 	bl	800114c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f7c:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb8 <HAL_InitTick+0x90>)
 8000f7e:	687a      	ldr	r2, [r7, #4]
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	e00d      	b.n	8000fa0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000f84:	230f      	movs	r3, #15
 8000f86:	18fb      	adds	r3, r7, r3
 8000f88:	2201      	movs	r2, #1
 8000f8a:	701a      	strb	r2, [r3, #0]
 8000f8c:	e008      	b.n	8000fa0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f8e:	230f      	movs	r3, #15
 8000f90:	18fb      	adds	r3, r7, r3
 8000f92:	2201      	movs	r2, #1
 8000f94:	701a      	strb	r2, [r3, #0]
 8000f96:	e003      	b.n	8000fa0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f98:	230f      	movs	r3, #15
 8000f9a:	18fb      	adds	r3, r7, r3
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000fa0:	230f      	movs	r3, #15
 8000fa2:	18fb      	adds	r3, r7, r3
 8000fa4:	781b      	ldrb	r3, [r3, #0]
}
 8000fa6:	0018      	movs	r0, r3
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	b005      	add	sp, #20
 8000fac:	bd90      	pop	{r4, r7, pc}
 8000fae:	46c0      	nop			@ (mov r8, r8)
 8000fb0:	20000028 	.word	0x20000028
 8000fb4:	20000008 	.word	0x20000008
 8000fb8:	20000024 	.word	0x20000024

08000fbc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fc0:	4b05      	ldr	r3, [pc, #20]	@ (8000fd8 <HAL_IncTick+0x1c>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	001a      	movs	r2, r3
 8000fc6:	4b05      	ldr	r3, [pc, #20]	@ (8000fdc <HAL_IncTick+0x20>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	18d2      	adds	r2, r2, r3
 8000fcc:	4b03      	ldr	r3, [pc, #12]	@ (8000fdc <HAL_IncTick+0x20>)
 8000fce:	601a      	str	r2, [r3, #0]
}
 8000fd0:	46c0      	nop			@ (mov r8, r8)
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	46c0      	nop			@ (mov r8, r8)
 8000fd8:	20000028 	.word	0x20000028
 8000fdc:	20000160 	.word	0x20000160

08000fe0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe4:	4b02      	ldr	r3, [pc, #8]	@ (8000ff0 <HAL_GetTick+0x10>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
}
 8000fe8:	0018      	movs	r0, r3
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	46c0      	nop			@ (mov r8, r8)
 8000ff0:	20000160 	.word	0x20000160

08000ff4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	0002      	movs	r2, r0
 8000ffc:	1dfb      	adds	r3, r7, #7
 8000ffe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001000:	1dfb      	adds	r3, r7, #7
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	2b7f      	cmp	r3, #127	@ 0x7f
 8001006:	d809      	bhi.n	800101c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001008:	1dfb      	adds	r3, r7, #7
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	001a      	movs	r2, r3
 800100e:	231f      	movs	r3, #31
 8001010:	401a      	ands	r2, r3
 8001012:	4b04      	ldr	r3, [pc, #16]	@ (8001024 <__NVIC_EnableIRQ+0x30>)
 8001014:	2101      	movs	r1, #1
 8001016:	4091      	lsls	r1, r2
 8001018:	000a      	movs	r2, r1
 800101a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800101c:	46c0      	nop			@ (mov r8, r8)
 800101e:	46bd      	mov	sp, r7
 8001020:	b002      	add	sp, #8
 8001022:	bd80      	pop	{r7, pc}
 8001024:	e000e100 	.word	0xe000e100

08001028 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001028:	b590      	push	{r4, r7, lr}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	0002      	movs	r2, r0
 8001030:	6039      	str	r1, [r7, #0]
 8001032:	1dfb      	adds	r3, r7, #7
 8001034:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001036:	1dfb      	adds	r3, r7, #7
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	2b7f      	cmp	r3, #127	@ 0x7f
 800103c:	d828      	bhi.n	8001090 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800103e:	4a2f      	ldr	r2, [pc, #188]	@ (80010fc <__NVIC_SetPriority+0xd4>)
 8001040:	1dfb      	adds	r3, r7, #7
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	b25b      	sxtb	r3, r3
 8001046:	089b      	lsrs	r3, r3, #2
 8001048:	33c0      	adds	r3, #192	@ 0xc0
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	589b      	ldr	r3, [r3, r2]
 800104e:	1dfa      	adds	r2, r7, #7
 8001050:	7812      	ldrb	r2, [r2, #0]
 8001052:	0011      	movs	r1, r2
 8001054:	2203      	movs	r2, #3
 8001056:	400a      	ands	r2, r1
 8001058:	00d2      	lsls	r2, r2, #3
 800105a:	21ff      	movs	r1, #255	@ 0xff
 800105c:	4091      	lsls	r1, r2
 800105e:	000a      	movs	r2, r1
 8001060:	43d2      	mvns	r2, r2
 8001062:	401a      	ands	r2, r3
 8001064:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	019b      	lsls	r3, r3, #6
 800106a:	22ff      	movs	r2, #255	@ 0xff
 800106c:	401a      	ands	r2, r3
 800106e:	1dfb      	adds	r3, r7, #7
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	0018      	movs	r0, r3
 8001074:	2303      	movs	r3, #3
 8001076:	4003      	ands	r3, r0
 8001078:	00db      	lsls	r3, r3, #3
 800107a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800107c:	481f      	ldr	r0, [pc, #124]	@ (80010fc <__NVIC_SetPriority+0xd4>)
 800107e:	1dfb      	adds	r3, r7, #7
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	b25b      	sxtb	r3, r3
 8001084:	089b      	lsrs	r3, r3, #2
 8001086:	430a      	orrs	r2, r1
 8001088:	33c0      	adds	r3, #192	@ 0xc0
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800108e:	e031      	b.n	80010f4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001090:	4a1b      	ldr	r2, [pc, #108]	@ (8001100 <__NVIC_SetPriority+0xd8>)
 8001092:	1dfb      	adds	r3, r7, #7
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	0019      	movs	r1, r3
 8001098:	230f      	movs	r3, #15
 800109a:	400b      	ands	r3, r1
 800109c:	3b08      	subs	r3, #8
 800109e:	089b      	lsrs	r3, r3, #2
 80010a0:	3306      	adds	r3, #6
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	18d3      	adds	r3, r2, r3
 80010a6:	3304      	adds	r3, #4
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	1dfa      	adds	r2, r7, #7
 80010ac:	7812      	ldrb	r2, [r2, #0]
 80010ae:	0011      	movs	r1, r2
 80010b0:	2203      	movs	r2, #3
 80010b2:	400a      	ands	r2, r1
 80010b4:	00d2      	lsls	r2, r2, #3
 80010b6:	21ff      	movs	r1, #255	@ 0xff
 80010b8:	4091      	lsls	r1, r2
 80010ba:	000a      	movs	r2, r1
 80010bc:	43d2      	mvns	r2, r2
 80010be:	401a      	ands	r2, r3
 80010c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	019b      	lsls	r3, r3, #6
 80010c6:	22ff      	movs	r2, #255	@ 0xff
 80010c8:	401a      	ands	r2, r3
 80010ca:	1dfb      	adds	r3, r7, #7
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	0018      	movs	r0, r3
 80010d0:	2303      	movs	r3, #3
 80010d2:	4003      	ands	r3, r0
 80010d4:	00db      	lsls	r3, r3, #3
 80010d6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010d8:	4809      	ldr	r0, [pc, #36]	@ (8001100 <__NVIC_SetPriority+0xd8>)
 80010da:	1dfb      	adds	r3, r7, #7
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	001c      	movs	r4, r3
 80010e0:	230f      	movs	r3, #15
 80010e2:	4023      	ands	r3, r4
 80010e4:	3b08      	subs	r3, #8
 80010e6:	089b      	lsrs	r3, r3, #2
 80010e8:	430a      	orrs	r2, r1
 80010ea:	3306      	adds	r3, #6
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	18c3      	adds	r3, r0, r3
 80010f0:	3304      	adds	r3, #4
 80010f2:	601a      	str	r2, [r3, #0]
}
 80010f4:	46c0      	nop			@ (mov r8, r8)
 80010f6:	46bd      	mov	sp, r7
 80010f8:	b003      	add	sp, #12
 80010fa:	bd90      	pop	{r4, r7, pc}
 80010fc:	e000e100 	.word	0xe000e100
 8001100:	e000ed00 	.word	0xe000ed00

08001104 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	1e5a      	subs	r2, r3, #1
 8001110:	2380      	movs	r3, #128	@ 0x80
 8001112:	045b      	lsls	r3, r3, #17
 8001114:	429a      	cmp	r2, r3
 8001116:	d301      	bcc.n	800111c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001118:	2301      	movs	r3, #1
 800111a:	e010      	b.n	800113e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800111c:	4b0a      	ldr	r3, [pc, #40]	@ (8001148 <SysTick_Config+0x44>)
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	3a01      	subs	r2, #1
 8001122:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001124:	2301      	movs	r3, #1
 8001126:	425b      	negs	r3, r3
 8001128:	2103      	movs	r1, #3
 800112a:	0018      	movs	r0, r3
 800112c:	f7ff ff7c 	bl	8001028 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001130:	4b05      	ldr	r3, [pc, #20]	@ (8001148 <SysTick_Config+0x44>)
 8001132:	2200      	movs	r2, #0
 8001134:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001136:	4b04      	ldr	r3, [pc, #16]	@ (8001148 <SysTick_Config+0x44>)
 8001138:	2207      	movs	r2, #7
 800113a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800113c:	2300      	movs	r3, #0
}
 800113e:	0018      	movs	r0, r3
 8001140:	46bd      	mov	sp, r7
 8001142:	b002      	add	sp, #8
 8001144:	bd80      	pop	{r7, pc}
 8001146:	46c0      	nop			@ (mov r8, r8)
 8001148:	e000e010 	.word	0xe000e010

0800114c <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	60b9      	str	r1, [r7, #8]
 8001154:	607a      	str	r2, [r7, #4]
 8001156:	210f      	movs	r1, #15
 8001158:	187b      	adds	r3, r7, r1
 800115a:	1c02      	adds	r2, r0, #0
 800115c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800115e:	68ba      	ldr	r2, [r7, #8]
 8001160:	187b      	adds	r3, r7, r1
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	b25b      	sxtb	r3, r3
 8001166:	0011      	movs	r1, r2
 8001168:	0018      	movs	r0, r3
 800116a:	f7ff ff5d 	bl	8001028 <__NVIC_SetPriority>
}
 800116e:	46c0      	nop			@ (mov r8, r8)
 8001170:	46bd      	mov	sp, r7
 8001172:	b004      	add	sp, #16
 8001174:	bd80      	pop	{r7, pc}

08001176 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b082      	sub	sp, #8
 800117a:	af00      	add	r7, sp, #0
 800117c:	0002      	movs	r2, r0
 800117e:	1dfb      	adds	r3, r7, #7
 8001180:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001182:	1dfb      	adds	r3, r7, #7
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	b25b      	sxtb	r3, r3
 8001188:	0018      	movs	r0, r3
 800118a:	f7ff ff33 	bl	8000ff4 <__NVIC_EnableIRQ>
}
 800118e:	46c0      	nop			@ (mov r8, r8)
 8001190:	46bd      	mov	sp, r7
 8001192:	b002      	add	sp, #8
 8001194:	bd80      	pop	{r7, pc}

08001196 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b082      	sub	sp, #8
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	0018      	movs	r0, r3
 80011a2:	f7ff ffaf 	bl	8001104 <SysTick_Config>
 80011a6:	0003      	movs	r3, r0
}
 80011a8:	0018      	movs	r0, r3
 80011aa:	46bd      	mov	sp, r7
 80011ac:	b002      	add	sp, #8
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	607a      	str	r2, [r7, #4]
 80011ba:	200b      	movs	r0, #11
 80011bc:	183b      	adds	r3, r7, r0
 80011be:	1c0a      	adds	r2, r1, #0
 80011c0:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80011c2:	2317      	movs	r3, #23
 80011c4:	18fb      	adds	r3, r7, r3
 80011c6:	2200      	movs	r2, #0
 80011c8:	701a      	strb	r2, [r3, #0]

  switch (CallbackID)
 80011ca:	183b      	adds	r3, r7, r0
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d010      	beq.n	80011f4 <HAL_EXTI_RegisterCallback+0x44>
 80011d2:	dc13      	bgt.n	80011fc <HAL_EXTI_RegisterCallback+0x4c>
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d002      	beq.n	80011de <HAL_EXTI_RegisterCallback+0x2e>
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d007      	beq.n	80011ec <HAL_EXTI_RegisterCallback+0x3c>
 80011dc:	e00e      	b.n	80011fc <HAL_EXTI_RegisterCallback+0x4c>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	609a      	str	r2, [r3, #8]
      break;
 80011ea:	e00c      	b.n	8001206 <HAL_EXTI_RegisterCallback+0x56>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	605a      	str	r2, [r3, #4]
      break;
 80011f2:	e008      	b.n	8001206 <HAL_EXTI_RegisterCallback+0x56>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	609a      	str	r2, [r3, #8]
      break;
 80011fa:	e004      	b.n	8001206 <HAL_EXTI_RegisterCallback+0x56>

    default:
      status = HAL_ERROR;
 80011fc:	2317      	movs	r3, #23
 80011fe:	18fb      	adds	r3, r7, r3
 8001200:	2201      	movs	r2, #1
 8001202:	701a      	strb	r2, [r3, #0]
      break;
 8001204:	46c0      	nop			@ (mov r8, r8)
  }

  return status;
 8001206:	2317      	movs	r3, #23
 8001208:	18fb      	adds	r3, r7, r3
 800120a:	781b      	ldrb	r3, [r3, #0]
}
 800120c:	0018      	movs	r0, r3
 800120e:	46bd      	mov	sp, r7
 8001210:	b006      	add	sp, #24
 8001212:	bd80      	pop	{r7, pc}

08001214 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d101      	bne.n	8001228 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	e003      	b.n	8001230 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	683a      	ldr	r2, [r7, #0]
 800122c:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800122e:	2300      	movs	r3, #0
  }
}
 8001230:	0018      	movs	r0, r3
 8001232:	46bd      	mov	sp, r7
 8001234:	b002      	add	sp, #8
 8001236:	bd80      	pop	{r7, pc}

08001238 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	0c1b      	lsrs	r3, r3, #16
 8001246:	2201      	movs	r2, #1
 8001248:	4013      	ands	r3, r2
 800124a:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	221f      	movs	r2, #31
 8001252:	4013      	ands	r3, r2
 8001254:	2201      	movs	r2, #1
 8001256:	409a      	lsls	r2, r3
 8001258:	0013      	movs	r3, r2
 800125a:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	015b      	lsls	r3, r3, #5
 8001260:	4a18      	ldr	r2, [pc, #96]	@ (80012c4 <HAL_EXTI_IRQHandler+0x8c>)
 8001262:	4694      	mov	ip, r2
 8001264:	4463      	add	r3, ip
 8001266:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	4013      	ands	r3, r2
 8001270:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d009      	beq.n	800128c <HAL_EXTI_IRQHandler+0x54>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d002      	beq.n	800128c <HAL_EXTI_IRQHandler+0x54>
    {
      hexti->RisingCallback();
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	015b      	lsls	r3, r3, #5
 8001290:	4a0d      	ldr	r2, [pc, #52]	@ (80012c8 <HAL_EXTI_IRQHandler+0x90>)
 8001292:	4694      	mov	ip, r2
 8001294:	4463      	add	r3, ip
 8001296:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	4013      	ands	r3, r2
 80012a0:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d009      	beq.n	80012bc <HAL_EXTI_IRQHandler+0x84>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d002      	beq.n	80012bc <HAL_EXTI_IRQHandler+0x84>
    {
      hexti->FallingCallback();
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	4798      	blx	r3
    }
  }
}
 80012bc:	46c0      	nop			@ (mov r8, r8)
 80012be:	46bd      	mov	sp, r7
 80012c0:	b006      	add	sp, #24
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	4002180c 	.word	0x4002180c
 80012c8:	40021810 	.word	0x40021810

080012cc <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80012d6:	2300      	movs	r3, #0
 80012d8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80012da:	e153      	b.n	8001584 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2101      	movs	r1, #1
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	4091      	lsls	r1, r2
 80012e6:	000a      	movs	r2, r1
 80012e8:	4013      	ands	r3, r2
 80012ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d100      	bne.n	80012f4 <HAL_GPIO_Init+0x28>
 80012f2:	e144      	b.n	800157e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d003      	beq.n	8001304 <HAL_GPIO_Init+0x38>
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	2b12      	cmp	r3, #18
 8001302:	d125      	bne.n	8001350 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	08da      	lsrs	r2, r3, #3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3208      	adds	r2, #8
 800130c:	0092      	lsls	r2, r2, #2
 800130e:	58d3      	ldr	r3, [r2, r3]
 8001310:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	2207      	movs	r2, #7
 8001316:	4013      	ands	r3, r2
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	220f      	movs	r2, #15
 800131c:	409a      	lsls	r2, r3
 800131e:	0013      	movs	r3, r2
 8001320:	43da      	mvns	r2, r3
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	4013      	ands	r3, r2
 8001326:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	691b      	ldr	r3, [r3, #16]
 800132c:	220f      	movs	r2, #15
 800132e:	401a      	ands	r2, r3
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	2107      	movs	r1, #7
 8001334:	400b      	ands	r3, r1
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	409a      	lsls	r2, r3
 800133a:	0013      	movs	r3, r2
 800133c:	697a      	ldr	r2, [r7, #20]
 800133e:	4313      	orrs	r3, r2
 8001340:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	08da      	lsrs	r2, r3, #3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	3208      	adds	r2, #8
 800134a:	0092      	lsls	r2, r2, #2
 800134c:	6979      	ldr	r1, [r7, #20]
 800134e:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	2203      	movs	r2, #3
 800135c:	409a      	lsls	r2, r3
 800135e:	0013      	movs	r3, r2
 8001360:	43da      	mvns	r2, r3
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	4013      	ands	r3, r2
 8001366:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	2203      	movs	r2, #3
 800136e:	401a      	ands	r2, r3
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	409a      	lsls	r2, r3
 8001376:	0013      	movs	r3, r2
 8001378:	697a      	ldr	r2, [r7, #20]
 800137a:	4313      	orrs	r3, r2
 800137c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	697a      	ldr	r2, [r7, #20]
 8001382:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	2b01      	cmp	r3, #1
 800138a:	d00b      	beq.n	80013a4 <HAL_GPIO_Init+0xd8>
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	2b02      	cmp	r3, #2
 8001392:	d007      	beq.n	80013a4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001398:	2b11      	cmp	r3, #17
 800139a:	d003      	beq.n	80013a4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	2b12      	cmp	r3, #18
 80013a2:	d130      	bne.n	8001406 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	2203      	movs	r2, #3
 80013b0:	409a      	lsls	r2, r3
 80013b2:	0013      	movs	r3, r2
 80013b4:	43da      	mvns	r2, r3
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	4013      	ands	r3, r2
 80013ba:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	68da      	ldr	r2, [r3, #12]
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	409a      	lsls	r2, r3
 80013c6:	0013      	movs	r3, r2
 80013c8:	697a      	ldr	r2, [r7, #20]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	697a      	ldr	r2, [r7, #20]
 80013d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013da:	2201      	movs	r2, #1
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	409a      	lsls	r2, r3
 80013e0:	0013      	movs	r3, r2
 80013e2:	43da      	mvns	r2, r3
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	4013      	ands	r3, r2
 80013e8:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	091b      	lsrs	r3, r3, #4
 80013f0:	2201      	movs	r2, #1
 80013f2:	401a      	ands	r2, r3
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	409a      	lsls	r2, r3
 80013f8:	0013      	movs	r3, r2
 80013fa:	697a      	ldr	r2, [r7, #20]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	697a      	ldr	r2, [r7, #20]
 8001404:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	2b03      	cmp	r3, #3
 800140c:	d017      	beq.n	800143e <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	68db      	ldr	r3, [r3, #12]
 8001412:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	2203      	movs	r2, #3
 800141a:	409a      	lsls	r2, r3
 800141c:	0013      	movs	r3, r2
 800141e:	43da      	mvns	r2, r3
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	4013      	ands	r3, r2
 8001424:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	689a      	ldr	r2, [r3, #8]
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	409a      	lsls	r2, r3
 8001430:	0013      	movs	r3, r2
 8001432:	697a      	ldr	r2, [r7, #20]
 8001434:	4313      	orrs	r3, r2
 8001436:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	697a      	ldr	r2, [r7, #20]
 800143c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685a      	ldr	r2, [r3, #4]
 8001442:	2380      	movs	r3, #128	@ 0x80
 8001444:	055b      	lsls	r3, r3, #21
 8001446:	4013      	ands	r3, r2
 8001448:	d100      	bne.n	800144c <HAL_GPIO_Init+0x180>
 800144a:	e098      	b.n	800157e <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800144c:	4a53      	ldr	r2, [pc, #332]	@ (800159c <HAL_GPIO_Init+0x2d0>)
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	089b      	lsrs	r3, r3, #2
 8001452:	3318      	adds	r3, #24
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	589b      	ldr	r3, [r3, r2]
 8001458:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	2203      	movs	r2, #3
 800145e:	4013      	ands	r3, r2
 8001460:	00db      	lsls	r3, r3, #3
 8001462:	220f      	movs	r2, #15
 8001464:	409a      	lsls	r2, r3
 8001466:	0013      	movs	r3, r2
 8001468:	43da      	mvns	r2, r3
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	4013      	ands	r3, r2
 800146e:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	23a0      	movs	r3, #160	@ 0xa0
 8001474:	05db      	lsls	r3, r3, #23
 8001476:	429a      	cmp	r2, r3
 8001478:	d019      	beq.n	80014ae <HAL_GPIO_Init+0x1e2>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a48      	ldr	r2, [pc, #288]	@ (80015a0 <HAL_GPIO_Init+0x2d4>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d013      	beq.n	80014aa <HAL_GPIO_Init+0x1de>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a47      	ldr	r2, [pc, #284]	@ (80015a4 <HAL_GPIO_Init+0x2d8>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d00d      	beq.n	80014a6 <HAL_GPIO_Init+0x1da>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a46      	ldr	r2, [pc, #280]	@ (80015a8 <HAL_GPIO_Init+0x2dc>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d007      	beq.n	80014a2 <HAL_GPIO_Init+0x1d6>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a45      	ldr	r2, [pc, #276]	@ (80015ac <HAL_GPIO_Init+0x2e0>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d101      	bne.n	800149e <HAL_GPIO_Init+0x1d2>
 800149a:	2305      	movs	r3, #5
 800149c:	e008      	b.n	80014b0 <HAL_GPIO_Init+0x1e4>
 800149e:	2306      	movs	r3, #6
 80014a0:	e006      	b.n	80014b0 <HAL_GPIO_Init+0x1e4>
 80014a2:	2303      	movs	r3, #3
 80014a4:	e004      	b.n	80014b0 <HAL_GPIO_Init+0x1e4>
 80014a6:	2302      	movs	r3, #2
 80014a8:	e002      	b.n	80014b0 <HAL_GPIO_Init+0x1e4>
 80014aa:	2301      	movs	r3, #1
 80014ac:	e000      	b.n	80014b0 <HAL_GPIO_Init+0x1e4>
 80014ae:	2300      	movs	r3, #0
 80014b0:	693a      	ldr	r2, [r7, #16]
 80014b2:	2103      	movs	r1, #3
 80014b4:	400a      	ands	r2, r1
 80014b6:	00d2      	lsls	r2, r2, #3
 80014b8:	4093      	lsls	r3, r2
 80014ba:	697a      	ldr	r2, [r7, #20]
 80014bc:	4313      	orrs	r3, r2
 80014be:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80014c0:	4936      	ldr	r1, [pc, #216]	@ (800159c <HAL_GPIO_Init+0x2d0>)
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	089b      	lsrs	r3, r3, #2
 80014c6:	3318      	adds	r3, #24
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	697a      	ldr	r2, [r7, #20]
 80014cc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 80014ce:	4a33      	ldr	r2, [pc, #204]	@ (800159c <HAL_GPIO_Init+0x2d0>)
 80014d0:	2380      	movs	r3, #128	@ 0x80
 80014d2:	58d3      	ldr	r3, [r2, r3]
 80014d4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	43da      	mvns	r2, r3
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	4013      	ands	r3, r2
 80014de:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685a      	ldr	r2, [r3, #4]
 80014e4:	2380      	movs	r3, #128	@ 0x80
 80014e6:	025b      	lsls	r3, r3, #9
 80014e8:	4013      	ands	r3, r2
 80014ea:	d003      	beq.n	80014f4 <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 80014ec:	697a      	ldr	r2, [r7, #20]
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80014f4:	4929      	ldr	r1, [pc, #164]	@ (800159c <HAL_GPIO_Init+0x2d0>)
 80014f6:	2280      	movs	r2, #128	@ 0x80
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 80014fc:	4a27      	ldr	r2, [pc, #156]	@ (800159c <HAL_GPIO_Init+0x2d0>)
 80014fe:	2384      	movs	r3, #132	@ 0x84
 8001500:	58d3      	ldr	r3, [r2, r3]
 8001502:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	43da      	mvns	r2, r3
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	4013      	ands	r3, r2
 800150c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685a      	ldr	r2, [r3, #4]
 8001512:	2380      	movs	r3, #128	@ 0x80
 8001514:	029b      	lsls	r3, r3, #10
 8001516:	4013      	ands	r3, r2
 8001518:	d003      	beq.n	8001522 <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 800151a:	697a      	ldr	r2, [r7, #20]
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	4313      	orrs	r3, r2
 8001520:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001522:	491e      	ldr	r1, [pc, #120]	@ (800159c <HAL_GPIO_Init+0x2d0>)
 8001524:	2284      	movs	r2, #132	@ 0x84
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800152a:	4b1c      	ldr	r3, [pc, #112]	@ (800159c <HAL_GPIO_Init+0x2d0>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	43da      	mvns	r2, r3
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	4013      	ands	r3, r2
 8001538:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685a      	ldr	r2, [r3, #4]
 800153e:	2380      	movs	r3, #128	@ 0x80
 8001540:	035b      	lsls	r3, r3, #13
 8001542:	4013      	ands	r3, r2
 8001544:	d003      	beq.n	800154e <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 8001546:	697a      	ldr	r2, [r7, #20]
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	4313      	orrs	r3, r2
 800154c:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 800154e:	4b13      	ldr	r3, [pc, #76]	@ (800159c <HAL_GPIO_Init+0x2d0>)
 8001550:	697a      	ldr	r2, [r7, #20]
 8001552:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8001554:	4b11      	ldr	r3, [pc, #68]	@ (800159c <HAL_GPIO_Init+0x2d0>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	43da      	mvns	r2, r3
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	4013      	ands	r3, r2
 8001562:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685a      	ldr	r2, [r3, #4]
 8001568:	2380      	movs	r3, #128	@ 0x80
 800156a:	039b      	lsls	r3, r3, #14
 800156c:	4013      	ands	r3, r2
 800156e:	d003      	beq.n	8001578 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 8001570:	697a      	ldr	r2, [r7, #20]
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	4313      	orrs	r3, r2
 8001576:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001578:	4b08      	ldr	r3, [pc, #32]	@ (800159c <HAL_GPIO_Init+0x2d0>)
 800157a:	697a      	ldr	r2, [r7, #20]
 800157c:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	3301      	adds	r3, #1
 8001582:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	40da      	lsrs	r2, r3
 800158c:	1e13      	subs	r3, r2, #0
 800158e:	d000      	beq.n	8001592 <HAL_GPIO_Init+0x2c6>
 8001590:	e6a4      	b.n	80012dc <HAL_GPIO_Init+0x10>
  }
}
 8001592:	46c0      	nop			@ (mov r8, r8)
 8001594:	46c0      	nop			@ (mov r8, r8)
 8001596:	46bd      	mov	sp, r7
 8001598:	b006      	add	sp, #24
 800159a:	bd80      	pop	{r7, pc}
 800159c:	40021800 	.word	0x40021800
 80015a0:	50000400 	.word	0x50000400
 80015a4:	50000800 	.word	0x50000800
 80015a8:	50000c00 	.word	0x50000c00
 80015ac:	50001400 	.word	0x50001400

080015b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	000a      	movs	r2, r1
 80015ba:	1cbb      	adds	r3, r7, #2
 80015bc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	691b      	ldr	r3, [r3, #16]
 80015c2:	1cba      	adds	r2, r7, #2
 80015c4:	8812      	ldrh	r2, [r2, #0]
 80015c6:	4013      	ands	r3, r2
 80015c8:	d004      	beq.n	80015d4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80015ca:	230f      	movs	r3, #15
 80015cc:	18fb      	adds	r3, r7, r3
 80015ce:	2201      	movs	r2, #1
 80015d0:	701a      	strb	r2, [r3, #0]
 80015d2:	e003      	b.n	80015dc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015d4:	230f      	movs	r3, #15
 80015d6:	18fb      	adds	r3, r7, r3
 80015d8:	2200      	movs	r2, #0
 80015da:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80015dc:	230f      	movs	r3, #15
 80015de:	18fb      	adds	r3, r7, r3
 80015e0:	781b      	ldrb	r3, [r3, #0]
}
 80015e2:	0018      	movs	r0, r3
 80015e4:	46bd      	mov	sp, r7
 80015e6:	b004      	add	sp, #16
 80015e8:	bd80      	pop	{r7, pc}

080015ea <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b082      	sub	sp, #8
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
 80015f2:	0008      	movs	r0, r1
 80015f4:	0011      	movs	r1, r2
 80015f6:	1cbb      	adds	r3, r7, #2
 80015f8:	1c02      	adds	r2, r0, #0
 80015fa:	801a      	strh	r2, [r3, #0]
 80015fc:	1c7b      	adds	r3, r7, #1
 80015fe:	1c0a      	adds	r2, r1, #0
 8001600:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001602:	1c7b      	adds	r3, r7, #1
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d004      	beq.n	8001614 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800160a:	1cbb      	adds	r3, r7, #2
 800160c:	881a      	ldrh	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001612:	e003      	b.n	800161c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001614:	1cbb      	adds	r3, r7, #2
 8001616:	881a      	ldrh	r2, [r3, #0]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800161c:	46c0      	nop			@ (mov r8, r8)
 800161e:	46bd      	mov	sp, r7
 8001620:	b002      	add	sp, #8
 8001622:	bd80      	pop	{r7, pc}

08001624 <HAL_RCC_OscConfig>:
            must adjust the number of CPU wait states in their application (SystemClock_Config() API)
            before calling the HAL_RCC_OscConfig() API to update the HSI48 clock division factor.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d101      	bne.n	8001636 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e1d0      	b.n	80019d8 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2201      	movs	r2, #1
 800163c:	4013      	ands	r3, r2
 800163e:	d100      	bne.n	8001642 <HAL_RCC_OscConfig+0x1e>
 8001640:	e069      	b.n	8001716 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001642:	4bc8      	ldr	r3, [pc, #800]	@ (8001964 <HAL_RCC_OscConfig+0x340>)
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	2238      	movs	r2, #56	@ 0x38
 8001648:	4013      	ands	r3, r2
 800164a:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	2b08      	cmp	r3, #8
 8001650:	d105      	bne.n	800165e <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d15d      	bne.n	8001716 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e1bc      	b.n	80019d8 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685a      	ldr	r2, [r3, #4]
 8001662:	2380      	movs	r3, #128	@ 0x80
 8001664:	025b      	lsls	r3, r3, #9
 8001666:	429a      	cmp	r2, r3
 8001668:	d107      	bne.n	800167a <HAL_RCC_OscConfig+0x56>
 800166a:	4bbe      	ldr	r3, [pc, #760]	@ (8001964 <HAL_RCC_OscConfig+0x340>)
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	4bbd      	ldr	r3, [pc, #756]	@ (8001964 <HAL_RCC_OscConfig+0x340>)
 8001670:	2180      	movs	r1, #128	@ 0x80
 8001672:	0249      	lsls	r1, r1, #9
 8001674:	430a      	orrs	r2, r1
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	e020      	b.n	80016bc <HAL_RCC_OscConfig+0x98>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	685a      	ldr	r2, [r3, #4]
 800167e:	23a0      	movs	r3, #160	@ 0xa0
 8001680:	02db      	lsls	r3, r3, #11
 8001682:	429a      	cmp	r2, r3
 8001684:	d10e      	bne.n	80016a4 <HAL_RCC_OscConfig+0x80>
 8001686:	4bb7      	ldr	r3, [pc, #732]	@ (8001964 <HAL_RCC_OscConfig+0x340>)
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	4bb6      	ldr	r3, [pc, #728]	@ (8001964 <HAL_RCC_OscConfig+0x340>)
 800168c:	2180      	movs	r1, #128	@ 0x80
 800168e:	02c9      	lsls	r1, r1, #11
 8001690:	430a      	orrs	r2, r1
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	4bb3      	ldr	r3, [pc, #716]	@ (8001964 <HAL_RCC_OscConfig+0x340>)
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	4bb2      	ldr	r3, [pc, #712]	@ (8001964 <HAL_RCC_OscConfig+0x340>)
 800169a:	2180      	movs	r1, #128	@ 0x80
 800169c:	0249      	lsls	r1, r1, #9
 800169e:	430a      	orrs	r2, r1
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	e00b      	b.n	80016bc <HAL_RCC_OscConfig+0x98>
 80016a4:	4baf      	ldr	r3, [pc, #700]	@ (8001964 <HAL_RCC_OscConfig+0x340>)
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	4bae      	ldr	r3, [pc, #696]	@ (8001964 <HAL_RCC_OscConfig+0x340>)
 80016aa:	49af      	ldr	r1, [pc, #700]	@ (8001968 <HAL_RCC_OscConfig+0x344>)
 80016ac:	400a      	ands	r2, r1
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	4bac      	ldr	r3, [pc, #688]	@ (8001964 <HAL_RCC_OscConfig+0x340>)
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	4bab      	ldr	r3, [pc, #684]	@ (8001964 <HAL_RCC_OscConfig+0x340>)
 80016b6:	49ad      	ldr	r1, [pc, #692]	@ (800196c <HAL_RCC_OscConfig+0x348>)
 80016b8:	400a      	ands	r2, r1
 80016ba:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d014      	beq.n	80016ee <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c4:	f7ff fc8c 	bl	8000fe0 <HAL_GetTick>
 80016c8:	0003      	movs	r3, r0
 80016ca:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016cc:	e008      	b.n	80016e0 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80016ce:	f7ff fc87 	bl	8000fe0 <HAL_GetTick>
 80016d2:	0002      	movs	r2, r0
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2b64      	cmp	r3, #100	@ 0x64
 80016da:	d901      	bls.n	80016e0 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e17b      	b.n	80019d8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016e0:	4ba0      	ldr	r3, [pc, #640]	@ (8001964 <HAL_RCC_OscConfig+0x340>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	2380      	movs	r3, #128	@ 0x80
 80016e6:	029b      	lsls	r3, r3, #10
 80016e8:	4013      	ands	r3, r2
 80016ea:	d0f0      	beq.n	80016ce <HAL_RCC_OscConfig+0xaa>
 80016ec:	e013      	b.n	8001716 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ee:	f7ff fc77 	bl	8000fe0 <HAL_GetTick>
 80016f2:	0003      	movs	r3, r0
 80016f4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016f6:	e008      	b.n	800170a <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80016f8:	f7ff fc72 	bl	8000fe0 <HAL_GetTick>
 80016fc:	0002      	movs	r2, r0
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b64      	cmp	r3, #100	@ 0x64
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e166      	b.n	80019d8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800170a:	4b96      	ldr	r3, [pc, #600]	@ (8001964 <HAL_RCC_OscConfig+0x340>)
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	2380      	movs	r3, #128	@ 0x80
 8001710:	029b      	lsls	r3, r3, #10
 8001712:	4013      	ands	r3, r2
 8001714:	d1f0      	bne.n	80016f8 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2202      	movs	r2, #2
 800171c:	4013      	ands	r3, r2
 800171e:	d100      	bne.n	8001722 <HAL_RCC_OscConfig+0xfe>
 8001720:	e086      	b.n	8001830 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001722:	4b90      	ldr	r3, [pc, #576]	@ (8001964 <HAL_RCC_OscConfig+0x340>)
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	2238      	movs	r2, #56	@ 0x38
 8001728:	4013      	ands	r3, r2
 800172a:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d12f      	bne.n	8001792 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	68db      	ldr	r3, [r3, #12]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d101      	bne.n	800173e <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e14c      	b.n	80019d8 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800173e:	4b89      	ldr	r3, [pc, #548]	@ (8001964 <HAL_RCC_OscConfig+0x340>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	4a8b      	ldr	r2, [pc, #556]	@ (8001970 <HAL_RCC_OscConfig+0x34c>)
 8001744:	4013      	ands	r3, r2
 8001746:	0019      	movs	r1, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	695b      	ldr	r3, [r3, #20]
 800174c:	021a      	lsls	r2, r3, #8
 800174e:	4b85      	ldr	r3, [pc, #532]	@ (8001964 <HAL_RCC_OscConfig+0x340>)
 8001750:	430a      	orrs	r2, r1
 8001752:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d112      	bne.n	8001780 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800175a:	4b82      	ldr	r3, [pc, #520]	@ (8001964 <HAL_RCC_OscConfig+0x340>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a85      	ldr	r2, [pc, #532]	@ (8001974 <HAL_RCC_OscConfig+0x350>)
 8001760:	4013      	ands	r3, r2
 8001762:	0019      	movs	r1, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	691a      	ldr	r2, [r3, #16]
 8001768:	4b7e      	ldr	r3, [pc, #504]	@ (8001964 <HAL_RCC_OscConfig+0x340>)
 800176a:	430a      	orrs	r2, r1
 800176c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800176e:	4b7d      	ldr	r3, [pc, #500]	@ (8001964 <HAL_RCC_OscConfig+0x340>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	0adb      	lsrs	r3, r3, #11
 8001774:	2207      	movs	r2, #7
 8001776:	4013      	ands	r3, r2
 8001778:	4a7f      	ldr	r2, [pc, #508]	@ (8001978 <HAL_RCC_OscConfig+0x354>)
 800177a:	40da      	lsrs	r2, r3
 800177c:	4b7f      	ldr	r3, [pc, #508]	@ (800197c <HAL_RCC_OscConfig+0x358>)
 800177e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001780:	4b7f      	ldr	r3, [pc, #508]	@ (8001980 <HAL_RCC_OscConfig+0x35c>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	0018      	movs	r0, r3
 8001786:	f7ff fbcf 	bl	8000f28 <HAL_InitTick>
 800178a:	1e03      	subs	r3, r0, #0
 800178c:	d050      	beq.n	8001830 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e122      	b.n	80019d8 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d030      	beq.n	80017fc <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800179a:	4b72      	ldr	r3, [pc, #456]	@ (8001964 <HAL_RCC_OscConfig+0x340>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a75      	ldr	r2, [pc, #468]	@ (8001974 <HAL_RCC_OscConfig+0x350>)
 80017a0:	4013      	ands	r3, r2
 80017a2:	0019      	movs	r1, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	691a      	ldr	r2, [r3, #16]
 80017a8:	4b6e      	ldr	r3, [pc, #440]	@ (8001964 <HAL_RCC_OscConfig+0x340>)
 80017aa:	430a      	orrs	r2, r1
 80017ac:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 80017ae:	4b6d      	ldr	r3, [pc, #436]	@ (8001964 <HAL_RCC_OscConfig+0x340>)
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	4b6c      	ldr	r3, [pc, #432]	@ (8001964 <HAL_RCC_OscConfig+0x340>)
 80017b4:	2180      	movs	r1, #128	@ 0x80
 80017b6:	0049      	lsls	r1, r1, #1
 80017b8:	430a      	orrs	r2, r1
 80017ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017bc:	f7ff fc10 	bl	8000fe0 <HAL_GetTick>
 80017c0:	0003      	movs	r3, r0
 80017c2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017c4:	e008      	b.n	80017d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80017c6:	f7ff fc0b 	bl	8000fe0 <HAL_GetTick>
 80017ca:	0002      	movs	r2, r0
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d901      	bls.n	80017d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e0ff      	b.n	80019d8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017d8:	4b62      	ldr	r3, [pc, #392]	@ (8001964 <HAL_RCC_OscConfig+0x340>)
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	2380      	movs	r3, #128	@ 0x80
 80017de:	00db      	lsls	r3, r3, #3
 80017e0:	4013      	ands	r3, r2
 80017e2:	d0f0      	beq.n	80017c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017e4:	4b5f      	ldr	r3, [pc, #380]	@ (8001964 <HAL_RCC_OscConfig+0x340>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	4a61      	ldr	r2, [pc, #388]	@ (8001970 <HAL_RCC_OscConfig+0x34c>)
 80017ea:	4013      	ands	r3, r2
 80017ec:	0019      	movs	r1, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	695b      	ldr	r3, [r3, #20]
 80017f2:	021a      	lsls	r2, r3, #8
 80017f4:	4b5b      	ldr	r3, [pc, #364]	@ (8001964 <HAL_RCC_OscConfig+0x340>)
 80017f6:	430a      	orrs	r2, r1
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	e019      	b.n	8001830 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 80017fc:	4b59      	ldr	r3, [pc, #356]	@ (8001964 <HAL_RCC_OscConfig+0x340>)
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	4b58      	ldr	r3, [pc, #352]	@ (8001964 <HAL_RCC_OscConfig+0x340>)
 8001802:	4960      	ldr	r1, [pc, #384]	@ (8001984 <HAL_RCC_OscConfig+0x360>)
 8001804:	400a      	ands	r2, r1
 8001806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001808:	f7ff fbea 	bl	8000fe0 <HAL_GetTick>
 800180c:	0003      	movs	r3, r0
 800180e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001810:	e008      	b.n	8001824 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001812:	f7ff fbe5 	bl	8000fe0 <HAL_GetTick>
 8001816:	0002      	movs	r2, r0
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	2b02      	cmp	r3, #2
 800181e:	d901      	bls.n	8001824 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001820:	2303      	movs	r3, #3
 8001822:	e0d9      	b.n	80019d8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001824:	4b4f      	ldr	r3, [pc, #316]	@ (8001964 <HAL_RCC_OscConfig+0x340>)
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	2380      	movs	r3, #128	@ 0x80
 800182a:	00db      	lsls	r3, r3, #3
 800182c:	4013      	ands	r3, r2
 800182e:	d1f0      	bne.n	8001812 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2208      	movs	r2, #8
 8001836:	4013      	ands	r3, r2
 8001838:	d042      	beq.n	80018c0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800183a:	4b4a      	ldr	r3, [pc, #296]	@ (8001964 <HAL_RCC_OscConfig+0x340>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	2238      	movs	r2, #56	@ 0x38
 8001840:	4013      	ands	r3, r2
 8001842:	2b18      	cmp	r3, #24
 8001844:	d105      	bne.n	8001852 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	699b      	ldr	r3, [r3, #24]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d138      	bne.n	80018c0 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e0c2      	b.n	80019d8 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	699b      	ldr	r3, [r3, #24]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d019      	beq.n	800188e <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800185a:	4b42      	ldr	r3, [pc, #264]	@ (8001964 <HAL_RCC_OscConfig+0x340>)
 800185c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800185e:	4b41      	ldr	r3, [pc, #260]	@ (8001964 <HAL_RCC_OscConfig+0x340>)
 8001860:	2101      	movs	r1, #1
 8001862:	430a      	orrs	r2, r1
 8001864:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001866:	f7ff fbbb 	bl	8000fe0 <HAL_GetTick>
 800186a:	0003      	movs	r3, r0
 800186c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800186e:	e008      	b.n	8001882 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001870:	f7ff fbb6 	bl	8000fe0 <HAL_GetTick>
 8001874:	0002      	movs	r2, r0
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b02      	cmp	r3, #2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e0aa      	b.n	80019d8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001882:	4b38      	ldr	r3, [pc, #224]	@ (8001964 <HAL_RCC_OscConfig+0x340>)
 8001884:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001886:	2202      	movs	r2, #2
 8001888:	4013      	ands	r3, r2
 800188a:	d0f1      	beq.n	8001870 <HAL_RCC_OscConfig+0x24c>
 800188c:	e018      	b.n	80018c0 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800188e:	4b35      	ldr	r3, [pc, #212]	@ (8001964 <HAL_RCC_OscConfig+0x340>)
 8001890:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001892:	4b34      	ldr	r3, [pc, #208]	@ (8001964 <HAL_RCC_OscConfig+0x340>)
 8001894:	2101      	movs	r1, #1
 8001896:	438a      	bics	r2, r1
 8001898:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800189a:	f7ff fba1 	bl	8000fe0 <HAL_GetTick>
 800189e:	0003      	movs	r3, r0
 80018a0:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80018a2:	e008      	b.n	80018b6 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80018a4:	f7ff fb9c 	bl	8000fe0 <HAL_GetTick>
 80018a8:	0002      	movs	r2, r0
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e090      	b.n	80019d8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80018b6:	4b2b      	ldr	r3, [pc, #172]	@ (8001964 <HAL_RCC_OscConfig+0x340>)
 80018b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018ba:	2202      	movs	r2, #2
 80018bc:	4013      	ands	r3, r2
 80018be:	d1f1      	bne.n	80018a4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2204      	movs	r2, #4
 80018c6:	4013      	ands	r3, r2
 80018c8:	d100      	bne.n	80018cc <HAL_RCC_OscConfig+0x2a8>
 80018ca:	e084      	b.n	80019d6 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018cc:	230f      	movs	r3, #15
 80018ce:	18fb      	adds	r3, r7, r3
 80018d0:	2200      	movs	r2, #0
 80018d2:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80018d4:	4b23      	ldr	r3, [pc, #140]	@ (8001964 <HAL_RCC_OscConfig+0x340>)
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	2238      	movs	r2, #56	@ 0x38
 80018da:	4013      	ands	r3, r2
 80018dc:	2b20      	cmp	r3, #32
 80018de:	d106      	bne.n	80018ee <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d000      	beq.n	80018ea <HAL_RCC_OscConfig+0x2c6>
 80018e8:	e075      	b.n	80019d6 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e074      	b.n	80019d8 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d106      	bne.n	8001904 <HAL_RCC_OscConfig+0x2e0>
 80018f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001964 <HAL_RCC_OscConfig+0x340>)
 80018f8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80018fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001964 <HAL_RCC_OscConfig+0x340>)
 80018fc:	2101      	movs	r1, #1
 80018fe:	430a      	orrs	r2, r1
 8001900:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001902:	e01c      	b.n	800193e <HAL_RCC_OscConfig+0x31a>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	2b05      	cmp	r3, #5
 800190a:	d10c      	bne.n	8001926 <HAL_RCC_OscConfig+0x302>
 800190c:	4b15      	ldr	r3, [pc, #84]	@ (8001964 <HAL_RCC_OscConfig+0x340>)
 800190e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001910:	4b14      	ldr	r3, [pc, #80]	@ (8001964 <HAL_RCC_OscConfig+0x340>)
 8001912:	2104      	movs	r1, #4
 8001914:	430a      	orrs	r2, r1
 8001916:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001918:	4b12      	ldr	r3, [pc, #72]	@ (8001964 <HAL_RCC_OscConfig+0x340>)
 800191a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800191c:	4b11      	ldr	r3, [pc, #68]	@ (8001964 <HAL_RCC_OscConfig+0x340>)
 800191e:	2101      	movs	r1, #1
 8001920:	430a      	orrs	r2, r1
 8001922:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001924:	e00b      	b.n	800193e <HAL_RCC_OscConfig+0x31a>
 8001926:	4b0f      	ldr	r3, [pc, #60]	@ (8001964 <HAL_RCC_OscConfig+0x340>)
 8001928:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800192a:	4b0e      	ldr	r3, [pc, #56]	@ (8001964 <HAL_RCC_OscConfig+0x340>)
 800192c:	2101      	movs	r1, #1
 800192e:	438a      	bics	r2, r1
 8001930:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001932:	4b0c      	ldr	r3, [pc, #48]	@ (8001964 <HAL_RCC_OscConfig+0x340>)
 8001934:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001936:	4b0b      	ldr	r3, [pc, #44]	@ (8001964 <HAL_RCC_OscConfig+0x340>)
 8001938:	2104      	movs	r1, #4
 800193a:	438a      	bics	r2, r1
 800193c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d028      	beq.n	8001998 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001946:	f7ff fb4b 	bl	8000fe0 <HAL_GetTick>
 800194a:	0003      	movs	r3, r0
 800194c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800194e:	e01d      	b.n	800198c <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001950:	f7ff fb46 	bl	8000fe0 <HAL_GetTick>
 8001954:	0002      	movs	r2, r0
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	4a0b      	ldr	r2, [pc, #44]	@ (8001988 <HAL_RCC_OscConfig+0x364>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d915      	bls.n	800198c <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e039      	b.n	80019d8 <HAL_RCC_OscConfig+0x3b4>
 8001964:	40021000 	.word	0x40021000
 8001968:	fffeffff 	.word	0xfffeffff
 800196c:	fffbffff 	.word	0xfffbffff
 8001970:	ffff80ff 	.word	0xffff80ff
 8001974:	ffffc7ff 	.word	0xffffc7ff
 8001978:	02dc6c00 	.word	0x02dc6c00
 800197c:	20000008 	.word	0x20000008
 8001980:	20000024 	.word	0x20000024
 8001984:	fffffeff 	.word	0xfffffeff
 8001988:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800198c:	4b14      	ldr	r3, [pc, #80]	@ (80019e0 <HAL_RCC_OscConfig+0x3bc>)
 800198e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001990:	2202      	movs	r2, #2
 8001992:	4013      	ands	r3, r2
 8001994:	d0dc      	beq.n	8001950 <HAL_RCC_OscConfig+0x32c>
 8001996:	e013      	b.n	80019c0 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001998:	f7ff fb22 	bl	8000fe0 <HAL_GetTick>
 800199c:	0003      	movs	r3, r0
 800199e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80019a0:	e009      	b.n	80019b6 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019a2:	f7ff fb1d 	bl	8000fe0 <HAL_GetTick>
 80019a6:	0002      	movs	r2, r0
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	4a0d      	ldr	r2, [pc, #52]	@ (80019e4 <HAL_RCC_OscConfig+0x3c0>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e010      	b.n	80019d8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80019b6:	4b0a      	ldr	r3, [pc, #40]	@ (80019e0 <HAL_RCC_OscConfig+0x3bc>)
 80019b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019ba:	2202      	movs	r2, #2
 80019bc:	4013      	ands	r3, r2
 80019be:	d1f0      	bne.n	80019a2 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80019c0:	230f      	movs	r3, #15
 80019c2:	18fb      	adds	r3, r7, r3
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d105      	bne.n	80019d6 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80019ca:	4b05      	ldr	r3, [pc, #20]	@ (80019e0 <HAL_RCC_OscConfig+0x3bc>)
 80019cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80019ce:	4b04      	ldr	r3, [pc, #16]	@ (80019e0 <HAL_RCC_OscConfig+0x3bc>)
 80019d0:	4905      	ldr	r1, [pc, #20]	@ (80019e8 <HAL_RCC_OscConfig+0x3c4>)
 80019d2:	400a      	ands	r2, r1
 80019d4:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 80019d6:	2300      	movs	r3, #0
}
 80019d8:	0018      	movs	r0, r3
 80019da:	46bd      	mov	sp, r7
 80019dc:	b006      	add	sp, #24
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	40021000 	.word	0x40021000
 80019e4:	00001388 	.word	0x00001388
 80019e8:	efffffff 	.word	0xefffffff

080019ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d101      	bne.n	8001a00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e0df      	b.n	8001bc0 <HAL_RCC_ClockConfig+0x1d4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a00:	4b71      	ldr	r3, [pc, #452]	@ (8001bc8 <HAL_RCC_ClockConfig+0x1dc>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2207      	movs	r2, #7
 8001a06:	4013      	ands	r3, r2
 8001a08:	683a      	ldr	r2, [r7, #0]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d91e      	bls.n	8001a4c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a0e:	4b6e      	ldr	r3, [pc, #440]	@ (8001bc8 <HAL_RCC_ClockConfig+0x1dc>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2207      	movs	r2, #7
 8001a14:	4393      	bics	r3, r2
 8001a16:	0019      	movs	r1, r3
 8001a18:	4b6b      	ldr	r3, [pc, #428]	@ (8001bc8 <HAL_RCC_ClockConfig+0x1dc>)
 8001a1a:	683a      	ldr	r2, [r7, #0]
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a20:	f7ff fade 	bl	8000fe0 <HAL_GetTick>
 8001a24:	0003      	movs	r3, r0
 8001a26:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a28:	e009      	b.n	8001a3e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001a2a:	f7ff fad9 	bl	8000fe0 <HAL_GetTick>
 8001a2e:	0002      	movs	r2, r0
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	4a65      	ldr	r2, [pc, #404]	@ (8001bcc <HAL_RCC_ClockConfig+0x1e0>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e0c0      	b.n	8001bc0 <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a3e:	4b62      	ldr	r3, [pc, #392]	@ (8001bc8 <HAL_RCC_ClockConfig+0x1dc>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2207      	movs	r2, #7
 8001a44:	4013      	ands	r3, r2
 8001a46:	683a      	ldr	r2, [r7, #0]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d1ee      	bne.n	8001a2a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2202      	movs	r2, #2
 8001a52:	4013      	ands	r3, r2
 8001a54:	d017      	beq.n	8001a86 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2204      	movs	r2, #4
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	d008      	beq.n	8001a72 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001a60:	4b5b      	ldr	r3, [pc, #364]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1e4>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	4a5b      	ldr	r2, [pc, #364]	@ (8001bd4 <HAL_RCC_ClockConfig+0x1e8>)
 8001a66:	401a      	ands	r2, r3
 8001a68:	4b59      	ldr	r3, [pc, #356]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1e4>)
 8001a6a:	21b0      	movs	r1, #176	@ 0xb0
 8001a6c:	0109      	lsls	r1, r1, #4
 8001a6e:	430a      	orrs	r2, r1
 8001a70:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a72:	4b57      	ldr	r3, [pc, #348]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1e4>)
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	4a58      	ldr	r2, [pc, #352]	@ (8001bd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001a78:	4013      	ands	r3, r2
 8001a7a:	0019      	movs	r1, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	68da      	ldr	r2, [r3, #12]
 8001a80:	4b53      	ldr	r3, [pc, #332]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1e4>)
 8001a82:	430a      	orrs	r2, r1
 8001a84:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	d04b      	beq.n	8001b28 <HAL_RCC_ClockConfig+0x13c>
#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d107      	bne.n	8001aa8 <HAL_RCC_ClockConfig+0xbc>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a98:	4b4d      	ldr	r3, [pc, #308]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1e4>)
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	2380      	movs	r3, #128	@ 0x80
 8001a9e:	029b      	lsls	r3, r3, #10
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	d11f      	bne.n	8001ae4 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e08b      	b.n	8001bc0 <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d107      	bne.n	8001ac0 <HAL_RCC_ClockConfig+0xd4>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ab0:	4b47      	ldr	r3, [pc, #284]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1e4>)
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	2380      	movs	r3, #128	@ 0x80
 8001ab6:	00db      	lsls	r3, r3, #3
 8001ab8:	4013      	ands	r3, r2
 8001aba:	d113      	bne.n	8001ae4 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e07f      	b.n	8001bc0 <HAL_RCC_ClockConfig+0x1d4>
        return HAL_ERROR;
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	2b03      	cmp	r3, #3
 8001ac6:	d106      	bne.n	8001ad6 <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001ac8:	4b41      	ldr	r3, [pc, #260]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1e4>)
 8001aca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001acc:	2202      	movs	r2, #2
 8001ace:	4013      	ands	r3, r2
 8001ad0:	d108      	bne.n	8001ae4 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e074      	b.n	8001bc0 <HAL_RCC_ClockConfig+0x1d4>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001ad6:	4b3e      	ldr	r3, [pc, #248]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1e4>)
 8001ad8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ada:	2202      	movs	r2, #2
 8001adc:	4013      	ands	r3, r2
 8001ade:	d101      	bne.n	8001ae4 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e06d      	b.n	8001bc0 <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ae4:	4b3a      	ldr	r3, [pc, #232]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1e4>)
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	2207      	movs	r2, #7
 8001aea:	4393      	bics	r3, r2
 8001aec:	0019      	movs	r1, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685a      	ldr	r2, [r3, #4]
 8001af2:	4b37      	ldr	r3, [pc, #220]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1e4>)
 8001af4:	430a      	orrs	r2, r1
 8001af6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001af8:	f7ff fa72 	bl	8000fe0 <HAL_GetTick>
 8001afc:	0003      	movs	r3, r0
 8001afe:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b00:	e009      	b.n	8001b16 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001b02:	f7ff fa6d 	bl	8000fe0 <HAL_GetTick>
 8001b06:	0002      	movs	r2, r0
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	4a2f      	ldr	r2, [pc, #188]	@ (8001bcc <HAL_RCC_ClockConfig+0x1e0>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e054      	b.n	8001bc0 <HAL_RCC_ClockConfig+0x1d4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b16:	4b2e      	ldr	r3, [pc, #184]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1e4>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	2238      	movs	r2, #56	@ 0x38
 8001b1c:	401a      	ands	r2, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	00db      	lsls	r3, r3, #3
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d1ec      	bne.n	8001b02 <HAL_RCC_ClockConfig+0x116>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b28:	4b27      	ldr	r3, [pc, #156]	@ (8001bc8 <HAL_RCC_ClockConfig+0x1dc>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2207      	movs	r2, #7
 8001b2e:	4013      	ands	r3, r2
 8001b30:	683a      	ldr	r2, [r7, #0]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d21e      	bcs.n	8001b74 <HAL_RCC_ClockConfig+0x188>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b36:	4b24      	ldr	r3, [pc, #144]	@ (8001bc8 <HAL_RCC_ClockConfig+0x1dc>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2207      	movs	r2, #7
 8001b3c:	4393      	bics	r3, r2
 8001b3e:	0019      	movs	r1, r3
 8001b40:	4b21      	ldr	r3, [pc, #132]	@ (8001bc8 <HAL_RCC_ClockConfig+0x1dc>)
 8001b42:	683a      	ldr	r2, [r7, #0]
 8001b44:	430a      	orrs	r2, r1
 8001b46:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b48:	f7ff fa4a 	bl	8000fe0 <HAL_GetTick>
 8001b4c:	0003      	movs	r3, r0
 8001b4e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b50:	e009      	b.n	8001b66 <HAL_RCC_ClockConfig+0x17a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001b52:	f7ff fa45 	bl	8000fe0 <HAL_GetTick>
 8001b56:	0002      	movs	r2, r0
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	4a1b      	ldr	r2, [pc, #108]	@ (8001bcc <HAL_RCC_ClockConfig+0x1e0>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_ClockConfig+0x17a>
      {
        return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e02c      	b.n	8001bc0 <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b66:	4b18      	ldr	r3, [pc, #96]	@ (8001bc8 <HAL_RCC_ClockConfig+0x1dc>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2207      	movs	r2, #7
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	683a      	ldr	r2, [r7, #0]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d1ee      	bne.n	8001b52 <HAL_RCC_ClockConfig+0x166>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2204      	movs	r2, #4
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	d009      	beq.n	8001b92 <HAL_RCC_ClockConfig+0x1a6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001b7e:	4b14      	ldr	r3, [pc, #80]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1e4>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	4a16      	ldr	r2, [pc, #88]	@ (8001bdc <HAL_RCC_ClockConfig+0x1f0>)
 8001b84:	4013      	ands	r3, r2
 8001b86:	0019      	movs	r1, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	691a      	ldr	r2, [r3, #16]
 8001b8c:	4b10      	ldr	r3, [pc, #64]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1e4>)
 8001b8e:	430a      	orrs	r2, r1
 8001b90:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001b92:	f000 f82b 	bl	8001bec <HAL_RCC_GetSysClockFreq>
 8001b96:	0001      	movs	r1, r0
 8001b98:	4b0d      	ldr	r3, [pc, #52]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1e4>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001b9c:	0a1b      	lsrs	r3, r3, #8
 8001b9e:	220f      	movs	r2, #15
 8001ba0:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001ba2:	4b0f      	ldr	r3, [pc, #60]	@ (8001be0 <HAL_RCC_ClockConfig+0x1f4>)
 8001ba4:	0092      	lsls	r2, r2, #2
 8001ba6:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001ba8:	221f      	movs	r2, #31
 8001baa:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001bac:	000a      	movs	r2, r1
 8001bae:	40da      	lsrs	r2, r3
 8001bb0:	4b0c      	ldr	r3, [pc, #48]	@ (8001be4 <HAL_RCC_ClockConfig+0x1f8>)
 8001bb2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8001be8 <HAL_RCC_ClockConfig+0x1fc>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	0018      	movs	r0, r3
 8001bba:	f7ff f9b5 	bl	8000f28 <HAL_InitTick>
 8001bbe:	0003      	movs	r3, r0
}
 8001bc0:	0018      	movs	r0, r3
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	b004      	add	sp, #16
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	40022000 	.word	0x40022000
 8001bcc:	00001388 	.word	0x00001388
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	ffff84ff 	.word	0xffff84ff
 8001bd8:	fffff0ff 	.word	0xfffff0ff
 8001bdc:	ffff8fff 	.word	0xffff8fff
 8001be0:	08003494 	.word	0x08003494
 8001be4:	20000008 	.word	0x20000008
 8001be8:	20000024 	.word	0x20000024

08001bec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001bf2:	4b1c      	ldr	r3, [pc, #112]	@ (8001c64 <HAL_RCC_GetSysClockFreq+0x78>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	2238      	movs	r2, #56	@ 0x38
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	d10f      	bne.n	8001c1c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001bfc:	4b19      	ldr	r3, [pc, #100]	@ (8001c64 <HAL_RCC_GetSysClockFreq+0x78>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	0adb      	lsrs	r3, r3, #11
 8001c02:	2207      	movs	r2, #7
 8001c04:	4013      	ands	r3, r2
 8001c06:	2201      	movs	r2, #1
 8001c08:	409a      	lsls	r2, r3
 8001c0a:	0013      	movs	r3, r2
 8001c0c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001c0e:	6839      	ldr	r1, [r7, #0]
 8001c10:	4815      	ldr	r0, [pc, #84]	@ (8001c68 <HAL_RCC_GetSysClockFreq+0x7c>)
 8001c12:	f7fe fa79 	bl	8000108 <__udivsi3>
 8001c16:	0003      	movs	r3, r0
 8001c18:	607b      	str	r3, [r7, #4]
 8001c1a:	e01e      	b.n	8001c5a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001c1c:	4b11      	ldr	r3, [pc, #68]	@ (8001c64 <HAL_RCC_GetSysClockFreq+0x78>)
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	2238      	movs	r2, #56	@ 0x38
 8001c22:	4013      	ands	r3, r2
 8001c24:	2b08      	cmp	r3, #8
 8001c26:	d102      	bne.n	8001c2e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c28:	4b0f      	ldr	r3, [pc, #60]	@ (8001c68 <HAL_RCC_GetSysClockFreq+0x7c>)
 8001c2a:	607b      	str	r3, [r7, #4]
 8001c2c:	e015      	b.n	8001c5a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8001c64 <HAL_RCC_GetSysClockFreq+0x78>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	2238      	movs	r2, #56	@ 0x38
 8001c34:	4013      	ands	r3, r2
 8001c36:	2b20      	cmp	r3, #32
 8001c38:	d103      	bne.n	8001c42 <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001c3a:	2380      	movs	r3, #128	@ 0x80
 8001c3c:	021b      	lsls	r3, r3, #8
 8001c3e:	607b      	str	r3, [r7, #4]
 8001c40:	e00b      	b.n	8001c5a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001c42:	4b08      	ldr	r3, [pc, #32]	@ (8001c64 <HAL_RCC_GetSysClockFreq+0x78>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	2238      	movs	r2, #56	@ 0x38
 8001c48:	4013      	ands	r3, r2
 8001c4a:	2b18      	cmp	r3, #24
 8001c4c:	d103      	bne.n	8001c56 <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001c4e:	23fa      	movs	r3, #250	@ 0xfa
 8001c50:	01db      	lsls	r3, r3, #7
 8001c52:	607b      	str	r3, [r7, #4]
 8001c54:	e001      	b.n	8001c5a <HAL_RCC_GetSysClockFreq+0x6e>
    sysclockfreq = HSI48_VALUE;
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 8001c56:	2300      	movs	r3, #0
 8001c58:	607b      	str	r3, [r7, #4]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 8001c5a:	687b      	ldr	r3, [r7, #4]
}
 8001c5c:	0018      	movs	r0, r3
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	b002      	add	sp, #8
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40021000 	.word	0x40021000
 8001c68:	02dc6c00 	.word	0x02dc6c00

08001c6c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001c70:	f7ff ffbc 	bl	8001bec <HAL_RCC_GetSysClockFreq>
 8001c74:	0001      	movs	r1, r0
 8001c76:	4b09      	ldr	r3, [pc, #36]	@ (8001c9c <HAL_RCC_GetHCLKFreq+0x30>)
 8001c78:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001c7a:	0a1b      	lsrs	r3, r3, #8
 8001c7c:	220f      	movs	r2, #15
 8001c7e:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001c80:	4b07      	ldr	r3, [pc, #28]	@ (8001ca0 <HAL_RCC_GetHCLKFreq+0x34>)
 8001c82:	0092      	lsls	r2, r2, #2
 8001c84:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001c86:	221f      	movs	r2, #31
 8001c88:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001c8a:	000a      	movs	r2, r1
 8001c8c:	40da      	lsrs	r2, r3
 8001c8e:	4b05      	ldr	r3, [pc, #20]	@ (8001ca4 <HAL_RCC_GetHCLKFreq+0x38>)
 8001c90:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 8001c92:	4b04      	ldr	r3, [pc, #16]	@ (8001ca4 <HAL_RCC_GetHCLKFreq+0x38>)
 8001c94:	681b      	ldr	r3, [r3, #0]
}
 8001c96:	0018      	movs	r0, r3
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	08003494 	.word	0x08003494
 8001ca4:	20000008 	.word	0x20000008

08001ca8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8001cac:	f7ff ffde 	bl	8001c6c <HAL_RCC_GetHCLKFreq>
 8001cb0:	0001      	movs	r1, r0
 8001cb2:	4b07      	ldr	r3, [pc, #28]	@ (8001cd0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	0b1b      	lsrs	r3, r3, #12
 8001cb8:	2207      	movs	r2, #7
 8001cba:	401a      	ands	r2, r3
 8001cbc:	4b05      	ldr	r3, [pc, #20]	@ (8001cd4 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001cbe:	0092      	lsls	r2, r2, #2
 8001cc0:	58d3      	ldr	r3, [r2, r3]
 8001cc2:	221f      	movs	r2, #31
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	40d9      	lsrs	r1, r3
 8001cc8:	000b      	movs	r3, r1
}
 8001cca:	0018      	movs	r0, r3
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	080034d4 	.word	0x080034d4

08001cd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d101      	bne.n	8001cea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e04a      	b.n	8001d80 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	223d      	movs	r2, #61	@ 0x3d
 8001cee:	5c9b      	ldrb	r3, [r3, r2]
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d107      	bne.n	8001d06 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	223c      	movs	r2, #60	@ 0x3c
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	0018      	movs	r0, r3
 8001d02:	f7fe fe6d 	bl	80009e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	223d      	movs	r2, #61	@ 0x3d
 8001d0a:	2102      	movs	r1, #2
 8001d0c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	3304      	adds	r3, #4
 8001d16:	0019      	movs	r1, r3
 8001d18:	0010      	movs	r0, r2
 8001d1a:	f000 fb43 	bl	80023a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2248      	movs	r2, #72	@ 0x48
 8001d22:	2101      	movs	r1, #1
 8001d24:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	223e      	movs	r2, #62	@ 0x3e
 8001d2a:	2101      	movs	r1, #1
 8001d2c:	5499      	strb	r1, [r3, r2]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	223f      	movs	r2, #63	@ 0x3f
 8001d32:	2101      	movs	r1, #1
 8001d34:	5499      	strb	r1, [r3, r2]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2240      	movs	r2, #64	@ 0x40
 8001d3a:	2101      	movs	r1, #1
 8001d3c:	5499      	strb	r1, [r3, r2]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2241      	movs	r2, #65	@ 0x41
 8001d42:	2101      	movs	r1, #1
 8001d44:	5499      	strb	r1, [r3, r2]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2242      	movs	r2, #66	@ 0x42
 8001d4a:	2101      	movs	r1, #1
 8001d4c:	5499      	strb	r1, [r3, r2]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2243      	movs	r2, #67	@ 0x43
 8001d52:	2101      	movs	r1, #1
 8001d54:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2244      	movs	r2, #68	@ 0x44
 8001d5a:	2101      	movs	r1, #1
 8001d5c:	5499      	strb	r1, [r3, r2]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2245      	movs	r2, #69	@ 0x45
 8001d62:	2101      	movs	r1, #1
 8001d64:	5499      	strb	r1, [r3, r2]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2246      	movs	r2, #70	@ 0x46
 8001d6a:	2101      	movs	r1, #1
 8001d6c:	5499      	strb	r1, [r3, r2]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2247      	movs	r2, #71	@ 0x47
 8001d72:	2101      	movs	r1, #1
 8001d74:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	223d      	movs	r2, #61	@ 0x3d
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d7e:	2300      	movs	r3, #0
}
 8001d80:	0018      	movs	r0, r3
 8001d82:	46bd      	mov	sp, r7
 8001d84:	b002      	add	sp, #8
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e04a      	b.n	8001e30 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	223d      	movs	r2, #61	@ 0x3d
 8001d9e:	5c9b      	ldrb	r3, [r3, r2]
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d107      	bne.n	8001db6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	223c      	movs	r2, #60	@ 0x3c
 8001daa:	2100      	movs	r1, #0
 8001dac:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	0018      	movs	r0, r3
 8001db2:	f000 f841 	bl	8001e38 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	223d      	movs	r2, #61	@ 0x3d
 8001dba:	2102      	movs	r1, #2
 8001dbc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	3304      	adds	r3, #4
 8001dc6:	0019      	movs	r1, r3
 8001dc8:	0010      	movs	r0, r2
 8001dca:	f000 faeb 	bl	80023a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2248      	movs	r2, #72	@ 0x48
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	223e      	movs	r2, #62	@ 0x3e
 8001dda:	2101      	movs	r1, #1
 8001ddc:	5499      	strb	r1, [r3, r2]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	223f      	movs	r2, #63	@ 0x3f
 8001de2:	2101      	movs	r1, #1
 8001de4:	5499      	strb	r1, [r3, r2]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2240      	movs	r2, #64	@ 0x40
 8001dea:	2101      	movs	r1, #1
 8001dec:	5499      	strb	r1, [r3, r2]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2241      	movs	r2, #65	@ 0x41
 8001df2:	2101      	movs	r1, #1
 8001df4:	5499      	strb	r1, [r3, r2]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2242      	movs	r2, #66	@ 0x42
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	5499      	strb	r1, [r3, r2]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2243      	movs	r2, #67	@ 0x43
 8001e02:	2101      	movs	r1, #1
 8001e04:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2244      	movs	r2, #68	@ 0x44
 8001e0a:	2101      	movs	r1, #1
 8001e0c:	5499      	strb	r1, [r3, r2]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2245      	movs	r2, #69	@ 0x45
 8001e12:	2101      	movs	r1, #1
 8001e14:	5499      	strb	r1, [r3, r2]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2246      	movs	r2, #70	@ 0x46
 8001e1a:	2101      	movs	r1, #1
 8001e1c:	5499      	strb	r1, [r3, r2]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2247      	movs	r2, #71	@ 0x47
 8001e22:	2101      	movs	r1, #1
 8001e24:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	223d      	movs	r2, #61	@ 0x3d
 8001e2a:	2101      	movs	r1, #1
 8001e2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e2e:	2300      	movs	r3, #0
}
 8001e30:	0018      	movs	r0, r3
 8001e32:	46bd      	mov	sp, r7
 8001e34:	b002      	add	sp, #8
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001e40:	46c0      	nop			@ (mov r8, r8)
 8001e42:	46bd      	mov	sp, r7
 8001e44:	b002      	add	sp, #8
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d108      	bne.n	8001e6a <HAL_TIM_PWM_Start+0x22>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	223e      	movs	r2, #62	@ 0x3e
 8001e5c:	5c9b      	ldrb	r3, [r3, r2]
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	3b01      	subs	r3, #1
 8001e62:	1e5a      	subs	r2, r3, #1
 8001e64:	4193      	sbcs	r3, r2
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	e037      	b.n	8001eda <HAL_TIM_PWM_Start+0x92>
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	2b04      	cmp	r3, #4
 8001e6e:	d108      	bne.n	8001e82 <HAL_TIM_PWM_Start+0x3a>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	223f      	movs	r2, #63	@ 0x3f
 8001e74:	5c9b      	ldrb	r3, [r3, r2]
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	3b01      	subs	r3, #1
 8001e7a:	1e5a      	subs	r2, r3, #1
 8001e7c:	4193      	sbcs	r3, r2
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	e02b      	b.n	8001eda <HAL_TIM_PWM_Start+0x92>
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	2b08      	cmp	r3, #8
 8001e86:	d108      	bne.n	8001e9a <HAL_TIM_PWM_Start+0x52>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2240      	movs	r2, #64	@ 0x40
 8001e8c:	5c9b      	ldrb	r3, [r3, r2]
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	3b01      	subs	r3, #1
 8001e92:	1e5a      	subs	r2, r3, #1
 8001e94:	4193      	sbcs	r3, r2
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	e01f      	b.n	8001eda <HAL_TIM_PWM_Start+0x92>
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	2b0c      	cmp	r3, #12
 8001e9e:	d108      	bne.n	8001eb2 <HAL_TIM_PWM_Start+0x6a>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2241      	movs	r2, #65	@ 0x41
 8001ea4:	5c9b      	ldrb	r3, [r3, r2]
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	3b01      	subs	r3, #1
 8001eaa:	1e5a      	subs	r2, r3, #1
 8001eac:	4193      	sbcs	r3, r2
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	e013      	b.n	8001eda <HAL_TIM_PWM_Start+0x92>
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	2b10      	cmp	r3, #16
 8001eb6:	d108      	bne.n	8001eca <HAL_TIM_PWM_Start+0x82>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2242      	movs	r2, #66	@ 0x42
 8001ebc:	5c9b      	ldrb	r3, [r3, r2]
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	3b01      	subs	r3, #1
 8001ec2:	1e5a      	subs	r2, r3, #1
 8001ec4:	4193      	sbcs	r3, r2
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	e007      	b.n	8001eda <HAL_TIM_PWM_Start+0x92>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2243      	movs	r2, #67	@ 0x43
 8001ece:	5c9b      	ldrb	r3, [r3, r2]
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	1e5a      	subs	r2, r3, #1
 8001ed6:	4193      	sbcs	r3, r2
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e07b      	b.n	8001fda <HAL_TIM_PWM_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d104      	bne.n	8001ef2 <HAL_TIM_PWM_Start+0xaa>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	223e      	movs	r2, #62	@ 0x3e
 8001eec:	2102      	movs	r1, #2
 8001eee:	5499      	strb	r1, [r3, r2]
 8001ef0:	e023      	b.n	8001f3a <HAL_TIM_PWM_Start+0xf2>
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	2b04      	cmp	r3, #4
 8001ef6:	d104      	bne.n	8001f02 <HAL_TIM_PWM_Start+0xba>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	223f      	movs	r2, #63	@ 0x3f
 8001efc:	2102      	movs	r1, #2
 8001efe:	5499      	strb	r1, [r3, r2]
 8001f00:	e01b      	b.n	8001f3a <HAL_TIM_PWM_Start+0xf2>
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	2b08      	cmp	r3, #8
 8001f06:	d104      	bne.n	8001f12 <HAL_TIM_PWM_Start+0xca>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2240      	movs	r2, #64	@ 0x40
 8001f0c:	2102      	movs	r1, #2
 8001f0e:	5499      	strb	r1, [r3, r2]
 8001f10:	e013      	b.n	8001f3a <HAL_TIM_PWM_Start+0xf2>
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	2b0c      	cmp	r3, #12
 8001f16:	d104      	bne.n	8001f22 <HAL_TIM_PWM_Start+0xda>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2241      	movs	r2, #65	@ 0x41
 8001f1c:	2102      	movs	r1, #2
 8001f1e:	5499      	strb	r1, [r3, r2]
 8001f20:	e00b      	b.n	8001f3a <HAL_TIM_PWM_Start+0xf2>
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	2b10      	cmp	r3, #16
 8001f26:	d104      	bne.n	8001f32 <HAL_TIM_PWM_Start+0xea>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2242      	movs	r2, #66	@ 0x42
 8001f2c:	2102      	movs	r1, #2
 8001f2e:	5499      	strb	r1, [r3, r2]
 8001f30:	e003      	b.n	8001f3a <HAL_TIM_PWM_Start+0xf2>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2243      	movs	r2, #67	@ 0x43
 8001f36:	2102      	movs	r1, #2
 8001f38:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	6839      	ldr	r1, [r7, #0]
 8001f40:	2201      	movs	r2, #1
 8001f42:	0018      	movs	r0, r3
 8001f44:	f000 fdd8 	bl	8002af8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a25      	ldr	r2, [pc, #148]	@ (8001fe4 <HAL_TIM_PWM_Start+0x19c>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d009      	beq.n	8001f66 <HAL_TIM_PWM_Start+0x11e>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a24      	ldr	r2, [pc, #144]	@ (8001fe8 <HAL_TIM_PWM_Start+0x1a0>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d004      	beq.n	8001f66 <HAL_TIM_PWM_Start+0x11e>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a22      	ldr	r2, [pc, #136]	@ (8001fec <HAL_TIM_PWM_Start+0x1a4>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d101      	bne.n	8001f6a <HAL_TIM_PWM_Start+0x122>
 8001f66:	2301      	movs	r3, #1
 8001f68:	e000      	b.n	8001f6c <HAL_TIM_PWM_Start+0x124>
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d008      	beq.n	8001f82 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2180      	movs	r1, #128	@ 0x80
 8001f7c:	0209      	lsls	r1, r1, #8
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a17      	ldr	r2, [pc, #92]	@ (8001fe4 <HAL_TIM_PWM_Start+0x19c>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d004      	beq.n	8001f96 <HAL_TIM_PWM_Start+0x14e>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a17      	ldr	r2, [pc, #92]	@ (8001ff0 <HAL_TIM_PWM_Start+0x1a8>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d116      	bne.n	8001fc4 <HAL_TIM_PWM_Start+0x17c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	4a15      	ldr	r2, [pc, #84]	@ (8001ff4 <HAL_TIM_PWM_Start+0x1ac>)
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2b06      	cmp	r3, #6
 8001fa6:	d016      	beq.n	8001fd6 <HAL_TIM_PWM_Start+0x18e>
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	2380      	movs	r3, #128	@ 0x80
 8001fac:	025b      	lsls	r3, r3, #9
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d011      	beq.n	8001fd6 <HAL_TIM_PWM_Start+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2101      	movs	r1, #1
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fc2:	e008      	b.n	8001fd6 <HAL_TIM_PWM_Start+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2101      	movs	r1, #1
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	e000      	b.n	8001fd8 <HAL_TIM_PWM_Start+0x190>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fd6:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	0018      	movs	r0, r3
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	b004      	add	sp, #16
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	46c0      	nop			@ (mov r8, r8)
 8001fe4:	40012c00 	.word	0x40012c00
 8001fe8:	40014400 	.word	0x40014400
 8001fec:	40014800 	.word	0x40014800
 8001ff0:	40000400 	.word	0x40000400
 8001ff4:	00010007 	.word	0x00010007

08001ff8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b086      	sub	sp, #24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002004:	2317      	movs	r3, #23
 8002006:	18fb      	adds	r3, r7, r3
 8002008:	2200      	movs	r2, #0
 800200a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	223c      	movs	r2, #60	@ 0x3c
 8002010:	5c9b      	ldrb	r3, [r3, r2]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d101      	bne.n	800201a <HAL_TIM_PWM_ConfigChannel+0x22>
 8002016:	2302      	movs	r3, #2
 8002018:	e0e5      	b.n	80021e6 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	223c      	movs	r2, #60	@ 0x3c
 800201e:	2101      	movs	r1, #1
 8002020:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2b14      	cmp	r3, #20
 8002026:	d900      	bls.n	800202a <HAL_TIM_PWM_ConfigChannel+0x32>
 8002028:	e0d1      	b.n	80021ce <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	009a      	lsls	r2, r3, #2
 800202e:	4b70      	ldr	r3, [pc, #448]	@ (80021f0 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8002030:	18d3      	adds	r3, r2, r3
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	68ba      	ldr	r2, [r7, #8]
 800203c:	0011      	movs	r1, r2
 800203e:	0018      	movs	r0, r3
 8002040:	f000 fa22 	bl	8002488 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	699a      	ldr	r2, [r3, #24]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2108      	movs	r1, #8
 8002050:	430a      	orrs	r2, r1
 8002052:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	699a      	ldr	r2, [r3, #24]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2104      	movs	r1, #4
 8002060:	438a      	bics	r2, r1
 8002062:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	6999      	ldr	r1, [r3, #24]
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	691a      	ldr	r2, [r3, #16]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	430a      	orrs	r2, r1
 8002074:	619a      	str	r2, [r3, #24]
      break;
 8002076:	e0af      	b.n	80021d8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	68ba      	ldr	r2, [r7, #8]
 800207e:	0011      	movs	r1, r2
 8002080:	0018      	movs	r0, r3
 8002082:	f000 fa81 	bl	8002588 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	699a      	ldr	r2, [r3, #24]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2180      	movs	r1, #128	@ 0x80
 8002092:	0109      	lsls	r1, r1, #4
 8002094:	430a      	orrs	r2, r1
 8002096:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	699a      	ldr	r2, [r3, #24]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4954      	ldr	r1, [pc, #336]	@ (80021f4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80020a4:	400a      	ands	r2, r1
 80020a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6999      	ldr	r1, [r3, #24]
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	021a      	lsls	r2, r3, #8
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	430a      	orrs	r2, r1
 80020ba:	619a      	str	r2, [r3, #24]
      break;
 80020bc:	e08c      	b.n	80021d8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	68ba      	ldr	r2, [r7, #8]
 80020c4:	0011      	movs	r1, r2
 80020c6:	0018      	movs	r0, r3
 80020c8:	f000 fadc 	bl	8002684 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	69da      	ldr	r2, [r3, #28]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2108      	movs	r1, #8
 80020d8:	430a      	orrs	r2, r1
 80020da:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	69da      	ldr	r2, [r3, #28]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2104      	movs	r1, #4
 80020e8:	438a      	bics	r2, r1
 80020ea:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	69d9      	ldr	r1, [r3, #28]
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	691a      	ldr	r2, [r3, #16]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	430a      	orrs	r2, r1
 80020fc:	61da      	str	r2, [r3, #28]
      break;
 80020fe:	e06b      	b.n	80021d8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	68ba      	ldr	r2, [r7, #8]
 8002106:	0011      	movs	r1, r2
 8002108:	0018      	movs	r0, r3
 800210a:	f000 fb3d 	bl	8002788 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	69da      	ldr	r2, [r3, #28]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2180      	movs	r1, #128	@ 0x80
 800211a:	0109      	lsls	r1, r1, #4
 800211c:	430a      	orrs	r2, r1
 800211e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	69da      	ldr	r2, [r3, #28]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4932      	ldr	r1, [pc, #200]	@ (80021f4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800212c:	400a      	ands	r2, r1
 800212e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	69d9      	ldr	r1, [r3, #28]
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	021a      	lsls	r2, r3, #8
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	430a      	orrs	r2, r1
 8002142:	61da      	str	r2, [r3, #28]
      break;
 8002144:	e048      	b.n	80021d8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68ba      	ldr	r2, [r7, #8]
 800214c:	0011      	movs	r1, r2
 800214e:	0018      	movs	r0, r3
 8002150:	f000 fb7e 	bl	8002850 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	2108      	movs	r1, #8
 8002160:	430a      	orrs	r2, r1
 8002162:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2104      	movs	r1, #4
 8002170:	438a      	bics	r2, r1
 8002172:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	691a      	ldr	r2, [r3, #16]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	430a      	orrs	r2, r1
 8002184:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002186:	e027      	b.n	80021d8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	68ba      	ldr	r2, [r7, #8]
 800218e:	0011      	movs	r1, r2
 8002190:	0018      	movs	r0, r3
 8002192:	f000 fbb7 	bl	8002904 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2180      	movs	r1, #128	@ 0x80
 80021a2:	0109      	lsls	r1, r1, #4
 80021a4:	430a      	orrs	r2, r1
 80021a6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4910      	ldr	r1, [pc, #64]	@ (80021f4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80021b4:	400a      	ands	r2, r1
 80021b6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	021a      	lsls	r2, r3, #8
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	430a      	orrs	r2, r1
 80021ca:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80021cc:	e004      	b.n	80021d8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80021ce:	2317      	movs	r3, #23
 80021d0:	18fb      	adds	r3, r7, r3
 80021d2:	2201      	movs	r2, #1
 80021d4:	701a      	strb	r2, [r3, #0]
      break;
 80021d6:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	223c      	movs	r2, #60	@ 0x3c
 80021dc:	2100      	movs	r1, #0
 80021de:	5499      	strb	r1, [r3, r2]

  return status;
 80021e0:	2317      	movs	r3, #23
 80021e2:	18fb      	adds	r3, r7, r3
 80021e4:	781b      	ldrb	r3, [r3, #0]
}
 80021e6:	0018      	movs	r0, r3
 80021e8:	46bd      	mov	sp, r7
 80021ea:	b006      	add	sp, #24
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	46c0      	nop			@ (mov r8, r8)
 80021f0:	080034fc 	.word	0x080034fc
 80021f4:	fffffbff 	.word	0xfffffbff

080021f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002202:	230f      	movs	r3, #15
 8002204:	18fb      	adds	r3, r7, r3
 8002206:	2200      	movs	r2, #0
 8002208:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	223c      	movs	r2, #60	@ 0x3c
 800220e:	5c9b      	ldrb	r3, [r3, r2]
 8002210:	2b01      	cmp	r3, #1
 8002212:	d101      	bne.n	8002218 <HAL_TIM_ConfigClockSource+0x20>
 8002214:	2302      	movs	r3, #2
 8002216:	e0bc      	b.n	8002392 <HAL_TIM_ConfigClockSource+0x19a>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	223c      	movs	r2, #60	@ 0x3c
 800221c:	2101      	movs	r1, #1
 800221e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	223d      	movs	r2, #61	@ 0x3d
 8002224:	2102      	movs	r1, #2
 8002226:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	4a5a      	ldr	r2, [pc, #360]	@ (800239c <HAL_TIM_ConfigClockSource+0x1a4>)
 8002234:	4013      	ands	r3, r2
 8002236:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	4a59      	ldr	r2, [pc, #356]	@ (80023a0 <HAL_TIM_ConfigClockSource+0x1a8>)
 800223c:	4013      	ands	r3, r2
 800223e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68ba      	ldr	r2, [r7, #8]
 8002246:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2280      	movs	r2, #128	@ 0x80
 800224e:	0192      	lsls	r2, r2, #6
 8002250:	4293      	cmp	r3, r2
 8002252:	d040      	beq.n	80022d6 <HAL_TIM_ConfigClockSource+0xde>
 8002254:	2280      	movs	r2, #128	@ 0x80
 8002256:	0192      	lsls	r2, r2, #6
 8002258:	4293      	cmp	r3, r2
 800225a:	d900      	bls.n	800225e <HAL_TIM_ConfigClockSource+0x66>
 800225c:	e088      	b.n	8002370 <HAL_TIM_ConfigClockSource+0x178>
 800225e:	2280      	movs	r2, #128	@ 0x80
 8002260:	0152      	lsls	r2, r2, #5
 8002262:	4293      	cmp	r3, r2
 8002264:	d100      	bne.n	8002268 <HAL_TIM_ConfigClockSource+0x70>
 8002266:	e088      	b.n	800237a <HAL_TIM_ConfigClockSource+0x182>
 8002268:	2280      	movs	r2, #128	@ 0x80
 800226a:	0152      	lsls	r2, r2, #5
 800226c:	4293      	cmp	r3, r2
 800226e:	d900      	bls.n	8002272 <HAL_TIM_ConfigClockSource+0x7a>
 8002270:	e07e      	b.n	8002370 <HAL_TIM_ConfigClockSource+0x178>
 8002272:	2b70      	cmp	r3, #112	@ 0x70
 8002274:	d018      	beq.n	80022a8 <HAL_TIM_ConfigClockSource+0xb0>
 8002276:	d900      	bls.n	800227a <HAL_TIM_ConfigClockSource+0x82>
 8002278:	e07a      	b.n	8002370 <HAL_TIM_ConfigClockSource+0x178>
 800227a:	2b60      	cmp	r3, #96	@ 0x60
 800227c:	d04f      	beq.n	800231e <HAL_TIM_ConfigClockSource+0x126>
 800227e:	d900      	bls.n	8002282 <HAL_TIM_ConfigClockSource+0x8a>
 8002280:	e076      	b.n	8002370 <HAL_TIM_ConfigClockSource+0x178>
 8002282:	2b50      	cmp	r3, #80	@ 0x50
 8002284:	d03b      	beq.n	80022fe <HAL_TIM_ConfigClockSource+0x106>
 8002286:	d900      	bls.n	800228a <HAL_TIM_ConfigClockSource+0x92>
 8002288:	e072      	b.n	8002370 <HAL_TIM_ConfigClockSource+0x178>
 800228a:	2b40      	cmp	r3, #64	@ 0x40
 800228c:	d057      	beq.n	800233e <HAL_TIM_ConfigClockSource+0x146>
 800228e:	d900      	bls.n	8002292 <HAL_TIM_ConfigClockSource+0x9a>
 8002290:	e06e      	b.n	8002370 <HAL_TIM_ConfigClockSource+0x178>
 8002292:	2b30      	cmp	r3, #48	@ 0x30
 8002294:	d063      	beq.n	800235e <HAL_TIM_ConfigClockSource+0x166>
 8002296:	d86b      	bhi.n	8002370 <HAL_TIM_ConfigClockSource+0x178>
 8002298:	2b20      	cmp	r3, #32
 800229a:	d060      	beq.n	800235e <HAL_TIM_ConfigClockSource+0x166>
 800229c:	d868      	bhi.n	8002370 <HAL_TIM_ConfigClockSource+0x178>
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d05d      	beq.n	800235e <HAL_TIM_ConfigClockSource+0x166>
 80022a2:	2b10      	cmp	r3, #16
 80022a4:	d05b      	beq.n	800235e <HAL_TIM_ConfigClockSource+0x166>
 80022a6:	e063      	b.n	8002370 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80022b8:	f000 fbfe 	bl	8002ab8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	2277      	movs	r2, #119	@ 0x77
 80022c8:	4313      	orrs	r3, r2
 80022ca:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	68ba      	ldr	r2, [r7, #8]
 80022d2:	609a      	str	r2, [r3, #8]
      break;
 80022d4:	e052      	b.n	800237c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80022e6:	f000 fbe7 	bl	8002ab8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	689a      	ldr	r2, [r3, #8]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2180      	movs	r1, #128	@ 0x80
 80022f6:	01c9      	lsls	r1, r1, #7
 80022f8:	430a      	orrs	r2, r1
 80022fa:	609a      	str	r2, [r3, #8]
      break;
 80022fc:	e03e      	b.n	800237c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800230a:	001a      	movs	r2, r3
 800230c:	f000 fb58 	bl	80029c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2150      	movs	r1, #80	@ 0x50
 8002316:	0018      	movs	r0, r3
 8002318:	f000 fbb2 	bl	8002a80 <TIM_ITRx_SetConfig>
      break;
 800231c:	e02e      	b.n	800237c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800232a:	001a      	movs	r2, r3
 800232c:	f000 fb76 	bl	8002a1c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2160      	movs	r1, #96	@ 0x60
 8002336:	0018      	movs	r0, r3
 8002338:	f000 fba2 	bl	8002a80 <TIM_ITRx_SetConfig>
      break;
 800233c:	e01e      	b.n	800237c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800234a:	001a      	movs	r2, r3
 800234c:	f000 fb38 	bl	80029c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2140      	movs	r1, #64	@ 0x40
 8002356:	0018      	movs	r0, r3
 8002358:	f000 fb92 	bl	8002a80 <TIM_ITRx_SetConfig>
      break;
 800235c:	e00e      	b.n	800237c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	0019      	movs	r1, r3
 8002368:	0010      	movs	r0, r2
 800236a:	f000 fb89 	bl	8002a80 <TIM_ITRx_SetConfig>
      break;
 800236e:	e005      	b.n	800237c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002370:	230f      	movs	r3, #15
 8002372:	18fb      	adds	r3, r7, r3
 8002374:	2201      	movs	r2, #1
 8002376:	701a      	strb	r2, [r3, #0]
      break;
 8002378:	e000      	b.n	800237c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800237a:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	223d      	movs	r2, #61	@ 0x3d
 8002380:	2101      	movs	r1, #1
 8002382:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	223c      	movs	r2, #60	@ 0x3c
 8002388:	2100      	movs	r1, #0
 800238a:	5499      	strb	r1, [r3, r2]

  return status;
 800238c:	230f      	movs	r3, #15
 800238e:	18fb      	adds	r3, r7, r3
 8002390:	781b      	ldrb	r3, [r3, #0]
}
 8002392:	0018      	movs	r0, r3
 8002394:	46bd      	mov	sp, r7
 8002396:	b004      	add	sp, #16
 8002398:	bd80      	pop	{r7, pc}
 800239a:	46c0      	nop			@ (mov r8, r8)
 800239c:	ffceff88 	.word	0xffceff88
 80023a0:	ffff00ff 	.word	0xffff00ff

080023a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4a2e      	ldr	r2, [pc, #184]	@ (8002470 <TIM_Base_SetConfig+0xcc>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d003      	beq.n	80023c4 <TIM_Base_SetConfig+0x20>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4a2d      	ldr	r2, [pc, #180]	@ (8002474 <TIM_Base_SetConfig+0xd0>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d108      	bne.n	80023d6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2270      	movs	r2, #112	@ 0x70
 80023c8:	4393      	bics	r3, r2
 80023ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a25      	ldr	r2, [pc, #148]	@ (8002470 <TIM_Base_SetConfig+0xcc>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d00f      	beq.n	80023fe <TIM_Base_SetConfig+0x5a>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a24      	ldr	r2, [pc, #144]	@ (8002474 <TIM_Base_SetConfig+0xd0>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d00b      	beq.n	80023fe <TIM_Base_SetConfig+0x5a>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a23      	ldr	r2, [pc, #140]	@ (8002478 <TIM_Base_SetConfig+0xd4>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d007      	beq.n	80023fe <TIM_Base_SetConfig+0x5a>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a22      	ldr	r2, [pc, #136]	@ (800247c <TIM_Base_SetConfig+0xd8>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d003      	beq.n	80023fe <TIM_Base_SetConfig+0x5a>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a21      	ldr	r2, [pc, #132]	@ (8002480 <TIM_Base_SetConfig+0xdc>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d108      	bne.n	8002410 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	4a20      	ldr	r2, [pc, #128]	@ (8002484 <TIM_Base_SetConfig+0xe0>)
 8002402:	4013      	ands	r3, r2
 8002404:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	68fa      	ldr	r2, [r7, #12]
 800240c:	4313      	orrs	r3, r2
 800240e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2280      	movs	r2, #128	@ 0x80
 8002414:	4393      	bics	r3, r2
 8002416:	001a      	movs	r2, r3
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	695b      	ldr	r3, [r3, #20]
 800241c:	4313      	orrs	r3, r2
 800241e:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	689a      	ldr	r2, [r3, #8]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	4a0f      	ldr	r2, [pc, #60]	@ (8002470 <TIM_Base_SetConfig+0xcc>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d007      	beq.n	8002448 <TIM_Base_SetConfig+0xa4>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	4a10      	ldr	r2, [pc, #64]	@ (800247c <TIM_Base_SetConfig+0xd8>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d003      	beq.n	8002448 <TIM_Base_SetConfig+0xa4>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	4a0f      	ldr	r2, [pc, #60]	@ (8002480 <TIM_Base_SetConfig+0xdc>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d103      	bne.n	8002450 <TIM_Base_SetConfig+0xac>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	691a      	ldr	r2, [r3, #16]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2204      	movs	r2, #4
 8002456:	431a      	orrs	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	68fa      	ldr	r2, [r7, #12]
 8002466:	601a      	str	r2, [r3, #0]
}
 8002468:	46c0      	nop			@ (mov r8, r8)
 800246a:	46bd      	mov	sp, r7
 800246c:	b004      	add	sp, #16
 800246e:	bd80      	pop	{r7, pc}
 8002470:	40012c00 	.word	0x40012c00
 8002474:	40000400 	.word	0x40000400
 8002478:	40002000 	.word	0x40002000
 800247c:	40014400 	.word	0x40014400
 8002480:	40014800 	.word	0x40014800
 8002484:	fffffcff 	.word	0xfffffcff

08002488 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a1b      	ldr	r3, [r3, #32]
 8002496:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a1b      	ldr	r3, [r3, #32]
 800249c:	2201      	movs	r2, #1
 800249e:	4393      	bics	r3, r2
 80024a0:	001a      	movs	r2, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	4a2e      	ldr	r2, [pc, #184]	@ (8002570 <TIM_OC1_SetConfig+0xe8>)
 80024b6:	4013      	ands	r3, r2
 80024b8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2203      	movs	r2, #3
 80024be:	4393      	bics	r3, r2
 80024c0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	2202      	movs	r2, #2
 80024d0:	4393      	bics	r3, r2
 80024d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	697a      	ldr	r2, [r7, #20]
 80024da:	4313      	orrs	r3, r2
 80024dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a24      	ldr	r2, [pc, #144]	@ (8002574 <TIM_OC1_SetConfig+0xec>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d007      	beq.n	80024f6 <TIM_OC1_SetConfig+0x6e>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a23      	ldr	r2, [pc, #140]	@ (8002578 <TIM_OC1_SetConfig+0xf0>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d003      	beq.n	80024f6 <TIM_OC1_SetConfig+0x6e>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a22      	ldr	r2, [pc, #136]	@ (800257c <TIM_OC1_SetConfig+0xf4>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d10c      	bne.n	8002510 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	2208      	movs	r2, #8
 80024fa:	4393      	bics	r3, r2
 80024fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	697a      	ldr	r2, [r7, #20]
 8002504:	4313      	orrs	r3, r2
 8002506:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	2204      	movs	r2, #4
 800250c:	4393      	bics	r3, r2
 800250e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a18      	ldr	r2, [pc, #96]	@ (8002574 <TIM_OC1_SetConfig+0xec>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d007      	beq.n	8002528 <TIM_OC1_SetConfig+0xa0>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4a17      	ldr	r2, [pc, #92]	@ (8002578 <TIM_OC1_SetConfig+0xf0>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d003      	beq.n	8002528 <TIM_OC1_SetConfig+0xa0>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4a16      	ldr	r2, [pc, #88]	@ (800257c <TIM_OC1_SetConfig+0xf4>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d111      	bne.n	800254c <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	4a15      	ldr	r2, [pc, #84]	@ (8002580 <TIM_OC1_SetConfig+0xf8>)
 800252c:	4013      	ands	r3, r2
 800252e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	4a14      	ldr	r2, [pc, #80]	@ (8002584 <TIM_OC1_SetConfig+0xfc>)
 8002534:	4013      	ands	r3, r2
 8002536:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	695b      	ldr	r3, [r3, #20]
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	4313      	orrs	r3, r2
 8002540:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	699b      	ldr	r3, [r3, #24]
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	4313      	orrs	r3, r2
 800254a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	693a      	ldr	r2, [r7, #16]
 8002550:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	68fa      	ldr	r2, [r7, #12]
 8002556:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685a      	ldr	r2, [r3, #4]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	697a      	ldr	r2, [r7, #20]
 8002564:	621a      	str	r2, [r3, #32]
}
 8002566:	46c0      	nop			@ (mov r8, r8)
 8002568:	46bd      	mov	sp, r7
 800256a:	b006      	add	sp, #24
 800256c:	bd80      	pop	{r7, pc}
 800256e:	46c0      	nop			@ (mov r8, r8)
 8002570:	fffeff8f 	.word	0xfffeff8f
 8002574:	40012c00 	.word	0x40012c00
 8002578:	40014400 	.word	0x40014400
 800257c:	40014800 	.word	0x40014800
 8002580:	fffffeff 	.word	0xfffffeff
 8002584:	fffffdff 	.word	0xfffffdff

08002588 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b086      	sub	sp, #24
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a1b      	ldr	r3, [r3, #32]
 8002596:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a1b      	ldr	r3, [r3, #32]
 800259c:	2210      	movs	r2, #16
 800259e:	4393      	bics	r3, r2
 80025a0:	001a      	movs	r2, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	699b      	ldr	r3, [r3, #24]
 80025b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	4a2c      	ldr	r2, [pc, #176]	@ (8002668 <TIM_OC2_SetConfig+0xe0>)
 80025b6:	4013      	ands	r3, r2
 80025b8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	4a2b      	ldr	r2, [pc, #172]	@ (800266c <TIM_OC2_SetConfig+0xe4>)
 80025be:	4013      	ands	r3, r2
 80025c0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	021b      	lsls	r3, r3, #8
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	2220      	movs	r2, #32
 80025d2:	4393      	bics	r3, r2
 80025d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	011b      	lsls	r3, r3, #4
 80025dc:	697a      	ldr	r2, [r7, #20]
 80025de:	4313      	orrs	r3, r2
 80025e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a22      	ldr	r2, [pc, #136]	@ (8002670 <TIM_OC2_SetConfig+0xe8>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d10d      	bne.n	8002606 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	2280      	movs	r2, #128	@ 0x80
 80025ee:	4393      	bics	r3, r2
 80025f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	011b      	lsls	r3, r3, #4
 80025f8:	697a      	ldr	r2, [r7, #20]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	2240      	movs	r2, #64	@ 0x40
 8002602:	4393      	bics	r3, r2
 8002604:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a19      	ldr	r2, [pc, #100]	@ (8002670 <TIM_OC2_SetConfig+0xe8>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d007      	beq.n	800261e <TIM_OC2_SetConfig+0x96>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a18      	ldr	r2, [pc, #96]	@ (8002674 <TIM_OC2_SetConfig+0xec>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d003      	beq.n	800261e <TIM_OC2_SetConfig+0x96>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a17      	ldr	r2, [pc, #92]	@ (8002678 <TIM_OC2_SetConfig+0xf0>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d113      	bne.n	8002646 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	4a16      	ldr	r2, [pc, #88]	@ (800267c <TIM_OC2_SetConfig+0xf4>)
 8002622:	4013      	ands	r3, r2
 8002624:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	4a15      	ldr	r2, [pc, #84]	@ (8002680 <TIM_OC2_SetConfig+0xf8>)
 800262a:	4013      	ands	r3, r2
 800262c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	693a      	ldr	r2, [r7, #16]
 8002636:	4313      	orrs	r3, r2
 8002638:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	699b      	ldr	r3, [r3, #24]
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	693a      	ldr	r2, [r7, #16]
 8002642:	4313      	orrs	r3, r2
 8002644:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685a      	ldr	r2, [r3, #4]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	697a      	ldr	r2, [r7, #20]
 800265e:	621a      	str	r2, [r3, #32]
}
 8002660:	46c0      	nop			@ (mov r8, r8)
 8002662:	46bd      	mov	sp, r7
 8002664:	b006      	add	sp, #24
 8002666:	bd80      	pop	{r7, pc}
 8002668:	feff8fff 	.word	0xfeff8fff
 800266c:	fffffcff 	.word	0xfffffcff
 8002670:	40012c00 	.word	0x40012c00
 8002674:	40014400 	.word	0x40014400
 8002678:	40014800 	.word	0x40014800
 800267c:	fffffbff 	.word	0xfffffbff
 8002680:	fffff7ff 	.word	0xfffff7ff

08002684 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b086      	sub	sp, #24
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a1b      	ldr	r3, [r3, #32]
 8002692:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a1b      	ldr	r3, [r3, #32]
 8002698:	4a31      	ldr	r2, [pc, #196]	@ (8002760 <TIM_OC3_SetConfig+0xdc>)
 800269a:	401a      	ands	r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	69db      	ldr	r3, [r3, #28]
 80026aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	4a2d      	ldr	r2, [pc, #180]	@ (8002764 <TIM_OC3_SetConfig+0xe0>)
 80026b0:	4013      	ands	r3, r2
 80026b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2203      	movs	r2, #3
 80026b8:	4393      	bics	r3, r2
 80026ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68fa      	ldr	r2, [r7, #12]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	4a27      	ldr	r2, [pc, #156]	@ (8002768 <TIM_OC3_SetConfig+0xe4>)
 80026ca:	4013      	ands	r3, r2
 80026cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	021b      	lsls	r3, r3, #8
 80026d4:	697a      	ldr	r2, [r7, #20]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a23      	ldr	r2, [pc, #140]	@ (800276c <TIM_OC3_SetConfig+0xe8>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d10d      	bne.n	80026fe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	4a22      	ldr	r2, [pc, #136]	@ (8002770 <TIM_OC3_SetConfig+0xec>)
 80026e6:	4013      	ands	r3, r2
 80026e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	021b      	lsls	r3, r3, #8
 80026f0:	697a      	ldr	r2, [r7, #20]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	4a1e      	ldr	r2, [pc, #120]	@ (8002774 <TIM_OC3_SetConfig+0xf0>)
 80026fa:	4013      	ands	r3, r2
 80026fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a1a      	ldr	r2, [pc, #104]	@ (800276c <TIM_OC3_SetConfig+0xe8>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d007      	beq.n	8002716 <TIM_OC3_SetConfig+0x92>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a1b      	ldr	r2, [pc, #108]	@ (8002778 <TIM_OC3_SetConfig+0xf4>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d003      	beq.n	8002716 <TIM_OC3_SetConfig+0x92>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a1a      	ldr	r2, [pc, #104]	@ (800277c <TIM_OC3_SetConfig+0xf8>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d113      	bne.n	800273e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	4a19      	ldr	r2, [pc, #100]	@ (8002780 <TIM_OC3_SetConfig+0xfc>)
 800271a:	4013      	ands	r3, r2
 800271c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	4a18      	ldr	r2, [pc, #96]	@ (8002784 <TIM_OC3_SetConfig+0x100>)
 8002722:	4013      	ands	r3, r2
 8002724:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	011b      	lsls	r3, r3, #4
 800272c:	693a      	ldr	r2, [r7, #16]
 800272e:	4313      	orrs	r3, r2
 8002730:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	011b      	lsls	r3, r3, #4
 8002738:	693a      	ldr	r2, [r7, #16]
 800273a:	4313      	orrs	r3, r2
 800273c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	693a      	ldr	r2, [r7, #16]
 8002742:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	68fa      	ldr	r2, [r7, #12]
 8002748:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	685a      	ldr	r2, [r3, #4]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	697a      	ldr	r2, [r7, #20]
 8002756:	621a      	str	r2, [r3, #32]
}
 8002758:	46c0      	nop			@ (mov r8, r8)
 800275a:	46bd      	mov	sp, r7
 800275c:	b006      	add	sp, #24
 800275e:	bd80      	pop	{r7, pc}
 8002760:	fffffeff 	.word	0xfffffeff
 8002764:	fffeff8f 	.word	0xfffeff8f
 8002768:	fffffdff 	.word	0xfffffdff
 800276c:	40012c00 	.word	0x40012c00
 8002770:	fffff7ff 	.word	0xfffff7ff
 8002774:	fffffbff 	.word	0xfffffbff
 8002778:	40014400 	.word	0x40014400
 800277c:	40014800 	.word	0x40014800
 8002780:	ffffefff 	.word	0xffffefff
 8002784:	ffffdfff 	.word	0xffffdfff

08002788 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b086      	sub	sp, #24
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a1b      	ldr	r3, [r3, #32]
 8002796:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a1b      	ldr	r3, [r3, #32]
 800279c:	4a24      	ldr	r2, [pc, #144]	@ (8002830 <TIM_OC4_SetConfig+0xa8>)
 800279e:	401a      	ands	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	69db      	ldr	r3, [r3, #28]
 80027ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	4a20      	ldr	r2, [pc, #128]	@ (8002834 <TIM_OC4_SetConfig+0xac>)
 80027b4:	4013      	ands	r3, r2
 80027b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	4a1f      	ldr	r2, [pc, #124]	@ (8002838 <TIM_OC4_SetConfig+0xb0>)
 80027bc:	4013      	ands	r3, r2
 80027be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	021b      	lsls	r3, r3, #8
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	4a1b      	ldr	r2, [pc, #108]	@ (800283c <TIM_OC4_SetConfig+0xb4>)
 80027d0:	4013      	ands	r3, r2
 80027d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	031b      	lsls	r3, r3, #12
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	4313      	orrs	r3, r2
 80027de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	4a17      	ldr	r2, [pc, #92]	@ (8002840 <TIM_OC4_SetConfig+0xb8>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d007      	beq.n	80027f8 <TIM_OC4_SetConfig+0x70>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	4a16      	ldr	r2, [pc, #88]	@ (8002844 <TIM_OC4_SetConfig+0xbc>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d003      	beq.n	80027f8 <TIM_OC4_SetConfig+0x70>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	4a15      	ldr	r2, [pc, #84]	@ (8002848 <TIM_OC4_SetConfig+0xc0>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d109      	bne.n	800280c <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	4a14      	ldr	r2, [pc, #80]	@ (800284c <TIM_OC4_SetConfig+0xc4>)
 80027fc:	4013      	ands	r3, r2
 80027fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	695b      	ldr	r3, [r3, #20]
 8002804:	019b      	lsls	r3, r3, #6
 8002806:	697a      	ldr	r2, [r7, #20]
 8002808:	4313      	orrs	r3, r2
 800280a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	697a      	ldr	r2, [r7, #20]
 8002810:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685a      	ldr	r2, [r3, #4]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	621a      	str	r2, [r3, #32]
}
 8002826:	46c0      	nop			@ (mov r8, r8)
 8002828:	46bd      	mov	sp, r7
 800282a:	b006      	add	sp, #24
 800282c:	bd80      	pop	{r7, pc}
 800282e:	46c0      	nop			@ (mov r8, r8)
 8002830:	ffffefff 	.word	0xffffefff
 8002834:	feff8fff 	.word	0xfeff8fff
 8002838:	fffffcff 	.word	0xfffffcff
 800283c:	ffffdfff 	.word	0xffffdfff
 8002840:	40012c00 	.word	0x40012c00
 8002844:	40014400 	.word	0x40014400
 8002848:	40014800 	.word	0x40014800
 800284c:	ffffbfff 	.word	0xffffbfff

08002850 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b086      	sub	sp, #24
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a1b      	ldr	r3, [r3, #32]
 800285e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a1b      	ldr	r3, [r3, #32]
 8002864:	4a21      	ldr	r2, [pc, #132]	@ (80028ec <TIM_OC5_SetConfig+0x9c>)
 8002866:	401a      	ands	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	4a1d      	ldr	r2, [pc, #116]	@ (80028f0 <TIM_OC5_SetConfig+0xa0>)
 800287c:	4013      	ands	r3, r2
 800287e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	4313      	orrs	r3, r2
 8002888:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	4a19      	ldr	r2, [pc, #100]	@ (80028f4 <TIM_OC5_SetConfig+0xa4>)
 800288e:	4013      	ands	r3, r2
 8002890:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	041b      	lsls	r3, r3, #16
 8002898:	693a      	ldr	r2, [r7, #16]
 800289a:	4313      	orrs	r3, r2
 800289c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a15      	ldr	r2, [pc, #84]	@ (80028f8 <TIM_OC5_SetConfig+0xa8>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d007      	beq.n	80028b6 <TIM_OC5_SetConfig+0x66>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a14      	ldr	r2, [pc, #80]	@ (80028fc <TIM_OC5_SetConfig+0xac>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d003      	beq.n	80028b6 <TIM_OC5_SetConfig+0x66>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a13      	ldr	r2, [pc, #76]	@ (8002900 <TIM_OC5_SetConfig+0xb0>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d109      	bne.n	80028ca <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	4a0c      	ldr	r2, [pc, #48]	@ (80028ec <TIM_OC5_SetConfig+0x9c>)
 80028ba:	4013      	ands	r3, r2
 80028bc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	695b      	ldr	r3, [r3, #20]
 80028c2:	021b      	lsls	r3, r3, #8
 80028c4:	697a      	ldr	r2, [r7, #20]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	697a      	ldr	r2, [r7, #20]
 80028ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	685a      	ldr	r2, [r3, #4]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	693a      	ldr	r2, [r7, #16]
 80028e2:	621a      	str	r2, [r3, #32]
}
 80028e4:	46c0      	nop			@ (mov r8, r8)
 80028e6:	46bd      	mov	sp, r7
 80028e8:	b006      	add	sp, #24
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	fffeffff 	.word	0xfffeffff
 80028f0:	fffeff8f 	.word	0xfffeff8f
 80028f4:	fffdffff 	.word	0xfffdffff
 80028f8:	40012c00 	.word	0x40012c00
 80028fc:	40014400 	.word	0x40014400
 8002900:	40014800 	.word	0x40014800

08002904 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b086      	sub	sp, #24
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a1b      	ldr	r3, [r3, #32]
 8002912:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a1b      	ldr	r3, [r3, #32]
 8002918:	4a22      	ldr	r2, [pc, #136]	@ (80029a4 <TIM_OC6_SetConfig+0xa0>)
 800291a:	401a      	ands	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800292a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	4a1e      	ldr	r2, [pc, #120]	@ (80029a8 <TIM_OC6_SetConfig+0xa4>)
 8002930:	4013      	ands	r3, r2
 8002932:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	021b      	lsls	r3, r3, #8
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	4313      	orrs	r3, r2
 800293e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	4a1a      	ldr	r2, [pc, #104]	@ (80029ac <TIM_OC6_SetConfig+0xa8>)
 8002944:	4013      	ands	r3, r2
 8002946:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	051b      	lsls	r3, r3, #20
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	4313      	orrs	r3, r2
 8002952:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4a16      	ldr	r2, [pc, #88]	@ (80029b0 <TIM_OC6_SetConfig+0xac>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d007      	beq.n	800296c <TIM_OC6_SetConfig+0x68>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4a15      	ldr	r2, [pc, #84]	@ (80029b4 <TIM_OC6_SetConfig+0xb0>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d003      	beq.n	800296c <TIM_OC6_SetConfig+0x68>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4a14      	ldr	r2, [pc, #80]	@ (80029b8 <TIM_OC6_SetConfig+0xb4>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d109      	bne.n	8002980 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	4a13      	ldr	r2, [pc, #76]	@ (80029bc <TIM_OC6_SetConfig+0xb8>)
 8002970:	4013      	ands	r3, r2
 8002972:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	695b      	ldr	r3, [r3, #20]
 8002978:	029b      	lsls	r3, r3, #10
 800297a:	697a      	ldr	r2, [r7, #20]
 800297c:	4313      	orrs	r3, r2
 800297e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	697a      	ldr	r2, [r7, #20]
 8002984:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685a      	ldr	r2, [r3, #4]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	693a      	ldr	r2, [r7, #16]
 8002998:	621a      	str	r2, [r3, #32]
}
 800299a:	46c0      	nop			@ (mov r8, r8)
 800299c:	46bd      	mov	sp, r7
 800299e:	b006      	add	sp, #24
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	46c0      	nop			@ (mov r8, r8)
 80029a4:	ffefffff 	.word	0xffefffff
 80029a8:	feff8fff 	.word	0xfeff8fff
 80029ac:	ffdfffff 	.word	0xffdfffff
 80029b0:	40012c00 	.word	0x40012c00
 80029b4:	40014400 	.word	0x40014400
 80029b8:	40014800 	.word	0x40014800
 80029bc:	fffbffff 	.word	0xfffbffff

080029c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b086      	sub	sp, #24
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6a1b      	ldr	r3, [r3, #32]
 80029d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6a1b      	ldr	r3, [r3, #32]
 80029d6:	2201      	movs	r2, #1
 80029d8:	4393      	bics	r3, r2
 80029da:	001a      	movs	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	699b      	ldr	r3, [r3, #24]
 80029e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	22f0      	movs	r2, #240	@ 0xf0
 80029ea:	4393      	bics	r3, r2
 80029ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	011b      	lsls	r3, r3, #4
 80029f2:	693a      	ldr	r2, [r7, #16]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	220a      	movs	r2, #10
 80029fc:	4393      	bics	r3, r2
 80029fe:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a00:	697a      	ldr	r2, [r7, #20]
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	697a      	ldr	r2, [r7, #20]
 8002a12:	621a      	str	r2, [r3, #32]
}
 8002a14:	46c0      	nop			@ (mov r8, r8)
 8002a16:	46bd      	mov	sp, r7
 8002a18:	b006      	add	sp, #24
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b086      	sub	sp, #24
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6a1b      	ldr	r3, [r3, #32]
 8002a2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6a1b      	ldr	r3, [r3, #32]
 8002a32:	2210      	movs	r2, #16
 8002a34:	4393      	bics	r3, r2
 8002a36:	001a      	movs	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	699b      	ldr	r3, [r3, #24]
 8002a40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	4a0d      	ldr	r2, [pc, #52]	@ (8002a7c <TIM_TI2_ConfigInputStage+0x60>)
 8002a46:	4013      	ands	r3, r2
 8002a48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	031b      	lsls	r3, r3, #12
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	22a0      	movs	r2, #160	@ 0xa0
 8002a58:	4393      	bics	r3, r2
 8002a5a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	011b      	lsls	r3, r3, #4
 8002a60:	697a      	ldr	r2, [r7, #20]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	693a      	ldr	r2, [r7, #16]
 8002a6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	697a      	ldr	r2, [r7, #20]
 8002a70:	621a      	str	r2, [r3, #32]
}
 8002a72:	46c0      	nop			@ (mov r8, r8)
 8002a74:	46bd      	mov	sp, r7
 8002a76:	b006      	add	sp, #24
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	46c0      	nop			@ (mov r8, r8)
 8002a7c:	ffff0fff 	.word	0xffff0fff

08002a80 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	4a08      	ldr	r2, [pc, #32]	@ (8002ab4 <TIM_ITRx_SetConfig+0x34>)
 8002a94:	4013      	ands	r3, r2
 8002a96:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a98:	683a      	ldr	r2, [r7, #0]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	2207      	movs	r2, #7
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	609a      	str	r2, [r3, #8]
}
 8002aaa:	46c0      	nop			@ (mov r8, r8)
 8002aac:	46bd      	mov	sp, r7
 8002aae:	b004      	add	sp, #16
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	46c0      	nop			@ (mov r8, r8)
 8002ab4:	ffcfff8f 	.word	0xffcfff8f

08002ab8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b086      	sub	sp, #24
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
 8002ac4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	4a09      	ldr	r2, [pc, #36]	@ (8002af4 <TIM_ETR_SetConfig+0x3c>)
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	021a      	lsls	r2, r3, #8
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	431a      	orrs	r2, r3
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	697a      	ldr	r2, [r7, #20]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	697a      	ldr	r2, [r7, #20]
 8002aea:	609a      	str	r2, [r3, #8]
}
 8002aec:	46c0      	nop			@ (mov r8, r8)
 8002aee:	46bd      	mov	sp, r7
 8002af0:	b006      	add	sp, #24
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	ffff00ff 	.word	0xffff00ff

08002af8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	221f      	movs	r2, #31
 8002b08:	4013      	ands	r3, r2
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	409a      	lsls	r2, r3
 8002b0e:	0013      	movs	r3, r2
 8002b10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	43d2      	mvns	r2, r2
 8002b1a:	401a      	ands	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6a1a      	ldr	r2, [r3, #32]
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	211f      	movs	r1, #31
 8002b28:	400b      	ands	r3, r1
 8002b2a:	6879      	ldr	r1, [r7, #4]
 8002b2c:	4099      	lsls	r1, r3
 8002b2e:	000b      	movs	r3, r1
 8002b30:	431a      	orrs	r2, r3
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	621a      	str	r2, [r3, #32]
}
 8002b36:	46c0      	nop			@ (mov r8, r8)
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	b006      	add	sp, #24
 8002b3c:	bd80      	pop	{r7, pc}
	...

08002b40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	223c      	movs	r2, #60	@ 0x3c
 8002b4e:	5c9b      	ldrb	r3, [r3, r2]
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d101      	bne.n	8002b58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b54:	2302      	movs	r3, #2
 8002b56:	e04a      	b.n	8002bee <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	223c      	movs	r2, #60	@ 0x3c
 8002b5c:	2101      	movs	r1, #1
 8002b5e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	223d      	movs	r2, #61	@ 0x3d
 8002b64:	2102      	movs	r1, #2
 8002b66:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a1e      	ldr	r2, [pc, #120]	@ (8002bf8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d108      	bne.n	8002b94 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	4a1d      	ldr	r2, [pc, #116]	@ (8002bfc <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8002b86:	4013      	ands	r3, r2
 8002b88:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	68fa      	ldr	r2, [r7, #12]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2270      	movs	r2, #112	@ 0x70
 8002b98:	4393      	bics	r3, r2
 8002b9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68fa      	ldr	r2, [r7, #12]
 8002bac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a11      	ldr	r2, [pc, #68]	@ (8002bf8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d004      	beq.n	8002bc2 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a10      	ldr	r2, [pc, #64]	@ (8002c00 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d10c      	bne.n	8002bdc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	2280      	movs	r2, #128	@ 0x80
 8002bc6:	4393      	bics	r3, r2
 8002bc8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	68ba      	ldr	r2, [r7, #8]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68ba      	ldr	r2, [r7, #8]
 8002bda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	223d      	movs	r2, #61	@ 0x3d
 8002be0:	2101      	movs	r1, #1
 8002be2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	223c      	movs	r2, #60	@ 0x3c
 8002be8:	2100      	movs	r1, #0
 8002bea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	0018      	movs	r0, r3
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	b004      	add	sp, #16
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	46c0      	nop			@ (mov r8, r8)
 8002bf8:	40012c00 	.word	0x40012c00
 8002bfc:	ff0fffff 	.word	0xff0fffff
 8002c00:	40000400 	.word	0x40000400

08002c04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e046      	b.n	8002ca4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2288      	movs	r2, #136	@ 0x88
 8002c1a:	589b      	ldr	r3, [r3, r2]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d107      	bne.n	8002c30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2284      	movs	r2, #132	@ 0x84
 8002c24:	2100      	movs	r1, #0
 8002c26:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	0018      	movs	r0, r3
 8002c2c:	f000 f840 	bl	8002cb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2288      	movs	r2, #136	@ 0x88
 8002c34:	2124      	movs	r1, #36	@ 0x24
 8002c36:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2101      	movs	r1, #1
 8002c44:	438a      	bics	r2, r1
 8002c46:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d003      	beq.n	8002c58 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	0018      	movs	r0, r3
 8002c54:	f000 f9b2 	bl	8002fbc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	0018      	movs	r0, r3
 8002c5c:	f000 f830 	bl	8002cc0 <UART_SetConfig>
 8002c60:	0003      	movs	r3, r0
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d101      	bne.n	8002c6a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e01c      	b.n	8002ca4 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	685a      	ldr	r2, [r3, #4]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	490d      	ldr	r1, [pc, #52]	@ (8002cac <HAL_UART_Init+0xa8>)
 8002c76:	400a      	ands	r2, r1
 8002c78:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	689a      	ldr	r2, [r3, #8]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	212a      	movs	r1, #42	@ 0x2a
 8002c86:	438a      	bics	r2, r1
 8002c88:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2101      	movs	r1, #1
 8002c96:	430a      	orrs	r2, r1
 8002c98:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	0018      	movs	r0, r3
 8002c9e:	f000 fa41 	bl	8003124 <UART_CheckIdleState>
 8002ca2:	0003      	movs	r3, r0
}
 8002ca4:	0018      	movs	r0, r3
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	b002      	add	sp, #8
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	ffffb7ff 	.word	0xffffb7ff

08002cb0 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8002cb8:	46c0      	nop			@ (mov r8, r8)
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	b002      	add	sp, #8
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b088      	sub	sp, #32
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002cc8:	231e      	movs	r3, #30
 8002cca:	18fb      	adds	r3, r7, r3
 8002ccc:	2200      	movs	r2, #0
 8002cce:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689a      	ldr	r2, [r3, #8]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	691b      	ldr	r3, [r3, #16]
 8002cd8:	431a      	orrs	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	695b      	ldr	r3, [r3, #20]
 8002cde:	431a      	orrs	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	69db      	ldr	r3, [r3, #28]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4aab      	ldr	r2, [pc, #684]	@ (8002f9c <UART_SetConfig+0x2dc>)
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	0019      	movs	r1, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	697a      	ldr	r2, [r7, #20]
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	4aa6      	ldr	r2, [pc, #664]	@ (8002fa0 <UART_SetConfig+0x2e0>)
 8002d06:	4013      	ands	r3, r2
 8002d08:	0019      	movs	r1, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	68da      	ldr	r2, [r3, #12]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	430a      	orrs	r2, r1
 8002d14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a1b      	ldr	r3, [r3, #32]
 8002d20:	697a      	ldr	r2, [r7, #20]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	4a9d      	ldr	r2, [pc, #628]	@ (8002fa4 <UART_SetConfig+0x2e4>)
 8002d2e:	4013      	ands	r3, r2
 8002d30:	0019      	movs	r1, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	697a      	ldr	r2, [r7, #20]
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d42:	220f      	movs	r2, #15
 8002d44:	4393      	bics	r3, r2
 8002d46:	0019      	movs	r1, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	430a      	orrs	r2, r1
 8002d52:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a93      	ldr	r2, [pc, #588]	@ (8002fa8 <UART_SetConfig+0x2e8>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d127      	bne.n	8002dae <UART_SetConfig+0xee>
 8002d5e:	4b93      	ldr	r3, [pc, #588]	@ (8002fac <UART_SetConfig+0x2ec>)
 8002d60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d62:	2203      	movs	r2, #3
 8002d64:	4013      	ands	r3, r2
 8002d66:	2b03      	cmp	r3, #3
 8002d68:	d017      	beq.n	8002d9a <UART_SetConfig+0xda>
 8002d6a:	d81b      	bhi.n	8002da4 <UART_SetConfig+0xe4>
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d00a      	beq.n	8002d86 <UART_SetConfig+0xc6>
 8002d70:	d818      	bhi.n	8002da4 <UART_SetConfig+0xe4>
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d002      	beq.n	8002d7c <UART_SetConfig+0xbc>
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d00a      	beq.n	8002d90 <UART_SetConfig+0xd0>
 8002d7a:	e013      	b.n	8002da4 <UART_SetConfig+0xe4>
 8002d7c:	231f      	movs	r3, #31
 8002d7e:	18fb      	adds	r3, r7, r3
 8002d80:	2200      	movs	r2, #0
 8002d82:	701a      	strb	r2, [r3, #0]
 8002d84:	e021      	b.n	8002dca <UART_SetConfig+0x10a>
 8002d86:	231f      	movs	r3, #31
 8002d88:	18fb      	adds	r3, r7, r3
 8002d8a:	2202      	movs	r2, #2
 8002d8c:	701a      	strb	r2, [r3, #0]
 8002d8e:	e01c      	b.n	8002dca <UART_SetConfig+0x10a>
 8002d90:	231f      	movs	r3, #31
 8002d92:	18fb      	adds	r3, r7, r3
 8002d94:	2204      	movs	r2, #4
 8002d96:	701a      	strb	r2, [r3, #0]
 8002d98:	e017      	b.n	8002dca <UART_SetConfig+0x10a>
 8002d9a:	231f      	movs	r3, #31
 8002d9c:	18fb      	adds	r3, r7, r3
 8002d9e:	2208      	movs	r2, #8
 8002da0:	701a      	strb	r2, [r3, #0]
 8002da2:	e012      	b.n	8002dca <UART_SetConfig+0x10a>
 8002da4:	231f      	movs	r3, #31
 8002da6:	18fb      	adds	r3, r7, r3
 8002da8:	2210      	movs	r2, #16
 8002daa:	701a      	strb	r2, [r3, #0]
 8002dac:	e00d      	b.n	8002dca <UART_SetConfig+0x10a>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a7f      	ldr	r2, [pc, #508]	@ (8002fb0 <UART_SetConfig+0x2f0>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d104      	bne.n	8002dc2 <UART_SetConfig+0x102>
 8002db8:	231f      	movs	r3, #31
 8002dba:	18fb      	adds	r3, r7, r3
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	701a      	strb	r2, [r3, #0]
 8002dc0:	e003      	b.n	8002dca <UART_SetConfig+0x10a>
 8002dc2:	231f      	movs	r3, #31
 8002dc4:	18fb      	adds	r3, r7, r3
 8002dc6:	2210      	movs	r2, #16
 8002dc8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	69da      	ldr	r2, [r3, #28]
 8002dce:	2380      	movs	r3, #128	@ 0x80
 8002dd0:	021b      	lsls	r3, r3, #8
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d000      	beq.n	8002dd8 <UART_SetConfig+0x118>
 8002dd6:	e06f      	b.n	8002eb8 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8002dd8:	231f      	movs	r3, #31
 8002dda:	18fb      	adds	r3, r7, r3
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	2b08      	cmp	r3, #8
 8002de0:	d01f      	beq.n	8002e22 <UART_SetConfig+0x162>
 8002de2:	dc22      	bgt.n	8002e2a <UART_SetConfig+0x16a>
 8002de4:	2b04      	cmp	r3, #4
 8002de6:	d017      	beq.n	8002e18 <UART_SetConfig+0x158>
 8002de8:	dc1f      	bgt.n	8002e2a <UART_SetConfig+0x16a>
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d002      	beq.n	8002df4 <UART_SetConfig+0x134>
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d005      	beq.n	8002dfe <UART_SetConfig+0x13e>
 8002df2:	e01a      	b.n	8002e2a <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002df4:	f7fe ff58 	bl	8001ca8 <HAL_RCC_GetPCLK1Freq>
 8002df8:	0003      	movs	r3, r0
 8002dfa:	61bb      	str	r3, [r7, #24]
        break;
 8002dfc:	e01c      	b.n	8002e38 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8002dfe:	4b6b      	ldr	r3, [pc, #428]	@ (8002fac <UART_SetConfig+0x2ec>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	095b      	lsrs	r3, r3, #5
 8002e04:	2207      	movs	r2, #7
 8002e06:	4013      	ands	r3, r2
 8002e08:	3301      	adds	r3, #1
 8002e0a:	0019      	movs	r1, r3
 8002e0c:	4869      	ldr	r0, [pc, #420]	@ (8002fb4 <UART_SetConfig+0x2f4>)
 8002e0e:	f7fd f97b 	bl	8000108 <__udivsi3>
 8002e12:	0003      	movs	r3, r0
 8002e14:	61bb      	str	r3, [r7, #24]
        break;
 8002e16:	e00f      	b.n	8002e38 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e18:	f7fe fee8 	bl	8001bec <HAL_RCC_GetSysClockFreq>
 8002e1c:	0003      	movs	r3, r0
 8002e1e:	61bb      	str	r3, [r7, #24]
        break;
 8002e20:	e00a      	b.n	8002e38 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e22:	2380      	movs	r3, #128	@ 0x80
 8002e24:	021b      	lsls	r3, r3, #8
 8002e26:	61bb      	str	r3, [r7, #24]
        break;
 8002e28:	e006      	b.n	8002e38 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002e2e:	231e      	movs	r3, #30
 8002e30:	18fb      	adds	r3, r7, r3
 8002e32:	2201      	movs	r2, #1
 8002e34:	701a      	strb	r2, [r3, #0]
        break;
 8002e36:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d100      	bne.n	8002e40 <UART_SetConfig+0x180>
 8002e3e:	e097      	b.n	8002f70 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e44:	4b5c      	ldr	r3, [pc, #368]	@ (8002fb8 <UART_SetConfig+0x2f8>)
 8002e46:	0052      	lsls	r2, r2, #1
 8002e48:	5ad3      	ldrh	r3, [r2, r3]
 8002e4a:	0019      	movs	r1, r3
 8002e4c:	69b8      	ldr	r0, [r7, #24]
 8002e4e:	f7fd f95b 	bl	8000108 <__udivsi3>
 8002e52:	0003      	movs	r3, r0
 8002e54:	005a      	lsls	r2, r3, #1
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	085b      	lsrs	r3, r3, #1
 8002e5c:	18d2      	adds	r2, r2, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	0019      	movs	r1, r3
 8002e64:	0010      	movs	r0, r2
 8002e66:	f7fd f94f 	bl	8000108 <__udivsi3>
 8002e6a:	0003      	movs	r3, r0
 8002e6c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	2b0f      	cmp	r3, #15
 8002e72:	d91c      	bls.n	8002eae <UART_SetConfig+0x1ee>
 8002e74:	693a      	ldr	r2, [r7, #16]
 8002e76:	2380      	movs	r3, #128	@ 0x80
 8002e78:	025b      	lsls	r3, r3, #9
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d217      	bcs.n	8002eae <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	b29a      	uxth	r2, r3
 8002e82:	200e      	movs	r0, #14
 8002e84:	183b      	adds	r3, r7, r0
 8002e86:	210f      	movs	r1, #15
 8002e88:	438a      	bics	r2, r1
 8002e8a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	085b      	lsrs	r3, r3, #1
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	2207      	movs	r2, #7
 8002e94:	4013      	ands	r3, r2
 8002e96:	b299      	uxth	r1, r3
 8002e98:	183b      	adds	r3, r7, r0
 8002e9a:	183a      	adds	r2, r7, r0
 8002e9c:	8812      	ldrh	r2, [r2, #0]
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	183a      	adds	r2, r7, r0
 8002ea8:	8812      	ldrh	r2, [r2, #0]
 8002eaa:	60da      	str	r2, [r3, #12]
 8002eac:	e060      	b.n	8002f70 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8002eae:	231e      	movs	r3, #30
 8002eb0:	18fb      	adds	r3, r7, r3
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	701a      	strb	r2, [r3, #0]
 8002eb6:	e05b      	b.n	8002f70 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002eb8:	231f      	movs	r3, #31
 8002eba:	18fb      	adds	r3, r7, r3
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	2b08      	cmp	r3, #8
 8002ec0:	d01f      	beq.n	8002f02 <UART_SetConfig+0x242>
 8002ec2:	dc22      	bgt.n	8002f0a <UART_SetConfig+0x24a>
 8002ec4:	2b04      	cmp	r3, #4
 8002ec6:	d017      	beq.n	8002ef8 <UART_SetConfig+0x238>
 8002ec8:	dc1f      	bgt.n	8002f0a <UART_SetConfig+0x24a>
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d002      	beq.n	8002ed4 <UART_SetConfig+0x214>
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d005      	beq.n	8002ede <UART_SetConfig+0x21e>
 8002ed2:	e01a      	b.n	8002f0a <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ed4:	f7fe fee8 	bl	8001ca8 <HAL_RCC_GetPCLK1Freq>
 8002ed8:	0003      	movs	r3, r0
 8002eda:	61bb      	str	r3, [r7, #24]
        break;
 8002edc:	e01c      	b.n	8002f18 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8002ede:	4b33      	ldr	r3, [pc, #204]	@ (8002fac <UART_SetConfig+0x2ec>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	095b      	lsrs	r3, r3, #5
 8002ee4:	2207      	movs	r2, #7
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	3301      	adds	r3, #1
 8002eea:	0019      	movs	r1, r3
 8002eec:	4831      	ldr	r0, [pc, #196]	@ (8002fb4 <UART_SetConfig+0x2f4>)
 8002eee:	f7fd f90b 	bl	8000108 <__udivsi3>
 8002ef2:	0003      	movs	r3, r0
 8002ef4:	61bb      	str	r3, [r7, #24]
        break;
 8002ef6:	e00f      	b.n	8002f18 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ef8:	f7fe fe78 	bl	8001bec <HAL_RCC_GetSysClockFreq>
 8002efc:	0003      	movs	r3, r0
 8002efe:	61bb      	str	r3, [r7, #24]
        break;
 8002f00:	e00a      	b.n	8002f18 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f02:	2380      	movs	r3, #128	@ 0x80
 8002f04:	021b      	lsls	r3, r3, #8
 8002f06:	61bb      	str	r3, [r7, #24]
        break;
 8002f08:	e006      	b.n	8002f18 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002f0e:	231e      	movs	r3, #30
 8002f10:	18fb      	adds	r3, r7, r3
 8002f12:	2201      	movs	r2, #1
 8002f14:	701a      	strb	r2, [r3, #0]
        break;
 8002f16:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d028      	beq.n	8002f70 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f22:	4b25      	ldr	r3, [pc, #148]	@ (8002fb8 <UART_SetConfig+0x2f8>)
 8002f24:	0052      	lsls	r2, r2, #1
 8002f26:	5ad3      	ldrh	r3, [r2, r3]
 8002f28:	0019      	movs	r1, r3
 8002f2a:	69b8      	ldr	r0, [r7, #24]
 8002f2c:	f7fd f8ec 	bl	8000108 <__udivsi3>
 8002f30:	0003      	movs	r3, r0
 8002f32:	001a      	movs	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	085b      	lsrs	r3, r3, #1
 8002f3a:	18d2      	adds	r2, r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	0019      	movs	r1, r3
 8002f42:	0010      	movs	r0, r2
 8002f44:	f7fd f8e0 	bl	8000108 <__udivsi3>
 8002f48:	0003      	movs	r3, r0
 8002f4a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	2b0f      	cmp	r3, #15
 8002f50:	d90a      	bls.n	8002f68 <UART_SetConfig+0x2a8>
 8002f52:	693a      	ldr	r2, [r7, #16]
 8002f54:	2380      	movs	r3, #128	@ 0x80
 8002f56:	025b      	lsls	r3, r3, #9
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d205      	bcs.n	8002f68 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	b29a      	uxth	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	60da      	str	r2, [r3, #12]
 8002f66:	e003      	b.n	8002f70 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8002f68:	231e      	movs	r3, #30
 8002f6a:	18fb      	adds	r3, r7, r3
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	226a      	movs	r2, #106	@ 0x6a
 8002f74:	2101      	movs	r1, #1
 8002f76:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2268      	movs	r2, #104	@ 0x68
 8002f7c:	2101      	movs	r1, #1
 8002f7e:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002f8c:	231e      	movs	r3, #30
 8002f8e:	18fb      	adds	r3, r7, r3
 8002f90:	781b      	ldrb	r3, [r3, #0]
}
 8002f92:	0018      	movs	r0, r3
 8002f94:	46bd      	mov	sp, r7
 8002f96:	b008      	add	sp, #32
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	46c0      	nop			@ (mov r8, r8)
 8002f9c:	cfff69f3 	.word	0xcfff69f3
 8002fa0:	ffffcfff 	.word	0xffffcfff
 8002fa4:	11fff4ff 	.word	0x11fff4ff
 8002fa8:	40013800 	.word	0x40013800
 8002fac:	40021000 	.word	0x40021000
 8002fb0:	40004400 	.word	0x40004400
 8002fb4:	02dc6c00 	.word	0x02dc6c00
 8002fb8:	08003550 	.word	0x08003550

08002fbc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fc8:	2208      	movs	r2, #8
 8002fca:	4013      	ands	r3, r2
 8002fcc:	d00b      	beq.n	8002fe6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	4a4a      	ldr	r2, [pc, #296]	@ (8003100 <UART_AdvFeatureConfig+0x144>)
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	0019      	movs	r1, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fea:	2201      	movs	r2, #1
 8002fec:	4013      	ands	r3, r2
 8002fee:	d00b      	beq.n	8003008 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	4a43      	ldr	r2, [pc, #268]	@ (8003104 <UART_AdvFeatureConfig+0x148>)
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	0019      	movs	r1, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	430a      	orrs	r2, r1
 8003006:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800300c:	2202      	movs	r2, #2
 800300e:	4013      	ands	r3, r2
 8003010:	d00b      	beq.n	800302a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	4a3b      	ldr	r2, [pc, #236]	@ (8003108 <UART_AdvFeatureConfig+0x14c>)
 800301a:	4013      	ands	r3, r2
 800301c:	0019      	movs	r1, r3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	430a      	orrs	r2, r1
 8003028:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800302e:	2204      	movs	r2, #4
 8003030:	4013      	ands	r3, r2
 8003032:	d00b      	beq.n	800304c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	4a34      	ldr	r2, [pc, #208]	@ (800310c <UART_AdvFeatureConfig+0x150>)
 800303c:	4013      	ands	r3, r2
 800303e:	0019      	movs	r1, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	430a      	orrs	r2, r1
 800304a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003050:	2210      	movs	r2, #16
 8003052:	4013      	ands	r3, r2
 8003054:	d00b      	beq.n	800306e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	4a2c      	ldr	r2, [pc, #176]	@ (8003110 <UART_AdvFeatureConfig+0x154>)
 800305e:	4013      	ands	r3, r2
 8003060:	0019      	movs	r1, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	430a      	orrs	r2, r1
 800306c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003072:	2220      	movs	r2, #32
 8003074:	4013      	ands	r3, r2
 8003076:	d00b      	beq.n	8003090 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	4a25      	ldr	r2, [pc, #148]	@ (8003114 <UART_AdvFeatureConfig+0x158>)
 8003080:	4013      	ands	r3, r2
 8003082:	0019      	movs	r1, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	430a      	orrs	r2, r1
 800308e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003094:	2240      	movs	r2, #64	@ 0x40
 8003096:	4013      	ands	r3, r2
 8003098:	d01d      	beq.n	80030d6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	4a1d      	ldr	r2, [pc, #116]	@ (8003118 <UART_AdvFeatureConfig+0x15c>)
 80030a2:	4013      	ands	r3, r2
 80030a4:	0019      	movs	r1, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	430a      	orrs	r2, r1
 80030b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80030b6:	2380      	movs	r3, #128	@ 0x80
 80030b8:	035b      	lsls	r3, r3, #13
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d10b      	bne.n	80030d6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	4a15      	ldr	r2, [pc, #84]	@ (800311c <UART_AdvFeatureConfig+0x160>)
 80030c6:	4013      	ands	r3, r2
 80030c8:	0019      	movs	r1, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	430a      	orrs	r2, r1
 80030d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030da:	2280      	movs	r2, #128	@ 0x80
 80030dc:	4013      	ands	r3, r2
 80030de:	d00b      	beq.n	80030f8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	4a0e      	ldr	r2, [pc, #56]	@ (8003120 <UART_AdvFeatureConfig+0x164>)
 80030e8:	4013      	ands	r3, r2
 80030ea:	0019      	movs	r1, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	430a      	orrs	r2, r1
 80030f6:	605a      	str	r2, [r3, #4]
  }
}
 80030f8:	46c0      	nop			@ (mov r8, r8)
 80030fa:	46bd      	mov	sp, r7
 80030fc:	b002      	add	sp, #8
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	ffff7fff 	.word	0xffff7fff
 8003104:	fffdffff 	.word	0xfffdffff
 8003108:	fffeffff 	.word	0xfffeffff
 800310c:	fffbffff 	.word	0xfffbffff
 8003110:	ffffefff 	.word	0xffffefff
 8003114:	ffffdfff 	.word	0xffffdfff
 8003118:	ffefffff 	.word	0xffefffff
 800311c:	ff9fffff 	.word	0xff9fffff
 8003120:	fff7ffff 	.word	0xfff7ffff

08003124 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b092      	sub	sp, #72	@ 0x48
 8003128:	af02      	add	r7, sp, #8
 800312a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2290      	movs	r2, #144	@ 0x90
 8003130:	2100      	movs	r1, #0
 8003132:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003134:	f7fd ff54 	bl	8000fe0 <HAL_GetTick>
 8003138:	0003      	movs	r3, r0
 800313a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2208      	movs	r2, #8
 8003144:	4013      	ands	r3, r2
 8003146:	2b08      	cmp	r3, #8
 8003148:	d12d      	bne.n	80031a6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800314a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800314c:	2280      	movs	r2, #128	@ 0x80
 800314e:	0391      	lsls	r1, r2, #14
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	4a47      	ldr	r2, [pc, #284]	@ (8003270 <UART_CheckIdleState+0x14c>)
 8003154:	9200      	str	r2, [sp, #0]
 8003156:	2200      	movs	r2, #0
 8003158:	f000 f88e 	bl	8003278 <UART_WaitOnFlagUntilTimeout>
 800315c:	1e03      	subs	r3, r0, #0
 800315e:	d022      	beq.n	80031a6 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003160:	f3ef 8310 	mrs	r3, PRIMASK
 8003164:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003168:	63bb      	str	r3, [r7, #56]	@ 0x38
 800316a:	2301      	movs	r3, #1
 800316c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800316e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003170:	f383 8810 	msr	PRIMASK, r3
}
 8003174:	46c0      	nop			@ (mov r8, r8)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2180      	movs	r1, #128	@ 0x80
 8003182:	438a      	bics	r2, r1
 8003184:	601a      	str	r2, [r3, #0]
 8003186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003188:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800318a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800318c:	f383 8810 	msr	PRIMASK, r3
}
 8003190:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2288      	movs	r2, #136	@ 0x88
 8003196:	2120      	movs	r1, #32
 8003198:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2284      	movs	r2, #132	@ 0x84
 800319e:	2100      	movs	r1, #0
 80031a0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e060      	b.n	8003268 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2204      	movs	r2, #4
 80031ae:	4013      	ands	r3, r2
 80031b0:	2b04      	cmp	r3, #4
 80031b2:	d146      	bne.n	8003242 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031b6:	2280      	movs	r2, #128	@ 0x80
 80031b8:	03d1      	lsls	r1, r2, #15
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	4a2c      	ldr	r2, [pc, #176]	@ (8003270 <UART_CheckIdleState+0x14c>)
 80031be:	9200      	str	r2, [sp, #0]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f000 f859 	bl	8003278 <UART_WaitOnFlagUntilTimeout>
 80031c6:	1e03      	subs	r3, r0, #0
 80031c8:	d03b      	beq.n	8003242 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80031ca:	f3ef 8310 	mrs	r3, PRIMASK
 80031ce:	60fb      	str	r3, [r7, #12]
  return(result);
 80031d0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80031d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80031d4:	2301      	movs	r3, #1
 80031d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	f383 8810 	msr	PRIMASK, r3
}
 80031de:	46c0      	nop			@ (mov r8, r8)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4922      	ldr	r1, [pc, #136]	@ (8003274 <UART_CheckIdleState+0x150>)
 80031ec:	400a      	ands	r2, r1
 80031ee:	601a      	str	r2, [r3, #0]
 80031f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	f383 8810 	msr	PRIMASK, r3
}
 80031fa:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80031fc:	f3ef 8310 	mrs	r3, PRIMASK
 8003200:	61bb      	str	r3, [r7, #24]
  return(result);
 8003202:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003204:	633b      	str	r3, [r7, #48]	@ 0x30
 8003206:	2301      	movs	r3, #1
 8003208:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	f383 8810 	msr	PRIMASK, r3
}
 8003210:	46c0      	nop			@ (mov r8, r8)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	689a      	ldr	r2, [r3, #8]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2101      	movs	r1, #1
 800321e:	438a      	bics	r2, r1
 8003220:	609a      	str	r2, [r3, #8]
 8003222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003224:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003226:	6a3b      	ldr	r3, [r7, #32]
 8003228:	f383 8810 	msr	PRIMASK, r3
}
 800322c:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	228c      	movs	r2, #140	@ 0x8c
 8003232:	2120      	movs	r1, #32
 8003234:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2284      	movs	r2, #132	@ 0x84
 800323a:	2100      	movs	r1, #0
 800323c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e012      	b.n	8003268 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2288      	movs	r2, #136	@ 0x88
 8003246:	2120      	movs	r1, #32
 8003248:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	228c      	movs	r2, #140	@ 0x8c
 800324e:	2120      	movs	r1, #32
 8003250:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2284      	movs	r2, #132	@ 0x84
 8003262:	2100      	movs	r1, #0
 8003264:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	0018      	movs	r0, r3
 800326a:	46bd      	mov	sp, r7
 800326c:	b010      	add	sp, #64	@ 0x40
 800326e:	bd80      	pop	{r7, pc}
 8003270:	01ffffff 	.word	0x01ffffff
 8003274:	fffffedf 	.word	0xfffffedf

08003278 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	603b      	str	r3, [r7, #0]
 8003284:	1dfb      	adds	r3, r7, #7
 8003286:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003288:	e051      	b.n	800332e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	3301      	adds	r3, #1
 800328e:	d04e      	beq.n	800332e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003290:	f7fd fea6 	bl	8000fe0 <HAL_GetTick>
 8003294:	0002      	movs	r2, r0
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	69ba      	ldr	r2, [r7, #24]
 800329c:	429a      	cmp	r2, r3
 800329e:	d302      	bcc.n	80032a6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e051      	b.n	800334e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2204      	movs	r2, #4
 80032b2:	4013      	ands	r3, r2
 80032b4:	d03b      	beq.n	800332e <UART_WaitOnFlagUntilTimeout+0xb6>
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	2b80      	cmp	r3, #128	@ 0x80
 80032ba:	d038      	beq.n	800332e <UART_WaitOnFlagUntilTimeout+0xb6>
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	2b40      	cmp	r3, #64	@ 0x40
 80032c0:	d035      	beq.n	800332e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	69db      	ldr	r3, [r3, #28]
 80032c8:	2208      	movs	r2, #8
 80032ca:	4013      	ands	r3, r2
 80032cc:	2b08      	cmp	r3, #8
 80032ce:	d111      	bne.n	80032f4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2208      	movs	r2, #8
 80032d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	0018      	movs	r0, r3
 80032dc:	f000 f83c 	bl	8003358 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2290      	movs	r2, #144	@ 0x90
 80032e4:	2108      	movs	r1, #8
 80032e6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2284      	movs	r2, #132	@ 0x84
 80032ec:	2100      	movs	r1, #0
 80032ee:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e02c      	b.n	800334e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	69da      	ldr	r2, [r3, #28]
 80032fa:	2380      	movs	r3, #128	@ 0x80
 80032fc:	011b      	lsls	r3, r3, #4
 80032fe:	401a      	ands	r2, r3
 8003300:	2380      	movs	r3, #128	@ 0x80
 8003302:	011b      	lsls	r3, r3, #4
 8003304:	429a      	cmp	r2, r3
 8003306:	d112      	bne.n	800332e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2280      	movs	r2, #128	@ 0x80
 800330e:	0112      	lsls	r2, r2, #4
 8003310:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	0018      	movs	r0, r3
 8003316:	f000 f81f 	bl	8003358 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2290      	movs	r2, #144	@ 0x90
 800331e:	2120      	movs	r1, #32
 8003320:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2284      	movs	r2, #132	@ 0x84
 8003326:	2100      	movs	r1, #0
 8003328:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e00f      	b.n	800334e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	69db      	ldr	r3, [r3, #28]
 8003334:	68ba      	ldr	r2, [r7, #8]
 8003336:	4013      	ands	r3, r2
 8003338:	68ba      	ldr	r2, [r7, #8]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	425a      	negs	r2, r3
 800333e:	4153      	adcs	r3, r2
 8003340:	b2db      	uxtb	r3, r3
 8003342:	001a      	movs	r2, r3
 8003344:	1dfb      	adds	r3, r7, #7
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	429a      	cmp	r2, r3
 800334a:	d09e      	beq.n	800328a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	0018      	movs	r0, r3
 8003350:	46bd      	mov	sp, r7
 8003352:	b004      	add	sp, #16
 8003354:	bd80      	pop	{r7, pc}
	...

08003358 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b08e      	sub	sp, #56	@ 0x38
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003360:	f3ef 8310 	mrs	r3, PRIMASK
 8003364:	617b      	str	r3, [r7, #20]
  return(result);
 8003366:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003368:	637b      	str	r3, [r7, #52]	@ 0x34
 800336a:	2301      	movs	r3, #1
 800336c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	f383 8810 	msr	PRIMASK, r3
}
 8003374:	46c0      	nop			@ (mov r8, r8)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4926      	ldr	r1, [pc, #152]	@ (800341c <UART_EndRxTransfer+0xc4>)
 8003382:	400a      	ands	r2, r1
 8003384:	601a      	str	r2, [r3, #0]
 8003386:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003388:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	f383 8810 	msr	PRIMASK, r3
}
 8003390:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003392:	f3ef 8310 	mrs	r3, PRIMASK
 8003396:	623b      	str	r3, [r7, #32]
  return(result);
 8003398:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800339a:	633b      	str	r3, [r7, #48]	@ 0x30
 800339c:	2301      	movs	r3, #1
 800339e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a2:	f383 8810 	msr	PRIMASK, r3
}
 80033a6:	46c0      	nop			@ (mov r8, r8)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	689a      	ldr	r2, [r3, #8]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	491b      	ldr	r1, [pc, #108]	@ (8003420 <UART_EndRxTransfer+0xc8>)
 80033b4:	400a      	ands	r2, r1
 80033b6:	609a      	str	r2, [r3, #8]
 80033b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033be:	f383 8810 	msr	PRIMASK, r3
}
 80033c2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d118      	bne.n	80033fe <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80033cc:	f3ef 8310 	mrs	r3, PRIMASK
 80033d0:	60bb      	str	r3, [r7, #8]
  return(result);
 80033d2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033d6:	2301      	movs	r3, #1
 80033d8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f383 8810 	msr	PRIMASK, r3
}
 80033e0:	46c0      	nop			@ (mov r8, r8)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2110      	movs	r1, #16
 80033ee:	438a      	bics	r2, r1
 80033f0:	601a      	str	r2, [r3, #0]
 80033f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	f383 8810 	msr	PRIMASK, r3
}
 80033fc:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	228c      	movs	r2, #140	@ 0x8c
 8003402:	2120      	movs	r1, #32
 8003404:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003412:	46c0      	nop			@ (mov r8, r8)
 8003414:	46bd      	mov	sp, r7
 8003416:	b00e      	add	sp, #56	@ 0x38
 8003418:	bd80      	pop	{r7, pc}
 800341a:	46c0      	nop			@ (mov r8, r8)
 800341c:	fffffedf 	.word	0xfffffedf
 8003420:	effffffe 	.word	0xeffffffe

08003424 <memset>:
 8003424:	0003      	movs	r3, r0
 8003426:	1882      	adds	r2, r0, r2
 8003428:	4293      	cmp	r3, r2
 800342a:	d100      	bne.n	800342e <memset+0xa>
 800342c:	4770      	bx	lr
 800342e:	7019      	strb	r1, [r3, #0]
 8003430:	3301      	adds	r3, #1
 8003432:	e7f9      	b.n	8003428 <memset+0x4>

08003434 <__libc_init_array>:
 8003434:	b570      	push	{r4, r5, r6, lr}
 8003436:	2600      	movs	r6, #0
 8003438:	4c0c      	ldr	r4, [pc, #48]	@ (800346c <__libc_init_array+0x38>)
 800343a:	4d0d      	ldr	r5, [pc, #52]	@ (8003470 <__libc_init_array+0x3c>)
 800343c:	1b64      	subs	r4, r4, r5
 800343e:	10a4      	asrs	r4, r4, #2
 8003440:	42a6      	cmp	r6, r4
 8003442:	d109      	bne.n	8003458 <__libc_init_array+0x24>
 8003444:	2600      	movs	r6, #0
 8003446:	f000 f819 	bl	800347c <_init>
 800344a:	4c0a      	ldr	r4, [pc, #40]	@ (8003474 <__libc_init_array+0x40>)
 800344c:	4d0a      	ldr	r5, [pc, #40]	@ (8003478 <__libc_init_array+0x44>)
 800344e:	1b64      	subs	r4, r4, r5
 8003450:	10a4      	asrs	r4, r4, #2
 8003452:	42a6      	cmp	r6, r4
 8003454:	d105      	bne.n	8003462 <__libc_init_array+0x2e>
 8003456:	bd70      	pop	{r4, r5, r6, pc}
 8003458:	00b3      	lsls	r3, r6, #2
 800345a:	58eb      	ldr	r3, [r5, r3]
 800345c:	4798      	blx	r3
 800345e:	3601      	adds	r6, #1
 8003460:	e7ee      	b.n	8003440 <__libc_init_array+0xc>
 8003462:	00b3      	lsls	r3, r6, #2
 8003464:	58eb      	ldr	r3, [r5, r3]
 8003466:	4798      	blx	r3
 8003468:	3601      	adds	r6, #1
 800346a:	e7f2      	b.n	8003452 <__libc_init_array+0x1e>
 800346c:	08003568 	.word	0x08003568
 8003470:	08003568 	.word	0x08003568
 8003474:	0800356c 	.word	0x0800356c
 8003478:	08003568 	.word	0x08003568

0800347c <_init>:
 800347c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800347e:	46c0      	nop			@ (mov r8, r8)
 8003480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003482:	bc08      	pop	{r3}
 8003484:	469e      	mov	lr, r3
 8003486:	4770      	bx	lr

08003488 <_fini>:
 8003488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800348a:	46c0      	nop			@ (mov r8, r8)
 800348c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800348e:	bc08      	pop	{r3}
 8003490:	469e      	mov	lr, r3
 8003492:	4770      	bx	lr
